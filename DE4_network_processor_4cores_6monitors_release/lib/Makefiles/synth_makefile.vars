##################################################################
# Variables
#
# This makefile sets the various variables that are used by the 
# rules makefile
#
SHELL = /bin/sh

SRC_DIR = $(DESIGN_DIR)/src
MEGAFUNCTIONS_DIR = $(DESIGN_DIR)/megafunctions
LIB_DIR = $(NF2_DE4_ROOT)/lib/verilog
COMMON_DIR = $(LIB_DIR)/core/common/src
INC_DIR = $(DESIGN_DIR)/include

LIB_MODULES=core/bin_cam core/common core/input_arbiter/rr_input_arbiter core/io_queues/ethernet_mac core/jtag_interface core/nf2/reference_core core/output_port_lookup/cam_router core/output_queues/sram_rr_output_queues core/sram_imp core/terasic core/ter_cam core/user_data_path/reference_user_data_path core/user_data_path/udp_reg_master core/utils core/utils/generic_regs

# user sources: all .v file in the src directory and one level under it
SRCS := $(COMMON_DIR)/NF_2.1_defines.v $(COMMON_DIR)/reg_defines_reference_router.v $(COMMON_DIR)/udp_defines.v $(COMMON_DIR)/registers.v 
SRCS := $(SRCS) $(wildcard $(SRC_DIR)/*.v) $(wildcard $(SRC_DIR)/*/*.v) 


# function that compares the two input filenames 
# and returns the first input if the filenames match
compare_base = $(if $(filter $(notdir $(1)),$(notdir $(2))),$(1))

# function that returns the list of files with a matching name in 
filename_match_list = $(foreach other_src,$(2),$(call compare_base,$(strip $(other_src)),$(strip $(1))))

# function that returns the last word in the list of files 
# matching the filename of the input. Unfortunately, the version of make
# in Centos 4.4 doesn't have $(lastword ...) function.
last_filename_match = $(word $(words $(call filename_match_list,$(1),$(2))),$(call filename_match_list,$(1),$(2)))

# function that returns the first word in the list of files 
# matching the filename of the input
first_filename_match = $(word 1,$(call filename_match_list,$(1),$(2)))

# get the library sources: if two modules have files with the same name, then the module
# specified first in the project xml file will be used.

# First get all files...
LIB_SRCS := $(foreach module,$(LIB_MODULES),$(wildcard $(strip $(LIB_DIR)/$(module)/src/*.v)))

# Second build a list using only unique files or files that come first in the list:
# for each source in the list, build a list of files with the same name, and then
# only add it to the list if it is first in this list.
LIB_SRCS := $(foreach src,$(LIB_SRCS),$(findstring $(src),$(call first_filename_match,$(src),$(LIB_SRCS))))

# Third, remove any files that are overridden by local sources
LIB_SRCS := $(filter-out $(addprefix %/, $(notdir $(SRCS))),$(LIB_SRCS))


# Merge in the lib sources to the local sources
SRCS := $(SRCS) $(LIB_SRCS)

ALL_SRCS := $(SRCS)
RESULT := $(shell cp $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/project_files_backup/* .)
RESULT := $(shell $(NF2_DE4_ROOT)/bin/gen_qsf.pl $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/build_dir/DE4_Reference_Router.qsf verilog $(ALL_SRCS))

LIB_SRCS := $(foreach module,$(LIB_MODULES),$(wildcard $(strip $(LIB_DIR)/$(module)/megafunctions/*.v)))
ALL_SRCS := $(SRCS) 

RESULT := $(shell $(NF2_DE4_ROOT)/bin/gen_simulate.pl $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/build_dir/DE4_Reference_Router.do verilog $(ALL_SRCS))
RESULT := $(shell $(NF2_DE4_ROOT)/bin/gen_simulate.pl $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/build_dir/DE4_Reference_Router.do megafunction $(LIB_SRCS))
RESULT := $(shell $(NF2_DE4_ROOT)/bin/gen_simulate.pl $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/build_dir/DE4_Reference_Router.do simulation)

QIP_SRCS := $(foreach module,$(LIB_MODULES),$(wildcard $(strip $(LIB_DIR)/$(module)/megafunctions/*.qip)))
RESULT := $(shell $(NF2_DE4_ROOT)/bin/gen_qsf.pl $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/build_dir/DE4_Reference_Router.qsf verilog $(LIB_SRCS))
RESULT := $(shell $(NF2_DE4_ROOT)/bin/gen_qsf.pl $(NF2_DE4_ROOT)/projects/$(PROJECT)/synth/linux/build_dir/DE4_Reference_Router.qsf qip $(QIP_SRCS))

