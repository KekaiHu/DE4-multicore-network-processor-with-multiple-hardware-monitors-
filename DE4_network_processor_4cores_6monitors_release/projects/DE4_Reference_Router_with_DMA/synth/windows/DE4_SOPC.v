//megafunction wizard: %Altera SOPC Builder%
//GENERATION: STANDARD
//VERSION: WM1.0


//Legal Notice: (C)2013 Altera Corporation. All rights reserved.  Your
//use of Altera Corporation's design tools, logic functions and other
//software and tools, and its AMPP partner logic functions, and any
//output files any of the foregoing (including device programming or
//simulation files), and any associated documentation or information are
//expressly subject to the terms and conditions of the Altera Program
//License Subscription Agreement or other applicable license agreement,
//including, without limitation, that your use is for the sole purpose
//of programming logic devices manufactured by Altera and sold by Altera
//or its authorized distributors.  Please refer to the applicable
//agreement for further details.

// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module burstcount_fifo_for_DE4_SOPC_burst_0_upstream_module (
                                                              // inputs:
                                                               clear_fifo,
                                                               clk,
                                                               data_in,
                                                               read,
                                                               reset_n,
                                                               sync_reset,
                                                               write,

                                                              // outputs:
                                                               data_out,
                                                               empty,
                                                               fifo_contains_ones_n,
                                                               full
                                                            )
;

  output  [ 10: 0] data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input   [ 10: 0] data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire    [ 10: 0] data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_2;
  wire             full_3;
  reg     [  2: 0] how_many_ones;
  wire    [  2: 0] one_count_minus_one;
  wire    [  2: 0] one_count_plus_one;
  wire             p0_full_0;
  wire    [ 10: 0] p0_stage_0;
  wire             p1_full_1;
  wire    [ 10: 0] p1_stage_1;
  wire             p2_full_2;
  wire    [ 10: 0] p2_stage_2;
  reg     [ 10: 0] stage_0;
  reg     [ 10: 0] stage_1;
  reg     [ 10: 0] stage_2;
  wire    [  2: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_2;
  assign empty = !full_0;
  assign full_3 = 0;
  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    0;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_0_upstream_module (
                                                                                       // inputs:
                                                                                        clear_fifo,
                                                                                        clk,
                                                                                        data_in,
                                                                                        read,
                                                                                        reset_n,
                                                                                        sync_reset,
                                                                                        write,

                                                                                       // outputs:
                                                                                        data_out,
                                                                                        empty,
                                                                                        fifo_contains_ones_n,
                                                                                        full
                                                                                     )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_2;
  wire             full_3;
  reg     [  2: 0] how_many_ones;
  wire    [  2: 0] one_count_minus_one;
  wire    [  2: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p1_full_1;
  wire             p1_stage_1;
  wire             p2_full_2;
  wire             p2_stage_2;
  reg              stage_0;
  reg              stage_1;
  reg              stage_2;
  wire    [  2: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_2;
  assign empty = !full_0;
  assign full_3 = 0;
  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    0;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_0_upstream_arbitrator (
                                              // inputs:
                                               DE4_SOPC_burst_0_upstream_readdata,
                                               DE4_SOPC_burst_0_upstream_readdatavalid,
                                               DE4_SOPC_burst_0_upstream_waitrequest,
                                               clk,
                                               pcie_compiler_0_Rx_Interface_address_to_slave,
                                               pcie_compiler_0_Rx_Interface_burstcount,
                                               pcie_compiler_0_Rx_Interface_byteenable,
                                               pcie_compiler_0_Rx_Interface_dbs_address,
                                               pcie_compiler_0_Rx_Interface_dbs_write_32,
                                               pcie_compiler_0_Rx_Interface_latency_counter,
                                               pcie_compiler_0_Rx_Interface_read,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_write,
                                               reset_n,

                                              // outputs:
                                               DE4_SOPC_burst_0_upstream_address,
                                               DE4_SOPC_burst_0_upstream_burstcount,
                                               DE4_SOPC_burst_0_upstream_byteaddress,
                                               DE4_SOPC_burst_0_upstream_byteenable,
                                               DE4_SOPC_burst_0_upstream_debugaccess,
                                               DE4_SOPC_burst_0_upstream_read,
                                               DE4_SOPC_burst_0_upstream_readdata_from_sa,
                                               DE4_SOPC_burst_0_upstream_waitrequest_from_sa,
                                               DE4_SOPC_burst_0_upstream_write,
                                               DE4_SOPC_burst_0_upstream_writedata,
                                               d1_DE4_SOPC_burst_0_upstream_end_xfer,
                                               pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream,
                                               pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream,
                                               pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream
                                            )
;

  output  [ 28: 0] DE4_SOPC_burst_0_upstream_address;
  output  [  9: 0] DE4_SOPC_burst_0_upstream_burstcount;
  output  [ 30: 0] DE4_SOPC_burst_0_upstream_byteaddress;
  output  [  3: 0] DE4_SOPC_burst_0_upstream_byteenable;
  output           DE4_SOPC_burst_0_upstream_debugaccess;
  output           DE4_SOPC_burst_0_upstream_read;
  output  [ 31: 0] DE4_SOPC_burst_0_upstream_readdata_from_sa;
  output           DE4_SOPC_burst_0_upstream_waitrequest_from_sa;
  output           DE4_SOPC_burst_0_upstream_write;
  output  [ 31: 0] DE4_SOPC_burst_0_upstream_writedata;
  output           d1_DE4_SOPC_burst_0_upstream_end_xfer;
  output  [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream;
  output           pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream;
  output           pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream;
  output           pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream;
  output           pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register;
  output           pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream;
  input   [ 31: 0] DE4_SOPC_burst_0_upstream_readdata;
  input            DE4_SOPC_burst_0_upstream_readdatavalid;
  input            DE4_SOPC_burst_0_upstream_waitrequest;
  input            clk;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_address_to_slave;
  input   [  9: 0] pcie_compiler_0_Rx_Interface_burstcount;
  input   [  7: 0] pcie_compiler_0_Rx_Interface_byteenable;
  input   [  2: 0] pcie_compiler_0_Rx_Interface_dbs_address;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_dbs_write_32;
  input            pcie_compiler_0_Rx_Interface_latency_counter;
  input            pcie_compiler_0_Rx_Interface_read;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_write;
  input            reset_n;

  wire    [ 28: 0] DE4_SOPC_burst_0_upstream_address;
  wire             DE4_SOPC_burst_0_upstream_allgrants;
  wire             DE4_SOPC_burst_0_upstream_allow_new_arb_cycle;
  wire             DE4_SOPC_burst_0_upstream_any_bursting_master_saved_grant;
  wire             DE4_SOPC_burst_0_upstream_any_continuerequest;
  wire             DE4_SOPC_burst_0_upstream_arb_counter_enable;
  reg     [ 11: 0] DE4_SOPC_burst_0_upstream_arb_share_counter;
  wire    [ 11: 0] DE4_SOPC_burst_0_upstream_arb_share_counter_next_value;
  wire    [ 11: 0] DE4_SOPC_burst_0_upstream_arb_share_set_values;
  reg     [  8: 0] DE4_SOPC_burst_0_upstream_bbt_burstcounter;
  wire             DE4_SOPC_burst_0_upstream_beginbursttransfer_internal;
  wire             DE4_SOPC_burst_0_upstream_begins_xfer;
  wire    [  9: 0] DE4_SOPC_burst_0_upstream_burstcount;
  wire             DE4_SOPC_burst_0_upstream_burstcount_fifo_empty;
  wire    [ 30: 0] DE4_SOPC_burst_0_upstream_byteaddress;
  wire    [  3: 0] DE4_SOPC_burst_0_upstream_byteenable;
  reg     [ 10: 0] DE4_SOPC_burst_0_upstream_current_burst;
  wire    [ 10: 0] DE4_SOPC_burst_0_upstream_current_burst_minus_one;
  wire             DE4_SOPC_burst_0_upstream_debugaccess;
  wire             DE4_SOPC_burst_0_upstream_end_xfer;
  wire             DE4_SOPC_burst_0_upstream_firsttransfer;
  wire             DE4_SOPC_burst_0_upstream_grant_vector;
  wire             DE4_SOPC_burst_0_upstream_in_a_read_cycle;
  wire             DE4_SOPC_burst_0_upstream_in_a_write_cycle;
  reg              DE4_SOPC_burst_0_upstream_load_fifo;
  wire             DE4_SOPC_burst_0_upstream_master_qreq_vector;
  wire             DE4_SOPC_burst_0_upstream_move_on_to_next_transaction;
  wire    [  8: 0] DE4_SOPC_burst_0_upstream_next_bbt_burstcount;
  wire    [ 10: 0] DE4_SOPC_burst_0_upstream_next_burst_count;
  wire             DE4_SOPC_burst_0_upstream_non_bursting_master_requests;
  wire             DE4_SOPC_burst_0_upstream_read;
  wire    [ 31: 0] DE4_SOPC_burst_0_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_0_upstream_readdatavalid_from_sa;
  reg              DE4_SOPC_burst_0_upstream_reg_firsttransfer;
  wire    [ 10: 0] DE4_SOPC_burst_0_upstream_selected_burstcount;
  reg              DE4_SOPC_burst_0_upstream_slavearbiterlockenable;
  wire             DE4_SOPC_burst_0_upstream_slavearbiterlockenable2;
  wire             DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst;
  wire    [ 10: 0] DE4_SOPC_burst_0_upstream_transaction_burst_count;
  wire             DE4_SOPC_burst_0_upstream_unreg_firsttransfer;
  wire             DE4_SOPC_burst_0_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_0_upstream_waits_for_read;
  wire             DE4_SOPC_burst_0_upstream_waits_for_write;
  wire             DE4_SOPC_burst_0_upstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_0_upstream_writedata;
  reg              d1_DE4_SOPC_burst_0_upstream_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             p0_DE4_SOPC_burst_0_upstream_load_fifo;
  wire             pcie_compiler_0_Rx_Interface_arbiterlock;
  wire             pcie_compiler_0_Rx_Interface_arbiterlock2;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream_segment_0;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream_segment_1;
  wire             pcie_compiler_0_Rx_Interface_continuerequest;
  wire             pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_rdv_fifo_output_from_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register;
  wire             pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_0_upstream;
  wire             wait_for_DE4_SOPC_burst_0_upstream_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~DE4_SOPC_burst_0_upstream_end_xfer;
    end


  assign DE4_SOPC_burst_0_upstream_begins_xfer = ~d1_reasons_to_wait & ((pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream));
  //assign DE4_SOPC_burst_0_upstream_readdata_from_sa = DE4_SOPC_burst_0_upstream_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_readdata_from_sa = DE4_SOPC_burst_0_upstream_readdata;

  assign pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream = ({pcie_compiler_0_Rx_Interface_address_to_slave[31 : 29] , 29'b0} == 32'h0) & (pcie_compiler_0_Rx_Interface_read | pcie_compiler_0_Rx_Interface_write);
  //assign DE4_SOPC_burst_0_upstream_waitrequest_from_sa = DE4_SOPC_burst_0_upstream_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_waitrequest_from_sa = DE4_SOPC_burst_0_upstream_waitrequest;

  //assign DE4_SOPC_burst_0_upstream_readdatavalid_from_sa = DE4_SOPC_burst_0_upstream_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_readdatavalid_from_sa = DE4_SOPC_burst_0_upstream_readdatavalid;

  //DE4_SOPC_burst_0_upstream_arb_share_counter set values, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_arb_share_set_values = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream)? (((pcie_compiler_0_Rx_Interface_write) ? pcie_compiler_0_Rx_Interface_burstcount<< 1 : 1)) :
    1;

  //DE4_SOPC_burst_0_upstream_non_bursting_master_requests mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_non_bursting_master_requests = 0;

  //DE4_SOPC_burst_0_upstream_any_bursting_master_saved_grant mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_any_bursting_master_saved_grant = pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_0_upstream;

  //DE4_SOPC_burst_0_upstream_arb_share_counter_next_value assignment, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_arb_share_counter_next_value = DE4_SOPC_burst_0_upstream_firsttransfer ? (DE4_SOPC_burst_0_upstream_arb_share_set_values - 1) : |DE4_SOPC_burst_0_upstream_arb_share_counter ? (DE4_SOPC_burst_0_upstream_arb_share_counter - 1) : 0;

  //DE4_SOPC_burst_0_upstream_allgrants all slave grants, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_allgrants = |DE4_SOPC_burst_0_upstream_grant_vector;

  //DE4_SOPC_burst_0_upstream_end_xfer assignment, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_end_xfer = ~(DE4_SOPC_burst_0_upstream_waits_for_read | DE4_SOPC_burst_0_upstream_waits_for_write);

  //end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream = DE4_SOPC_burst_0_upstream_end_xfer & (~DE4_SOPC_burst_0_upstream_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //DE4_SOPC_burst_0_upstream_arb_share_counter arbitration counter enable, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_arb_counter_enable = (end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream & DE4_SOPC_burst_0_upstream_allgrants) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream & ~DE4_SOPC_burst_0_upstream_non_bursting_master_requests);

  //DE4_SOPC_burst_0_upstream_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_upstream_arb_share_counter <= 0;
      else if (DE4_SOPC_burst_0_upstream_arb_counter_enable)
          DE4_SOPC_burst_0_upstream_arb_share_counter <= DE4_SOPC_burst_0_upstream_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_0_upstream_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_upstream_slavearbiterlockenable <= 0;
      else if ((|DE4_SOPC_burst_0_upstream_master_qreq_vector & end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_0_upstream & ~DE4_SOPC_burst_0_upstream_non_bursting_master_requests))
          DE4_SOPC_burst_0_upstream_slavearbiterlockenable <= |DE4_SOPC_burst_0_upstream_arb_share_counter_next_value;
    end


  //pcie_compiler_0/Rx_Interface DE4_SOPC_burst_0/upstream arbiterlock, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_arbiterlock = DE4_SOPC_burst_0_upstream_slavearbiterlockenable & pcie_compiler_0_Rx_Interface_continuerequest;

  //DE4_SOPC_burst_0_upstream_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_slavearbiterlockenable2 = |DE4_SOPC_burst_0_upstream_arb_share_counter_next_value;

  //pcie_compiler_0/Rx_Interface DE4_SOPC_burst_0/upstream arbiterlock2, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_arbiterlock2 = DE4_SOPC_burst_0_upstream_slavearbiterlockenable2 & pcie_compiler_0_Rx_Interface_continuerequest;

  //DE4_SOPC_burst_0_upstream_any_continuerequest at least one master continues requesting, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_any_continuerequest = 1;

  //pcie_compiler_0_Rx_Interface_continuerequest continued request, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_continuerequest = 1;

  assign pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream = pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream & ~((pcie_compiler_0_Rx_Interface_read & ((pcie_compiler_0_Rx_Interface_latency_counter != 0) | (1 < pcie_compiler_0_Rx_Interface_latency_counter) | (|pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register) | (|pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register))));
  //unique name for DE4_SOPC_burst_0_upstream_move_on_to_next_transaction, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_move_on_to_next_transaction = DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_0_upstream_load_fifo;

  //the currently selected burstcount for DE4_SOPC_burst_0_upstream, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_selected_burstcount = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream)? pcie_compiler_0_Rx_Interface_burstcount :
    1;

  //burstcount_fifo_for_DE4_SOPC_burst_0_upstream, which is an e_fifo_with_registered_outputs
  burstcount_fifo_for_DE4_SOPC_burst_0_upstream_module burstcount_fifo_for_DE4_SOPC_burst_0_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_0_upstream_selected_burstcount),
      .data_out             (DE4_SOPC_burst_0_upstream_transaction_burst_count),
      .empty                (DE4_SOPC_burst_0_upstream_burstcount_fifo_empty),
      .fifo_contains_ones_n (),
      .full                 (),
      .read                 (DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read & DE4_SOPC_burst_0_upstream_load_fifo & ~(DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_0_upstream_burstcount_fifo_empty))
    );

  //DE4_SOPC_burst_0_upstream current burst minus one, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_current_burst_minus_one = DE4_SOPC_burst_0_upstream_current_burst - 1;

  //what to load in current_burst, for DE4_SOPC_burst_0_upstream, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_next_burst_count = (((in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read) & ~DE4_SOPC_burst_0_upstream_load_fifo))? {DE4_SOPC_burst_0_upstream_selected_burstcount, 1'b0} :
    ((in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read & DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_0_upstream_burstcount_fifo_empty))? {DE4_SOPC_burst_0_upstream_selected_burstcount, 1'b0} :
    (DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst)? {DE4_SOPC_burst_0_upstream_transaction_burst_count,  1'b0} :
    DE4_SOPC_burst_0_upstream_current_burst_minus_one;

  //the current burst count for DE4_SOPC_burst_0_upstream, to be decremented, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_upstream_current_burst <= 0;
      else if (DE4_SOPC_burst_0_upstream_readdatavalid_from_sa | (~DE4_SOPC_burst_0_upstream_load_fifo & (in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read)))
          DE4_SOPC_burst_0_upstream_current_burst <= DE4_SOPC_burst_0_upstream_next_burst_count;
    end


  //a 1 or burstcount fifo empty, to initialize the counter, which is an e_mux
  assign p0_DE4_SOPC_burst_0_upstream_load_fifo = (~DE4_SOPC_burst_0_upstream_load_fifo)? 1 :
    (((in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read) & DE4_SOPC_burst_0_upstream_load_fifo))? 1 :
    ~DE4_SOPC_burst_0_upstream_burstcount_fifo_empty;

  //whether to load directly to the counter or to the fifo, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_upstream_load_fifo <= 0;
      else if ((in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read) & ~DE4_SOPC_burst_0_upstream_load_fifo | DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst)
          DE4_SOPC_burst_0_upstream_load_fifo <= p0_DE4_SOPC_burst_0_upstream_load_fifo;
    end


  //the last cycle in the burst for DE4_SOPC_burst_0_upstream, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_this_cycle_is_the_last_burst = ~(|DE4_SOPC_burst_0_upstream_current_burst_minus_one) & DE4_SOPC_burst_0_upstream_readdatavalid_from_sa;

  //rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_0_upstream, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_0_upstream_module rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_0_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream),
      .data_out             (pcie_compiler_0_Rx_Interface_rdv_fifo_output_from_DE4_SOPC_burst_0_upstream),
      .empty                (),
      .fifo_contains_ones_n (pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_0_upstream),
      .full                 (),
      .read                 (DE4_SOPC_burst_0_upstream_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_0_upstream_waits_for_read)
    );

  assign pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register = ~pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_0_upstream;
  //local readdatavalid pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream = DE4_SOPC_burst_0_upstream_readdatavalid_from_sa;

  //DE4_SOPC_burst_0_upstream_writedata mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_writedata = pcie_compiler_0_Rx_Interface_dbs_write_32;

  //byteaddress mux for DE4_SOPC_burst_0/upstream, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_byteaddress = pcie_compiler_0_Rx_Interface_address_to_slave;

  //master is always granted when requested
  assign pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream = pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream;

  //pcie_compiler_0/Rx_Interface saved-grant DE4_SOPC_burst_0/upstream, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_0_upstream = pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream;

  //allow new arb cycle for DE4_SOPC_burst_0/upstream, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign DE4_SOPC_burst_0_upstream_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign DE4_SOPC_burst_0_upstream_master_qreq_vector = 1;

  //DE4_SOPC_burst_0_upstream_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_firsttransfer = DE4_SOPC_burst_0_upstream_begins_xfer ? DE4_SOPC_burst_0_upstream_unreg_firsttransfer : DE4_SOPC_burst_0_upstream_reg_firsttransfer;

  //DE4_SOPC_burst_0_upstream_unreg_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_unreg_firsttransfer = ~(DE4_SOPC_burst_0_upstream_slavearbiterlockenable & DE4_SOPC_burst_0_upstream_any_continuerequest);

  //DE4_SOPC_burst_0_upstream_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_upstream_reg_firsttransfer <= 1'b1;
      else if (DE4_SOPC_burst_0_upstream_begins_xfer)
          DE4_SOPC_burst_0_upstream_reg_firsttransfer <= DE4_SOPC_burst_0_upstream_unreg_firsttransfer;
    end


  //DE4_SOPC_burst_0_upstream_next_bbt_burstcount next_bbt_burstcount, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_next_bbt_burstcount = ((((DE4_SOPC_burst_0_upstream_write) && (DE4_SOPC_burst_0_upstream_bbt_burstcounter == 0))))? (DE4_SOPC_burst_0_upstream_burstcount - 1) :
    ((((DE4_SOPC_burst_0_upstream_read) && (DE4_SOPC_burst_0_upstream_bbt_burstcounter == 0))))? 0 :
    (DE4_SOPC_burst_0_upstream_bbt_burstcounter - 1);

  //DE4_SOPC_burst_0_upstream_bbt_burstcounter bbt_burstcounter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_upstream_bbt_burstcounter <= 0;
      else if (DE4_SOPC_burst_0_upstream_begins_xfer)
          DE4_SOPC_burst_0_upstream_bbt_burstcounter <= DE4_SOPC_burst_0_upstream_next_bbt_burstcount;
    end


  //DE4_SOPC_burst_0_upstream_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_beginbursttransfer_internal = DE4_SOPC_burst_0_upstream_begins_xfer & (DE4_SOPC_burst_0_upstream_bbt_burstcounter == 0);

  //DE4_SOPC_burst_0_upstream_read assignment, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_read = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream & pcie_compiler_0_Rx_Interface_read;

  //DE4_SOPC_burst_0_upstream_write assignment, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_write = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream & pcie_compiler_0_Rx_Interface_write;

  //DE4_SOPC_burst_0_upstream_address mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_address = {pcie_compiler_0_Rx_Interface_address_to_slave >> 3,
    pcie_compiler_0_Rx_Interface_dbs_address[2],
    {2 {1'b0}}};

  //d1_DE4_SOPC_burst_0_upstream_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_DE4_SOPC_burst_0_upstream_end_xfer <= 1;
      else 
        d1_DE4_SOPC_burst_0_upstream_end_xfer <= DE4_SOPC_burst_0_upstream_end_xfer;
    end


  //DE4_SOPC_burst_0_upstream_waits_for_read in a cycle, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_waits_for_read = DE4_SOPC_burst_0_upstream_in_a_read_cycle & DE4_SOPC_burst_0_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_0_upstream_in_a_read_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_in_a_read_cycle = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream & pcie_compiler_0_Rx_Interface_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = DE4_SOPC_burst_0_upstream_in_a_read_cycle;

  //DE4_SOPC_burst_0_upstream_waits_for_write in a cycle, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_waits_for_write = DE4_SOPC_burst_0_upstream_in_a_write_cycle & DE4_SOPC_burst_0_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_0_upstream_in_a_write_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_0_upstream_in_a_write_cycle = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream & pcie_compiler_0_Rx_Interface_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = DE4_SOPC_burst_0_upstream_in_a_write_cycle;

  assign wait_for_DE4_SOPC_burst_0_upstream_counter = 0;
  //DE4_SOPC_burst_0_upstream_byteenable byte enable port mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_byteenable = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream)? pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream :
    -1;

  assign {pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream_segment_1,
pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream_segment_0} = pcie_compiler_0_Rx_Interface_byteenable;
  assign pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream = ((pcie_compiler_0_Rx_Interface_dbs_address[2] == 0))? pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream_segment_0 :
    pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream_segment_1;

  //burstcount mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_burstcount = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream)? pcie_compiler_0_Rx_Interface_burstcount :
    1;

  //debugaccess mux, which is an e_mux
  assign DE4_SOPC_burst_0_upstream_debugaccess = 0;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_0/upstream enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //pcie_compiler_0/Rx_Interface non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream && (pcie_compiler_0_Rx_Interface_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: pcie_compiler_0/Rx_Interface drove 0 on its 'burstcount' port while accessing slave DE4_SOPC_burst_0/upstream", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_0_downstream_arbitrator (
                                                // inputs:
                                                 DE4_SOPC_burst_0_downstream_address,
                                                 DE4_SOPC_burst_0_downstream_burstcount,
                                                 DE4_SOPC_burst_0_downstream_byteenable,
                                                 DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave,
                                                 DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave,
                                                 DE4_SOPC_burst_0_downstream_read,
                                                 DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave,
                                                 DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register,
                                                 DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave,
                                                 DE4_SOPC_burst_0_downstream_write,
                                                 DE4_SOPC_burst_0_downstream_writedata,
                                                 clk,
                                                 d1_ethernet_port_interface_0_avalon_slave_end_xfer,
                                                 ethernet_port_interface_0_avalon_slave_readdata_from_sa,
                                                 ethernet_port_interface_0_avalon_slave_waitrequest_from_sa,
                                                 reset_n,

                                                // outputs:
                                                 DE4_SOPC_burst_0_downstream_address_to_slave,
                                                 DE4_SOPC_burst_0_downstream_latency_counter,
                                                 DE4_SOPC_burst_0_downstream_readdata,
                                                 DE4_SOPC_burst_0_downstream_readdatavalid,
                                                 DE4_SOPC_burst_0_downstream_reset_n,
                                                 DE4_SOPC_burst_0_downstream_waitrequest
                                              )
;

  output  [ 28: 0] DE4_SOPC_burst_0_downstream_address_to_slave;
  output           DE4_SOPC_burst_0_downstream_latency_counter;
  output  [ 31: 0] DE4_SOPC_burst_0_downstream_readdata;
  output           DE4_SOPC_burst_0_downstream_readdatavalid;
  output           DE4_SOPC_burst_0_downstream_reset_n;
  output           DE4_SOPC_burst_0_downstream_waitrequest;
  input   [ 28: 0] DE4_SOPC_burst_0_downstream_address;
  input            DE4_SOPC_burst_0_downstream_burstcount;
  input   [  3: 0] DE4_SOPC_burst_0_downstream_byteenable;
  input            DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave;
  input            DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave;
  input            DE4_SOPC_burst_0_downstream_read;
  input            DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave;
  input            DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register;
  input            DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave;
  input            DE4_SOPC_burst_0_downstream_write;
  input   [ 31: 0] DE4_SOPC_burst_0_downstream_writedata;
  input            clk;
  input            d1_ethernet_port_interface_0_avalon_slave_end_xfer;
  input   [ 31: 0] ethernet_port_interface_0_avalon_slave_readdata_from_sa;
  input            ethernet_port_interface_0_avalon_slave_waitrequest_from_sa;
  input            reset_n;

  reg     [ 28: 0] DE4_SOPC_burst_0_downstream_address_last_time;
  wire    [ 28: 0] DE4_SOPC_burst_0_downstream_address_to_slave;
  reg              DE4_SOPC_burst_0_downstream_burstcount_last_time;
  reg     [  3: 0] DE4_SOPC_burst_0_downstream_byteenable_last_time;
  wire             DE4_SOPC_burst_0_downstream_latency_counter;
  reg              DE4_SOPC_burst_0_downstream_read_last_time;
  wire    [ 31: 0] DE4_SOPC_burst_0_downstream_readdata;
  wire             DE4_SOPC_burst_0_downstream_readdatavalid;
  wire             DE4_SOPC_burst_0_downstream_reset_n;
  wire             DE4_SOPC_burst_0_downstream_run;
  wire             DE4_SOPC_burst_0_downstream_waitrequest;
  reg              DE4_SOPC_burst_0_downstream_write_last_time;
  reg     [ 31: 0] DE4_SOPC_burst_0_downstream_writedata_last_time;
  reg              active_and_waiting_last_time;
  wire             pre_flush_DE4_SOPC_burst_0_downstream_readdatavalid;
  wire             r_0;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave | ~DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave) & ((~DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave | ~(DE4_SOPC_burst_0_downstream_read | DE4_SOPC_burst_0_downstream_write) | (1 & ~ethernet_port_interface_0_avalon_slave_waitrequest_from_sa & (DE4_SOPC_burst_0_downstream_read | DE4_SOPC_burst_0_downstream_write)))) & ((~DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave | ~(DE4_SOPC_burst_0_downstream_read | DE4_SOPC_burst_0_downstream_write) | (1 & ~ethernet_port_interface_0_avalon_slave_waitrequest_from_sa & (DE4_SOPC_burst_0_downstream_read | DE4_SOPC_burst_0_downstream_write))));

  //cascaded wait assignment, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_run = r_0;

  //optimize select-logic by passing only those address bits which matter.
  assign DE4_SOPC_burst_0_downstream_address_to_slave = DE4_SOPC_burst_0_downstream_address;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_DE4_SOPC_burst_0_downstream_readdatavalid = DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign DE4_SOPC_burst_0_downstream_readdatavalid = 0 |
    pre_flush_DE4_SOPC_burst_0_downstream_readdatavalid;

  //DE4_SOPC_burst_0/downstream readdata mux, which is an e_mux
  assign DE4_SOPC_burst_0_downstream_readdata = ethernet_port_interface_0_avalon_slave_readdata_from_sa;

  //actual waitrequest port, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_waitrequest = ~DE4_SOPC_burst_0_downstream_run;

  //latent max counter, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_latency_counter = 0;

  //DE4_SOPC_burst_0_downstream_reset_n assignment, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_reset_n = reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_0_downstream_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_downstream_address_last_time <= 0;
      else 
        DE4_SOPC_burst_0_downstream_address_last_time <= DE4_SOPC_burst_0_downstream_address;
    end


  //DE4_SOPC_burst_0/downstream waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= DE4_SOPC_burst_0_downstream_waitrequest & (DE4_SOPC_burst_0_downstream_read | DE4_SOPC_burst_0_downstream_write);
    end


  //DE4_SOPC_burst_0_downstream_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_0_downstream_address != DE4_SOPC_burst_0_downstream_address_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_0_downstream_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_0_downstream_burstcount check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_downstream_burstcount_last_time <= 0;
      else 
        DE4_SOPC_burst_0_downstream_burstcount_last_time <= DE4_SOPC_burst_0_downstream_burstcount;
    end


  //DE4_SOPC_burst_0_downstream_burstcount matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_0_downstream_burstcount != DE4_SOPC_burst_0_downstream_burstcount_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_0_downstream_burstcount did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_0_downstream_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_downstream_byteenable_last_time <= 0;
      else 
        DE4_SOPC_burst_0_downstream_byteenable_last_time <= DE4_SOPC_burst_0_downstream_byteenable;
    end


  //DE4_SOPC_burst_0_downstream_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_0_downstream_byteenable != DE4_SOPC_burst_0_downstream_byteenable_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_0_downstream_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_0_downstream_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_downstream_read_last_time <= 0;
      else 
        DE4_SOPC_burst_0_downstream_read_last_time <= DE4_SOPC_burst_0_downstream_read;
    end


  //DE4_SOPC_burst_0_downstream_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_0_downstream_read != DE4_SOPC_burst_0_downstream_read_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_0_downstream_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_0_downstream_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_downstream_write_last_time <= 0;
      else 
        DE4_SOPC_burst_0_downstream_write_last_time <= DE4_SOPC_burst_0_downstream_write;
    end


  //DE4_SOPC_burst_0_downstream_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_0_downstream_write != DE4_SOPC_burst_0_downstream_write_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_0_downstream_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_0_downstream_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_0_downstream_writedata_last_time <= 0;
      else 
        DE4_SOPC_burst_0_downstream_writedata_last_time <= DE4_SOPC_burst_0_downstream_writedata;
    end


  //DE4_SOPC_burst_0_downstream_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_0_downstream_writedata != DE4_SOPC_burst_0_downstream_writedata_last_time) & DE4_SOPC_burst_0_downstream_write)
        begin
          $write("%0d ns: DE4_SOPC_burst_0_downstream_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module burstcount_fifo_for_DE4_SOPC_burst_1_upstream_module (
                                                              // inputs:
                                                               clear_fifo,
                                                               clk,
                                                               data_in,
                                                               read,
                                                               reset_n,
                                                               sync_reset,
                                                               write,

                                                              // outputs:
                                                               data_out,
                                                               empty,
                                                               fifo_contains_ones_n,
                                                               full
                                                            )
;

  output  [ 10: 0] data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input   [ 10: 0] data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire    [ 10: 0] data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_2;
  wire             full_3;
  reg     [  2: 0] how_many_ones;
  wire    [  2: 0] one_count_minus_one;
  wire    [  2: 0] one_count_plus_one;
  wire             p0_full_0;
  wire    [ 10: 0] p0_stage_0;
  wire             p1_full_1;
  wire    [ 10: 0] p1_stage_1;
  wire             p2_full_2;
  wire    [ 10: 0] p2_stage_2;
  reg     [ 10: 0] stage_0;
  reg     [ 10: 0] stage_1;
  reg     [ 10: 0] stage_2;
  wire    [  2: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_2;
  assign empty = !full_0;
  assign full_3 = 0;
  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    0;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_1_upstream_module (
                                                                                       // inputs:
                                                                                        clear_fifo,
                                                                                        clk,
                                                                                        data_in,
                                                                                        read,
                                                                                        reset_n,
                                                                                        sync_reset,
                                                                                        write,

                                                                                       // outputs:
                                                                                        data_out,
                                                                                        empty,
                                                                                        fifo_contains_ones_n,
                                                                                        full
                                                                                     )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_2;
  wire             full_3;
  reg     [  2: 0] how_many_ones;
  wire    [  2: 0] one_count_minus_one;
  wire    [  2: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p1_full_1;
  wire             p1_stage_1;
  wire             p2_full_2;
  wire             p2_stage_2;
  reg              stage_0;
  reg              stage_1;
  reg              stage_2;
  wire    [  2: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_2;
  assign empty = !full_0;
  assign full_3 = 0;
  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    0;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_1_upstream_arbitrator (
                                              // inputs:
                                               DE4_SOPC_burst_1_upstream_readdata,
                                               DE4_SOPC_burst_1_upstream_readdatavalid,
                                               DE4_SOPC_burst_1_upstream_waitrequest,
                                               clk,
                                               pcie_compiler_0_Rx_Interface_address_to_slave,
                                               pcie_compiler_0_Rx_Interface_burstcount,
                                               pcie_compiler_0_Rx_Interface_byteenable,
                                               pcie_compiler_0_Rx_Interface_dbs_address,
                                               pcie_compiler_0_Rx_Interface_dbs_write_32,
                                               pcie_compiler_0_Rx_Interface_latency_counter,
                                               pcie_compiler_0_Rx_Interface_read,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_write,
                                               reset_n,

                                              // outputs:
                                               DE4_SOPC_burst_1_upstream_address,
                                               DE4_SOPC_burst_1_upstream_burstcount,
                                               DE4_SOPC_burst_1_upstream_byteaddress,
                                               DE4_SOPC_burst_1_upstream_byteenable,
                                               DE4_SOPC_burst_1_upstream_debugaccess,
                                               DE4_SOPC_burst_1_upstream_read,
                                               DE4_SOPC_burst_1_upstream_readdata_from_sa,
                                               DE4_SOPC_burst_1_upstream_waitrequest_from_sa,
                                               DE4_SOPC_burst_1_upstream_write,
                                               DE4_SOPC_burst_1_upstream_writedata,
                                               d1_DE4_SOPC_burst_1_upstream_end_xfer,
                                               pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream,
                                               pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream,
                                               pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream
                                            )
;

  output  [ 28: 0] DE4_SOPC_burst_1_upstream_address;
  output  [  9: 0] DE4_SOPC_burst_1_upstream_burstcount;
  output  [ 30: 0] DE4_SOPC_burst_1_upstream_byteaddress;
  output  [  3: 0] DE4_SOPC_burst_1_upstream_byteenable;
  output           DE4_SOPC_burst_1_upstream_debugaccess;
  output           DE4_SOPC_burst_1_upstream_read;
  output  [ 31: 0] DE4_SOPC_burst_1_upstream_readdata_from_sa;
  output           DE4_SOPC_burst_1_upstream_waitrequest_from_sa;
  output           DE4_SOPC_burst_1_upstream_write;
  output  [ 31: 0] DE4_SOPC_burst_1_upstream_writedata;
  output           d1_DE4_SOPC_burst_1_upstream_end_xfer;
  output  [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream;
  output           pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream;
  output           pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream;
  output           pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream;
  output           pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register;
  output           pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream;
  input   [ 31: 0] DE4_SOPC_burst_1_upstream_readdata;
  input            DE4_SOPC_burst_1_upstream_readdatavalid;
  input            DE4_SOPC_burst_1_upstream_waitrequest;
  input            clk;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_address_to_slave;
  input   [  9: 0] pcie_compiler_0_Rx_Interface_burstcount;
  input   [  7: 0] pcie_compiler_0_Rx_Interface_byteenable;
  input   [  2: 0] pcie_compiler_0_Rx_Interface_dbs_address;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_dbs_write_32;
  input            pcie_compiler_0_Rx_Interface_latency_counter;
  input            pcie_compiler_0_Rx_Interface_read;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_write;
  input            reset_n;

  wire    [ 28: 0] DE4_SOPC_burst_1_upstream_address;
  wire             DE4_SOPC_burst_1_upstream_allgrants;
  wire             DE4_SOPC_burst_1_upstream_allow_new_arb_cycle;
  wire             DE4_SOPC_burst_1_upstream_any_bursting_master_saved_grant;
  wire             DE4_SOPC_burst_1_upstream_any_continuerequest;
  wire             DE4_SOPC_burst_1_upstream_arb_counter_enable;
  reg     [ 11: 0] DE4_SOPC_burst_1_upstream_arb_share_counter;
  wire    [ 11: 0] DE4_SOPC_burst_1_upstream_arb_share_counter_next_value;
  wire    [ 11: 0] DE4_SOPC_burst_1_upstream_arb_share_set_values;
  reg     [  8: 0] DE4_SOPC_burst_1_upstream_bbt_burstcounter;
  wire             DE4_SOPC_burst_1_upstream_beginbursttransfer_internal;
  wire             DE4_SOPC_burst_1_upstream_begins_xfer;
  wire    [  9: 0] DE4_SOPC_burst_1_upstream_burstcount;
  wire             DE4_SOPC_burst_1_upstream_burstcount_fifo_empty;
  wire    [ 30: 0] DE4_SOPC_burst_1_upstream_byteaddress;
  wire    [  3: 0] DE4_SOPC_burst_1_upstream_byteenable;
  reg     [ 10: 0] DE4_SOPC_burst_1_upstream_current_burst;
  wire    [ 10: 0] DE4_SOPC_burst_1_upstream_current_burst_minus_one;
  wire             DE4_SOPC_burst_1_upstream_debugaccess;
  wire             DE4_SOPC_burst_1_upstream_end_xfer;
  wire             DE4_SOPC_burst_1_upstream_firsttransfer;
  wire             DE4_SOPC_burst_1_upstream_grant_vector;
  wire             DE4_SOPC_burst_1_upstream_in_a_read_cycle;
  wire             DE4_SOPC_burst_1_upstream_in_a_write_cycle;
  reg              DE4_SOPC_burst_1_upstream_load_fifo;
  wire             DE4_SOPC_burst_1_upstream_master_qreq_vector;
  wire             DE4_SOPC_burst_1_upstream_move_on_to_next_transaction;
  wire    [  8: 0] DE4_SOPC_burst_1_upstream_next_bbt_burstcount;
  wire    [ 10: 0] DE4_SOPC_burst_1_upstream_next_burst_count;
  wire             DE4_SOPC_burst_1_upstream_non_bursting_master_requests;
  wire             DE4_SOPC_burst_1_upstream_read;
  wire    [ 31: 0] DE4_SOPC_burst_1_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_1_upstream_readdatavalid_from_sa;
  reg              DE4_SOPC_burst_1_upstream_reg_firsttransfer;
  wire    [ 10: 0] DE4_SOPC_burst_1_upstream_selected_burstcount;
  reg              DE4_SOPC_burst_1_upstream_slavearbiterlockenable;
  wire             DE4_SOPC_burst_1_upstream_slavearbiterlockenable2;
  wire             DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst;
  wire    [ 10: 0] DE4_SOPC_burst_1_upstream_transaction_burst_count;
  wire             DE4_SOPC_burst_1_upstream_unreg_firsttransfer;
  wire             DE4_SOPC_burst_1_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_1_upstream_waits_for_read;
  wire             DE4_SOPC_burst_1_upstream_waits_for_write;
  wire             DE4_SOPC_burst_1_upstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_1_upstream_writedata;
  reg              d1_DE4_SOPC_burst_1_upstream_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             p0_DE4_SOPC_burst_1_upstream_load_fifo;
  wire             pcie_compiler_0_Rx_Interface_arbiterlock;
  wire             pcie_compiler_0_Rx_Interface_arbiterlock2;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream_segment_0;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream_segment_1;
  wire             pcie_compiler_0_Rx_Interface_continuerequest;
  wire             pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_rdv_fifo_output_from_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register;
  wire             pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_1_upstream;
  wire             wait_for_DE4_SOPC_burst_1_upstream_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~DE4_SOPC_burst_1_upstream_end_xfer;
    end


  assign DE4_SOPC_burst_1_upstream_begins_xfer = ~d1_reasons_to_wait & ((pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream));
  //assign DE4_SOPC_burst_1_upstream_readdatavalid_from_sa = DE4_SOPC_burst_1_upstream_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_readdatavalid_from_sa = DE4_SOPC_burst_1_upstream_readdatavalid;

  //assign DE4_SOPC_burst_1_upstream_readdata_from_sa = DE4_SOPC_burst_1_upstream_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_readdata_from_sa = DE4_SOPC_burst_1_upstream_readdata;

  assign pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream = ({pcie_compiler_0_Rx_Interface_address_to_slave[31 : 29] , 29'b0} == 32'h20000000) & (pcie_compiler_0_Rx_Interface_read | pcie_compiler_0_Rx_Interface_write);
  //assign DE4_SOPC_burst_1_upstream_waitrequest_from_sa = DE4_SOPC_burst_1_upstream_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_waitrequest_from_sa = DE4_SOPC_burst_1_upstream_waitrequest;

  //DE4_SOPC_burst_1_upstream_arb_share_counter set values, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_arb_share_set_values = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream)? (((pcie_compiler_0_Rx_Interface_write) ? pcie_compiler_0_Rx_Interface_burstcount<< 1 : 1)) :
    1;

  //DE4_SOPC_burst_1_upstream_non_bursting_master_requests mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_non_bursting_master_requests = 0;

  //DE4_SOPC_burst_1_upstream_any_bursting_master_saved_grant mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_any_bursting_master_saved_grant = pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_1_upstream;

  //DE4_SOPC_burst_1_upstream_arb_share_counter_next_value assignment, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_arb_share_counter_next_value = DE4_SOPC_burst_1_upstream_firsttransfer ? (DE4_SOPC_burst_1_upstream_arb_share_set_values - 1) : |DE4_SOPC_burst_1_upstream_arb_share_counter ? (DE4_SOPC_burst_1_upstream_arb_share_counter - 1) : 0;

  //DE4_SOPC_burst_1_upstream_allgrants all slave grants, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_allgrants = |DE4_SOPC_burst_1_upstream_grant_vector;

  //DE4_SOPC_burst_1_upstream_end_xfer assignment, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_end_xfer = ~(DE4_SOPC_burst_1_upstream_waits_for_read | DE4_SOPC_burst_1_upstream_waits_for_write);

  //end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream = DE4_SOPC_burst_1_upstream_end_xfer & (~DE4_SOPC_burst_1_upstream_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //DE4_SOPC_burst_1_upstream_arb_share_counter arbitration counter enable, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_arb_counter_enable = (end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream & DE4_SOPC_burst_1_upstream_allgrants) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream & ~DE4_SOPC_burst_1_upstream_non_bursting_master_requests);

  //DE4_SOPC_burst_1_upstream_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_upstream_arb_share_counter <= 0;
      else if (DE4_SOPC_burst_1_upstream_arb_counter_enable)
          DE4_SOPC_burst_1_upstream_arb_share_counter <= DE4_SOPC_burst_1_upstream_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_1_upstream_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_upstream_slavearbiterlockenable <= 0;
      else if ((|DE4_SOPC_burst_1_upstream_master_qreq_vector & end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_1_upstream & ~DE4_SOPC_burst_1_upstream_non_bursting_master_requests))
          DE4_SOPC_burst_1_upstream_slavearbiterlockenable <= |DE4_SOPC_burst_1_upstream_arb_share_counter_next_value;
    end


  //pcie_compiler_0/Rx_Interface DE4_SOPC_burst_1/upstream arbiterlock, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_arbiterlock = DE4_SOPC_burst_1_upstream_slavearbiterlockenable & pcie_compiler_0_Rx_Interface_continuerequest;

  //DE4_SOPC_burst_1_upstream_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_slavearbiterlockenable2 = |DE4_SOPC_burst_1_upstream_arb_share_counter_next_value;

  //pcie_compiler_0/Rx_Interface DE4_SOPC_burst_1/upstream arbiterlock2, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_arbiterlock2 = DE4_SOPC_burst_1_upstream_slavearbiterlockenable2 & pcie_compiler_0_Rx_Interface_continuerequest;

  //DE4_SOPC_burst_1_upstream_any_continuerequest at least one master continues requesting, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_any_continuerequest = 1;

  //pcie_compiler_0_Rx_Interface_continuerequest continued request, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_continuerequest = 1;

  assign pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream = pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream & ~((pcie_compiler_0_Rx_Interface_read & ((pcie_compiler_0_Rx_Interface_latency_counter != 0) | (1 < pcie_compiler_0_Rx_Interface_latency_counter) | (|pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register) | (|pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register))));
  //unique name for DE4_SOPC_burst_1_upstream_move_on_to_next_transaction, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_move_on_to_next_transaction = DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_1_upstream_load_fifo;

  //the currently selected burstcount for DE4_SOPC_burst_1_upstream, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_selected_burstcount = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream)? pcie_compiler_0_Rx_Interface_burstcount :
    1;

  //burstcount_fifo_for_DE4_SOPC_burst_1_upstream, which is an e_fifo_with_registered_outputs
  burstcount_fifo_for_DE4_SOPC_burst_1_upstream_module burstcount_fifo_for_DE4_SOPC_burst_1_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_1_upstream_selected_burstcount),
      .data_out             (DE4_SOPC_burst_1_upstream_transaction_burst_count),
      .empty                (DE4_SOPC_burst_1_upstream_burstcount_fifo_empty),
      .fifo_contains_ones_n (),
      .full                 (),
      .read                 (DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read & DE4_SOPC_burst_1_upstream_load_fifo & ~(DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_1_upstream_burstcount_fifo_empty))
    );

  //DE4_SOPC_burst_1_upstream current burst minus one, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_current_burst_minus_one = DE4_SOPC_burst_1_upstream_current_burst - 1;

  //what to load in current_burst, for DE4_SOPC_burst_1_upstream, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_next_burst_count = (((in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read) & ~DE4_SOPC_burst_1_upstream_load_fifo))? {DE4_SOPC_burst_1_upstream_selected_burstcount, 1'b0} :
    ((in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read & DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_1_upstream_burstcount_fifo_empty))? {DE4_SOPC_burst_1_upstream_selected_burstcount, 1'b0} :
    (DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst)? {DE4_SOPC_burst_1_upstream_transaction_burst_count,  1'b0} :
    DE4_SOPC_burst_1_upstream_current_burst_minus_one;

  //the current burst count for DE4_SOPC_burst_1_upstream, to be decremented, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_upstream_current_burst <= 0;
      else if (DE4_SOPC_burst_1_upstream_readdatavalid_from_sa | (~DE4_SOPC_burst_1_upstream_load_fifo & (in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read)))
          DE4_SOPC_burst_1_upstream_current_burst <= DE4_SOPC_burst_1_upstream_next_burst_count;
    end


  //a 1 or burstcount fifo empty, to initialize the counter, which is an e_mux
  assign p0_DE4_SOPC_burst_1_upstream_load_fifo = (~DE4_SOPC_burst_1_upstream_load_fifo)? 1 :
    (((in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read) & DE4_SOPC_burst_1_upstream_load_fifo))? 1 :
    ~DE4_SOPC_burst_1_upstream_burstcount_fifo_empty;

  //whether to load directly to the counter or to the fifo, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_upstream_load_fifo <= 0;
      else if ((in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read) & ~DE4_SOPC_burst_1_upstream_load_fifo | DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst)
          DE4_SOPC_burst_1_upstream_load_fifo <= p0_DE4_SOPC_burst_1_upstream_load_fifo;
    end


  //the last cycle in the burst for DE4_SOPC_burst_1_upstream, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_this_cycle_is_the_last_burst = ~(|DE4_SOPC_burst_1_upstream_current_burst_minus_one) & DE4_SOPC_burst_1_upstream_readdatavalid_from_sa;

  //rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_1_upstream, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_1_upstream_module rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_1_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream),
      .data_out             (pcie_compiler_0_Rx_Interface_rdv_fifo_output_from_DE4_SOPC_burst_1_upstream),
      .empty                (),
      .fifo_contains_ones_n (pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_1_upstream),
      .full                 (),
      .read                 (DE4_SOPC_burst_1_upstream_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_1_upstream_waits_for_read)
    );

  assign pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register = ~pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_1_upstream;
  //local readdatavalid pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream = DE4_SOPC_burst_1_upstream_readdatavalid_from_sa;

  //DE4_SOPC_burst_1_upstream_writedata mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_writedata = pcie_compiler_0_Rx_Interface_dbs_write_32;

  //byteaddress mux for DE4_SOPC_burst_1/upstream, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_byteaddress = pcie_compiler_0_Rx_Interface_address_to_slave;

  //master is always granted when requested
  assign pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream = pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream;

  //pcie_compiler_0/Rx_Interface saved-grant DE4_SOPC_burst_1/upstream, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_1_upstream = pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream;

  //allow new arb cycle for DE4_SOPC_burst_1/upstream, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign DE4_SOPC_burst_1_upstream_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign DE4_SOPC_burst_1_upstream_master_qreq_vector = 1;

  //DE4_SOPC_burst_1_upstream_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_firsttransfer = DE4_SOPC_burst_1_upstream_begins_xfer ? DE4_SOPC_burst_1_upstream_unreg_firsttransfer : DE4_SOPC_burst_1_upstream_reg_firsttransfer;

  //DE4_SOPC_burst_1_upstream_unreg_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_unreg_firsttransfer = ~(DE4_SOPC_burst_1_upstream_slavearbiterlockenable & DE4_SOPC_burst_1_upstream_any_continuerequest);

  //DE4_SOPC_burst_1_upstream_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_upstream_reg_firsttransfer <= 1'b1;
      else if (DE4_SOPC_burst_1_upstream_begins_xfer)
          DE4_SOPC_burst_1_upstream_reg_firsttransfer <= DE4_SOPC_burst_1_upstream_unreg_firsttransfer;
    end


  //DE4_SOPC_burst_1_upstream_next_bbt_burstcount next_bbt_burstcount, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_next_bbt_burstcount = ((((DE4_SOPC_burst_1_upstream_write) && (DE4_SOPC_burst_1_upstream_bbt_burstcounter == 0))))? (DE4_SOPC_burst_1_upstream_burstcount - 1) :
    ((((DE4_SOPC_burst_1_upstream_read) && (DE4_SOPC_burst_1_upstream_bbt_burstcounter == 0))))? 0 :
    (DE4_SOPC_burst_1_upstream_bbt_burstcounter - 1);

  //DE4_SOPC_burst_1_upstream_bbt_burstcounter bbt_burstcounter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_upstream_bbt_burstcounter <= 0;
      else if (DE4_SOPC_burst_1_upstream_begins_xfer)
          DE4_SOPC_burst_1_upstream_bbt_burstcounter <= DE4_SOPC_burst_1_upstream_next_bbt_burstcount;
    end


  //DE4_SOPC_burst_1_upstream_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_beginbursttransfer_internal = DE4_SOPC_burst_1_upstream_begins_xfer & (DE4_SOPC_burst_1_upstream_bbt_burstcounter == 0);

  //DE4_SOPC_burst_1_upstream_read assignment, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_read = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream & pcie_compiler_0_Rx_Interface_read;

  //DE4_SOPC_burst_1_upstream_write assignment, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_write = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream & pcie_compiler_0_Rx_Interface_write;

  //DE4_SOPC_burst_1_upstream_address mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_address = {pcie_compiler_0_Rx_Interface_address_to_slave >> 3,
    pcie_compiler_0_Rx_Interface_dbs_address[2],
    {2 {1'b0}}};

  //d1_DE4_SOPC_burst_1_upstream_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_DE4_SOPC_burst_1_upstream_end_xfer <= 1;
      else 
        d1_DE4_SOPC_burst_1_upstream_end_xfer <= DE4_SOPC_burst_1_upstream_end_xfer;
    end


  //DE4_SOPC_burst_1_upstream_waits_for_read in a cycle, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_waits_for_read = DE4_SOPC_burst_1_upstream_in_a_read_cycle & DE4_SOPC_burst_1_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_1_upstream_in_a_read_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_in_a_read_cycle = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream & pcie_compiler_0_Rx_Interface_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = DE4_SOPC_burst_1_upstream_in_a_read_cycle;

  //DE4_SOPC_burst_1_upstream_waits_for_write in a cycle, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_waits_for_write = DE4_SOPC_burst_1_upstream_in_a_write_cycle & DE4_SOPC_burst_1_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_1_upstream_in_a_write_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_1_upstream_in_a_write_cycle = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream & pcie_compiler_0_Rx_Interface_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = DE4_SOPC_burst_1_upstream_in_a_write_cycle;

  assign wait_for_DE4_SOPC_burst_1_upstream_counter = 0;
  //DE4_SOPC_burst_1_upstream_byteenable byte enable port mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_byteenable = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream)? pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream :
    -1;

  assign {pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream_segment_1,
pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream_segment_0} = pcie_compiler_0_Rx_Interface_byteenable;
  assign pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream = ((pcie_compiler_0_Rx_Interface_dbs_address[2] == 0))? pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream_segment_0 :
    pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream_segment_1;

  //burstcount mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_burstcount = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream)? pcie_compiler_0_Rx_Interface_burstcount :
    1;

  //debugaccess mux, which is an e_mux
  assign DE4_SOPC_burst_1_upstream_debugaccess = 0;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_1/upstream enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //pcie_compiler_0/Rx_Interface non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream && (pcie_compiler_0_Rx_Interface_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: pcie_compiler_0/Rx_Interface drove 0 on its 'burstcount' port while accessing slave DE4_SOPC_burst_1/upstream", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_1_downstream_arbitrator (
                                                // inputs:
                                                 DE4_SOPC_burst_1_downstream_address,
                                                 DE4_SOPC_burst_1_downstream_burstcount,
                                                 DE4_SOPC_burst_1_downstream_byteenable,
                                                 DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1,
                                                 DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1,
                                                 DE4_SOPC_burst_1_downstream_read,
                                                 DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1,
                                                 DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register,
                                                 DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1,
                                                 DE4_SOPC_burst_1_downstream_write,
                                                 DE4_SOPC_burst_1_downstream_writedata,
                                                 clk,
                                                 d1_ethernet_port_interface_0_avalon_slave_1_end_xfer,
                                                 ethernet_port_interface_0_avalon_slave_1_readdata_from_sa,
                                                 ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa,
                                                 reset_n,

                                                // outputs:
                                                 DE4_SOPC_burst_1_downstream_address_to_slave,
                                                 DE4_SOPC_burst_1_downstream_latency_counter,
                                                 DE4_SOPC_burst_1_downstream_readdata,
                                                 DE4_SOPC_burst_1_downstream_readdatavalid,
                                                 DE4_SOPC_burst_1_downstream_reset_n,
                                                 DE4_SOPC_burst_1_downstream_waitrequest
                                              )
;

  output  [ 28: 0] DE4_SOPC_burst_1_downstream_address_to_slave;
  output           DE4_SOPC_burst_1_downstream_latency_counter;
  output  [ 31: 0] DE4_SOPC_burst_1_downstream_readdata;
  output           DE4_SOPC_burst_1_downstream_readdatavalid;
  output           DE4_SOPC_burst_1_downstream_reset_n;
  output           DE4_SOPC_burst_1_downstream_waitrequest;
  input   [ 28: 0] DE4_SOPC_burst_1_downstream_address;
  input            DE4_SOPC_burst_1_downstream_burstcount;
  input   [  3: 0] DE4_SOPC_burst_1_downstream_byteenable;
  input            DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1;
  input            DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1;
  input            DE4_SOPC_burst_1_downstream_read;
  input            DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1;
  input            DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register;
  input            DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1;
  input            DE4_SOPC_burst_1_downstream_write;
  input   [ 31: 0] DE4_SOPC_burst_1_downstream_writedata;
  input            clk;
  input            d1_ethernet_port_interface_0_avalon_slave_1_end_xfer;
  input   [ 31: 0] ethernet_port_interface_0_avalon_slave_1_readdata_from_sa;
  input            ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa;
  input            reset_n;

  reg     [ 28: 0] DE4_SOPC_burst_1_downstream_address_last_time;
  wire    [ 28: 0] DE4_SOPC_burst_1_downstream_address_to_slave;
  reg              DE4_SOPC_burst_1_downstream_burstcount_last_time;
  reg     [  3: 0] DE4_SOPC_burst_1_downstream_byteenable_last_time;
  wire             DE4_SOPC_burst_1_downstream_latency_counter;
  reg              DE4_SOPC_burst_1_downstream_read_last_time;
  wire    [ 31: 0] DE4_SOPC_burst_1_downstream_readdata;
  wire             DE4_SOPC_burst_1_downstream_readdatavalid;
  wire             DE4_SOPC_burst_1_downstream_reset_n;
  wire             DE4_SOPC_burst_1_downstream_run;
  wire             DE4_SOPC_burst_1_downstream_waitrequest;
  reg              DE4_SOPC_burst_1_downstream_write_last_time;
  reg     [ 31: 0] DE4_SOPC_burst_1_downstream_writedata_last_time;
  reg              active_and_waiting_last_time;
  wire             pre_flush_DE4_SOPC_burst_1_downstream_readdatavalid;
  wire             r_0;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1 | ~DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1) & ((~DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1 | ~(DE4_SOPC_burst_1_downstream_read | DE4_SOPC_burst_1_downstream_write) | (1 & ~ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa & (DE4_SOPC_burst_1_downstream_read | DE4_SOPC_burst_1_downstream_write)))) & ((~DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1 | ~(DE4_SOPC_burst_1_downstream_read | DE4_SOPC_burst_1_downstream_write) | (1 & ~ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa & (DE4_SOPC_burst_1_downstream_read | DE4_SOPC_burst_1_downstream_write))));

  //cascaded wait assignment, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_run = r_0;

  //optimize select-logic by passing only those address bits which matter.
  assign DE4_SOPC_burst_1_downstream_address_to_slave = DE4_SOPC_burst_1_downstream_address;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_DE4_SOPC_burst_1_downstream_readdatavalid = DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign DE4_SOPC_burst_1_downstream_readdatavalid = 0 |
    pre_flush_DE4_SOPC_burst_1_downstream_readdatavalid;

  //DE4_SOPC_burst_1/downstream readdata mux, which is an e_mux
  assign DE4_SOPC_burst_1_downstream_readdata = ethernet_port_interface_0_avalon_slave_1_readdata_from_sa;

  //actual waitrequest port, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_waitrequest = ~DE4_SOPC_burst_1_downstream_run;

  //latent max counter, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_latency_counter = 0;

  //DE4_SOPC_burst_1_downstream_reset_n assignment, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_reset_n = reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_1_downstream_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_downstream_address_last_time <= 0;
      else 
        DE4_SOPC_burst_1_downstream_address_last_time <= DE4_SOPC_burst_1_downstream_address;
    end


  //DE4_SOPC_burst_1/downstream waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= DE4_SOPC_burst_1_downstream_waitrequest & (DE4_SOPC_burst_1_downstream_read | DE4_SOPC_burst_1_downstream_write);
    end


  //DE4_SOPC_burst_1_downstream_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_1_downstream_address != DE4_SOPC_burst_1_downstream_address_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_1_downstream_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_1_downstream_burstcount check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_downstream_burstcount_last_time <= 0;
      else 
        DE4_SOPC_burst_1_downstream_burstcount_last_time <= DE4_SOPC_burst_1_downstream_burstcount;
    end


  //DE4_SOPC_burst_1_downstream_burstcount matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_1_downstream_burstcount != DE4_SOPC_burst_1_downstream_burstcount_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_1_downstream_burstcount did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_1_downstream_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_downstream_byteenable_last_time <= 0;
      else 
        DE4_SOPC_burst_1_downstream_byteenable_last_time <= DE4_SOPC_burst_1_downstream_byteenable;
    end


  //DE4_SOPC_burst_1_downstream_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_1_downstream_byteenable != DE4_SOPC_burst_1_downstream_byteenable_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_1_downstream_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_1_downstream_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_downstream_read_last_time <= 0;
      else 
        DE4_SOPC_burst_1_downstream_read_last_time <= DE4_SOPC_burst_1_downstream_read;
    end


  //DE4_SOPC_burst_1_downstream_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_1_downstream_read != DE4_SOPC_burst_1_downstream_read_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_1_downstream_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_1_downstream_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_downstream_write_last_time <= 0;
      else 
        DE4_SOPC_burst_1_downstream_write_last_time <= DE4_SOPC_burst_1_downstream_write;
    end


  //DE4_SOPC_burst_1_downstream_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_1_downstream_write != DE4_SOPC_burst_1_downstream_write_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_1_downstream_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_1_downstream_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_1_downstream_writedata_last_time <= 0;
      else 
        DE4_SOPC_burst_1_downstream_writedata_last_time <= DE4_SOPC_burst_1_downstream_writedata;
    end


  //DE4_SOPC_burst_1_downstream_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_1_downstream_writedata != DE4_SOPC_burst_1_downstream_writedata_last_time) & DE4_SOPC_burst_1_downstream_write)
        begin
          $write("%0d ns: DE4_SOPC_burst_1_downstream_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module burstcount_fifo_for_DE4_SOPC_burst_2_upstream_module (
                                                              // inputs:
                                                               clear_fifo,
                                                               clk,
                                                               data_in,
                                                               read,
                                                               reset_n,
                                                               sync_reset,
                                                               write,

                                                              // outputs:
                                                               data_out,
                                                               empty,
                                                               fifo_contains_ones_n,
                                                               full
                                                            )
;

  output  [  9: 0] data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input   [  9: 0] data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire    [  9: 0] data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_10;
  reg              full_11;
  reg              full_12;
  reg              full_13;
  reg              full_14;
  reg              full_15;
  reg              full_16;
  reg              full_17;
  reg              full_18;
  reg              full_19;
  reg              full_2;
  reg              full_20;
  reg              full_21;
  reg              full_22;
  reg              full_23;
  reg              full_24;
  reg              full_25;
  reg              full_26;
  reg              full_27;
  reg              full_28;
  reg              full_29;
  reg              full_3;
  reg              full_30;
  reg              full_31;
  reg              full_32;
  reg              full_33;
  wire             full_34;
  reg              full_4;
  reg              full_5;
  reg              full_6;
  reg              full_7;
  reg              full_8;
  reg              full_9;
  reg     [  6: 0] how_many_ones;
  wire    [  6: 0] one_count_minus_one;
  wire    [  6: 0] one_count_plus_one;
  wire             p0_full_0;
  wire    [  9: 0] p0_stage_0;
  wire             p10_full_10;
  wire    [  9: 0] p10_stage_10;
  wire             p11_full_11;
  wire    [  9: 0] p11_stage_11;
  wire             p12_full_12;
  wire    [  9: 0] p12_stage_12;
  wire             p13_full_13;
  wire    [  9: 0] p13_stage_13;
  wire             p14_full_14;
  wire    [  9: 0] p14_stage_14;
  wire             p15_full_15;
  wire    [  9: 0] p15_stage_15;
  wire             p16_full_16;
  wire    [  9: 0] p16_stage_16;
  wire             p17_full_17;
  wire    [  9: 0] p17_stage_17;
  wire             p18_full_18;
  wire    [  9: 0] p18_stage_18;
  wire             p19_full_19;
  wire    [  9: 0] p19_stage_19;
  wire             p1_full_1;
  wire    [  9: 0] p1_stage_1;
  wire             p20_full_20;
  wire    [  9: 0] p20_stage_20;
  wire             p21_full_21;
  wire    [  9: 0] p21_stage_21;
  wire             p22_full_22;
  wire    [  9: 0] p22_stage_22;
  wire             p23_full_23;
  wire    [  9: 0] p23_stage_23;
  wire             p24_full_24;
  wire    [  9: 0] p24_stage_24;
  wire             p25_full_25;
  wire    [  9: 0] p25_stage_25;
  wire             p26_full_26;
  wire    [  9: 0] p26_stage_26;
  wire             p27_full_27;
  wire    [  9: 0] p27_stage_27;
  wire             p28_full_28;
  wire    [  9: 0] p28_stage_28;
  wire             p29_full_29;
  wire    [  9: 0] p29_stage_29;
  wire             p2_full_2;
  wire    [  9: 0] p2_stage_2;
  wire             p30_full_30;
  wire    [  9: 0] p30_stage_30;
  wire             p31_full_31;
  wire    [  9: 0] p31_stage_31;
  wire             p32_full_32;
  wire    [  9: 0] p32_stage_32;
  wire             p33_full_33;
  wire    [  9: 0] p33_stage_33;
  wire             p3_full_3;
  wire    [  9: 0] p3_stage_3;
  wire             p4_full_4;
  wire    [  9: 0] p4_stage_4;
  wire             p5_full_5;
  wire    [  9: 0] p5_stage_5;
  wire             p6_full_6;
  wire    [  9: 0] p6_stage_6;
  wire             p7_full_7;
  wire    [  9: 0] p7_stage_7;
  wire             p8_full_8;
  wire    [  9: 0] p8_stage_8;
  wire             p9_full_9;
  wire    [  9: 0] p9_stage_9;
  reg     [  9: 0] stage_0;
  reg     [  9: 0] stage_1;
  reg     [  9: 0] stage_10;
  reg     [  9: 0] stage_11;
  reg     [  9: 0] stage_12;
  reg     [  9: 0] stage_13;
  reg     [  9: 0] stage_14;
  reg     [  9: 0] stage_15;
  reg     [  9: 0] stage_16;
  reg     [  9: 0] stage_17;
  reg     [  9: 0] stage_18;
  reg     [  9: 0] stage_19;
  reg     [  9: 0] stage_2;
  reg     [  9: 0] stage_20;
  reg     [  9: 0] stage_21;
  reg     [  9: 0] stage_22;
  reg     [  9: 0] stage_23;
  reg     [  9: 0] stage_24;
  reg     [  9: 0] stage_25;
  reg     [  9: 0] stage_26;
  reg     [  9: 0] stage_27;
  reg     [  9: 0] stage_28;
  reg     [  9: 0] stage_29;
  reg     [  9: 0] stage_3;
  reg     [  9: 0] stage_30;
  reg     [  9: 0] stage_31;
  reg     [  9: 0] stage_32;
  reg     [  9: 0] stage_33;
  reg     [  9: 0] stage_4;
  reg     [  9: 0] stage_5;
  reg     [  9: 0] stage_6;
  reg     [  9: 0] stage_7;
  reg     [  9: 0] stage_8;
  reg     [  9: 0] stage_9;
  wire    [  6: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_33;
  assign empty = !full_0;
  assign full_34 = 0;
  //data_33, which is an e_mux
  assign p33_stage_33 = ((full_34 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_33, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_33 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_33))
          if (sync_reset & full_33 & !((full_34 == 0) & read & write))
              stage_33 <= 0;
          else 
            stage_33 <= p33_stage_33;
    end


  //control_33, which is an e_mux
  assign p33_full_33 = ((read & !write) == 0)? full_32 :
    0;

  //control_reg_33, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_33 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_33 <= 0;
          else 
            full_33 <= p33_full_33;
    end


  //data_32, which is an e_mux
  assign p32_stage_32 = ((full_33 & ~clear_fifo) == 0)? data_in :
    stage_33;

  //data_reg_32, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_32 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_32))
          if (sync_reset & full_32 & !((full_33 == 0) & read & write))
              stage_32 <= 0;
          else 
            stage_32 <= p32_stage_32;
    end


  //control_32, which is an e_mux
  assign p32_full_32 = ((read & !write) == 0)? full_31 :
    full_33;

  //control_reg_32, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_32 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_32 <= 0;
          else 
            full_32 <= p32_full_32;
    end


  //data_31, which is an e_mux
  assign p31_stage_31 = ((full_32 & ~clear_fifo) == 0)? data_in :
    stage_32;

  //data_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_31 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_31))
          if (sync_reset & full_31 & !((full_32 == 0) & read & write))
              stage_31 <= 0;
          else 
            stage_31 <= p31_stage_31;
    end


  //control_31, which is an e_mux
  assign p31_full_31 = ((read & !write) == 0)? full_30 :
    full_32;

  //control_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_31 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_31 <= 0;
          else 
            full_31 <= p31_full_31;
    end


  //data_30, which is an e_mux
  assign p30_stage_30 = ((full_31 & ~clear_fifo) == 0)? data_in :
    stage_31;

  //data_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_30 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_30))
          if (sync_reset & full_30 & !((full_31 == 0) & read & write))
              stage_30 <= 0;
          else 
            stage_30 <= p30_stage_30;
    end


  //control_30, which is an e_mux
  assign p30_full_30 = ((read & !write) == 0)? full_29 :
    full_31;

  //control_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_30 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_30 <= 0;
          else 
            full_30 <= p30_full_30;
    end


  //data_29, which is an e_mux
  assign p29_stage_29 = ((full_30 & ~clear_fifo) == 0)? data_in :
    stage_30;

  //data_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_29 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_29))
          if (sync_reset & full_29 & !((full_30 == 0) & read & write))
              stage_29 <= 0;
          else 
            stage_29 <= p29_stage_29;
    end


  //control_29, which is an e_mux
  assign p29_full_29 = ((read & !write) == 0)? full_28 :
    full_30;

  //control_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_29 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_29 <= 0;
          else 
            full_29 <= p29_full_29;
    end


  //data_28, which is an e_mux
  assign p28_stage_28 = ((full_29 & ~clear_fifo) == 0)? data_in :
    stage_29;

  //data_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_28 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_28))
          if (sync_reset & full_28 & !((full_29 == 0) & read & write))
              stage_28 <= 0;
          else 
            stage_28 <= p28_stage_28;
    end


  //control_28, which is an e_mux
  assign p28_full_28 = ((read & !write) == 0)? full_27 :
    full_29;

  //control_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_28 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_28 <= 0;
          else 
            full_28 <= p28_full_28;
    end


  //data_27, which is an e_mux
  assign p27_stage_27 = ((full_28 & ~clear_fifo) == 0)? data_in :
    stage_28;

  //data_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_27 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_27))
          if (sync_reset & full_27 & !((full_28 == 0) & read & write))
              stage_27 <= 0;
          else 
            stage_27 <= p27_stage_27;
    end


  //control_27, which is an e_mux
  assign p27_full_27 = ((read & !write) == 0)? full_26 :
    full_28;

  //control_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_27 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_27 <= 0;
          else 
            full_27 <= p27_full_27;
    end


  //data_26, which is an e_mux
  assign p26_stage_26 = ((full_27 & ~clear_fifo) == 0)? data_in :
    stage_27;

  //data_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_26 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_26))
          if (sync_reset & full_26 & !((full_27 == 0) & read & write))
              stage_26 <= 0;
          else 
            stage_26 <= p26_stage_26;
    end


  //control_26, which is an e_mux
  assign p26_full_26 = ((read & !write) == 0)? full_25 :
    full_27;

  //control_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_26 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_26 <= 0;
          else 
            full_26 <= p26_full_26;
    end


  //data_25, which is an e_mux
  assign p25_stage_25 = ((full_26 & ~clear_fifo) == 0)? data_in :
    stage_26;

  //data_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_25 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_25))
          if (sync_reset & full_25 & !((full_26 == 0) & read & write))
              stage_25 <= 0;
          else 
            stage_25 <= p25_stage_25;
    end


  //control_25, which is an e_mux
  assign p25_full_25 = ((read & !write) == 0)? full_24 :
    full_26;

  //control_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_25 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_25 <= 0;
          else 
            full_25 <= p25_full_25;
    end


  //data_24, which is an e_mux
  assign p24_stage_24 = ((full_25 & ~clear_fifo) == 0)? data_in :
    stage_25;

  //data_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_24 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_24))
          if (sync_reset & full_24 & !((full_25 == 0) & read & write))
              stage_24 <= 0;
          else 
            stage_24 <= p24_stage_24;
    end


  //control_24, which is an e_mux
  assign p24_full_24 = ((read & !write) == 0)? full_23 :
    full_25;

  //control_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_24 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_24 <= 0;
          else 
            full_24 <= p24_full_24;
    end


  //data_23, which is an e_mux
  assign p23_stage_23 = ((full_24 & ~clear_fifo) == 0)? data_in :
    stage_24;

  //data_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_23 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_23))
          if (sync_reset & full_23 & !((full_24 == 0) & read & write))
              stage_23 <= 0;
          else 
            stage_23 <= p23_stage_23;
    end


  //control_23, which is an e_mux
  assign p23_full_23 = ((read & !write) == 0)? full_22 :
    full_24;

  //control_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_23 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_23 <= 0;
          else 
            full_23 <= p23_full_23;
    end


  //data_22, which is an e_mux
  assign p22_stage_22 = ((full_23 & ~clear_fifo) == 0)? data_in :
    stage_23;

  //data_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_22 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_22))
          if (sync_reset & full_22 & !((full_23 == 0) & read & write))
              stage_22 <= 0;
          else 
            stage_22 <= p22_stage_22;
    end


  //control_22, which is an e_mux
  assign p22_full_22 = ((read & !write) == 0)? full_21 :
    full_23;

  //control_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_22 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_22 <= 0;
          else 
            full_22 <= p22_full_22;
    end


  //data_21, which is an e_mux
  assign p21_stage_21 = ((full_22 & ~clear_fifo) == 0)? data_in :
    stage_22;

  //data_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_21 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_21))
          if (sync_reset & full_21 & !((full_22 == 0) & read & write))
              stage_21 <= 0;
          else 
            stage_21 <= p21_stage_21;
    end


  //control_21, which is an e_mux
  assign p21_full_21 = ((read & !write) == 0)? full_20 :
    full_22;

  //control_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_21 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_21 <= 0;
          else 
            full_21 <= p21_full_21;
    end


  //data_20, which is an e_mux
  assign p20_stage_20 = ((full_21 & ~clear_fifo) == 0)? data_in :
    stage_21;

  //data_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_20 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_20))
          if (sync_reset & full_20 & !((full_21 == 0) & read & write))
              stage_20 <= 0;
          else 
            stage_20 <= p20_stage_20;
    end


  //control_20, which is an e_mux
  assign p20_full_20 = ((read & !write) == 0)? full_19 :
    full_21;

  //control_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_20 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_20 <= 0;
          else 
            full_20 <= p20_full_20;
    end


  //data_19, which is an e_mux
  assign p19_stage_19 = ((full_20 & ~clear_fifo) == 0)? data_in :
    stage_20;

  //data_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_19 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_19))
          if (sync_reset & full_19 & !((full_20 == 0) & read & write))
              stage_19 <= 0;
          else 
            stage_19 <= p19_stage_19;
    end


  //control_19, which is an e_mux
  assign p19_full_19 = ((read & !write) == 0)? full_18 :
    full_20;

  //control_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_19 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_19 <= 0;
          else 
            full_19 <= p19_full_19;
    end


  //data_18, which is an e_mux
  assign p18_stage_18 = ((full_19 & ~clear_fifo) == 0)? data_in :
    stage_19;

  //data_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_18 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_18))
          if (sync_reset & full_18 & !((full_19 == 0) & read & write))
              stage_18 <= 0;
          else 
            stage_18 <= p18_stage_18;
    end


  //control_18, which is an e_mux
  assign p18_full_18 = ((read & !write) == 0)? full_17 :
    full_19;

  //control_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_18 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_18 <= 0;
          else 
            full_18 <= p18_full_18;
    end


  //data_17, which is an e_mux
  assign p17_stage_17 = ((full_18 & ~clear_fifo) == 0)? data_in :
    stage_18;

  //data_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_17 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_17))
          if (sync_reset & full_17 & !((full_18 == 0) & read & write))
              stage_17 <= 0;
          else 
            stage_17 <= p17_stage_17;
    end


  //control_17, which is an e_mux
  assign p17_full_17 = ((read & !write) == 0)? full_16 :
    full_18;

  //control_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_17 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_17 <= 0;
          else 
            full_17 <= p17_full_17;
    end


  //data_16, which is an e_mux
  assign p16_stage_16 = ((full_17 & ~clear_fifo) == 0)? data_in :
    stage_17;

  //data_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_16 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_16))
          if (sync_reset & full_16 & !((full_17 == 0) & read & write))
              stage_16 <= 0;
          else 
            stage_16 <= p16_stage_16;
    end


  //control_16, which is an e_mux
  assign p16_full_16 = ((read & !write) == 0)? full_15 :
    full_17;

  //control_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_16 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_16 <= 0;
          else 
            full_16 <= p16_full_16;
    end


  //data_15, which is an e_mux
  assign p15_stage_15 = ((full_16 & ~clear_fifo) == 0)? data_in :
    stage_16;

  //data_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_15 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_15))
          if (sync_reset & full_15 & !((full_16 == 0) & read & write))
              stage_15 <= 0;
          else 
            stage_15 <= p15_stage_15;
    end


  //control_15, which is an e_mux
  assign p15_full_15 = ((read & !write) == 0)? full_14 :
    full_16;

  //control_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_15 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_15 <= 0;
          else 
            full_15 <= p15_full_15;
    end


  //data_14, which is an e_mux
  assign p14_stage_14 = ((full_15 & ~clear_fifo) == 0)? data_in :
    stage_15;

  //data_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_14 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_14))
          if (sync_reset & full_14 & !((full_15 == 0) & read & write))
              stage_14 <= 0;
          else 
            stage_14 <= p14_stage_14;
    end


  //control_14, which is an e_mux
  assign p14_full_14 = ((read & !write) == 0)? full_13 :
    full_15;

  //control_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_14 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_14 <= 0;
          else 
            full_14 <= p14_full_14;
    end


  //data_13, which is an e_mux
  assign p13_stage_13 = ((full_14 & ~clear_fifo) == 0)? data_in :
    stage_14;

  //data_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_13 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_13))
          if (sync_reset & full_13 & !((full_14 == 0) & read & write))
              stage_13 <= 0;
          else 
            stage_13 <= p13_stage_13;
    end


  //control_13, which is an e_mux
  assign p13_full_13 = ((read & !write) == 0)? full_12 :
    full_14;

  //control_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_13 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_13 <= 0;
          else 
            full_13 <= p13_full_13;
    end


  //data_12, which is an e_mux
  assign p12_stage_12 = ((full_13 & ~clear_fifo) == 0)? data_in :
    stage_13;

  //data_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_12 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_12))
          if (sync_reset & full_12 & !((full_13 == 0) & read & write))
              stage_12 <= 0;
          else 
            stage_12 <= p12_stage_12;
    end


  //control_12, which is an e_mux
  assign p12_full_12 = ((read & !write) == 0)? full_11 :
    full_13;

  //control_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_12 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_12 <= 0;
          else 
            full_12 <= p12_full_12;
    end


  //data_11, which is an e_mux
  assign p11_stage_11 = ((full_12 & ~clear_fifo) == 0)? data_in :
    stage_12;

  //data_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_11 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_11))
          if (sync_reset & full_11 & !((full_12 == 0) & read & write))
              stage_11 <= 0;
          else 
            stage_11 <= p11_stage_11;
    end


  //control_11, which is an e_mux
  assign p11_full_11 = ((read & !write) == 0)? full_10 :
    full_12;

  //control_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_11 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_11 <= 0;
          else 
            full_11 <= p11_full_11;
    end


  //data_10, which is an e_mux
  assign p10_stage_10 = ((full_11 & ~clear_fifo) == 0)? data_in :
    stage_11;

  //data_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_10 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_10))
          if (sync_reset & full_10 & !((full_11 == 0) & read & write))
              stage_10 <= 0;
          else 
            stage_10 <= p10_stage_10;
    end


  //control_10, which is an e_mux
  assign p10_full_10 = ((read & !write) == 0)? full_9 :
    full_11;

  //control_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_10 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_10 <= 0;
          else 
            full_10 <= p10_full_10;
    end


  //data_9, which is an e_mux
  assign p9_stage_9 = ((full_10 & ~clear_fifo) == 0)? data_in :
    stage_10;

  //data_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_9 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_9))
          if (sync_reset & full_9 & !((full_10 == 0) & read & write))
              stage_9 <= 0;
          else 
            stage_9 <= p9_stage_9;
    end


  //control_9, which is an e_mux
  assign p9_full_9 = ((read & !write) == 0)? full_8 :
    full_10;

  //control_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_9 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_9 <= 0;
          else 
            full_9 <= p9_full_9;
    end


  //data_8, which is an e_mux
  assign p8_stage_8 = ((full_9 & ~clear_fifo) == 0)? data_in :
    stage_9;

  //data_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_8 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_8))
          if (sync_reset & full_8 & !((full_9 == 0) & read & write))
              stage_8 <= 0;
          else 
            stage_8 <= p8_stage_8;
    end


  //control_8, which is an e_mux
  assign p8_full_8 = ((read & !write) == 0)? full_7 :
    full_9;

  //control_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_8 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_8 <= 0;
          else 
            full_8 <= p8_full_8;
    end


  //data_7, which is an e_mux
  assign p7_stage_7 = ((full_8 & ~clear_fifo) == 0)? data_in :
    stage_8;

  //data_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_7 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_7))
          if (sync_reset & full_7 & !((full_8 == 0) & read & write))
              stage_7 <= 0;
          else 
            stage_7 <= p7_stage_7;
    end


  //control_7, which is an e_mux
  assign p7_full_7 = ((read & !write) == 0)? full_6 :
    full_8;

  //control_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_7 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_7 <= 0;
          else 
            full_7 <= p7_full_7;
    end


  //data_6, which is an e_mux
  assign p6_stage_6 = ((full_7 & ~clear_fifo) == 0)? data_in :
    stage_7;

  //data_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_6 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_6))
          if (sync_reset & full_6 & !((full_7 == 0) & read & write))
              stage_6 <= 0;
          else 
            stage_6 <= p6_stage_6;
    end


  //control_6, which is an e_mux
  assign p6_full_6 = ((read & !write) == 0)? full_5 :
    full_7;

  //control_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_6 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_6 <= 0;
          else 
            full_6 <= p6_full_6;
    end


  //data_5, which is an e_mux
  assign p5_stage_5 = ((full_6 & ~clear_fifo) == 0)? data_in :
    stage_6;

  //data_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_5 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_5))
          if (sync_reset & full_5 & !((full_6 == 0) & read & write))
              stage_5 <= 0;
          else 
            stage_5 <= p5_stage_5;
    end


  //control_5, which is an e_mux
  assign p5_full_5 = ((read & !write) == 0)? full_4 :
    full_6;

  //control_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_5 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_5 <= 0;
          else 
            full_5 <= p5_full_5;
    end


  //data_4, which is an e_mux
  assign p4_stage_4 = ((full_5 & ~clear_fifo) == 0)? data_in :
    stage_5;

  //data_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_4 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_4))
          if (sync_reset & full_4 & !((full_5 == 0) & read & write))
              stage_4 <= 0;
          else 
            stage_4 <= p4_stage_4;
    end


  //control_4, which is an e_mux
  assign p4_full_4 = ((read & !write) == 0)? full_3 :
    full_5;

  //control_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_4 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_4 <= 0;
          else 
            full_4 <= p4_full_4;
    end


  //data_3, which is an e_mux
  assign p3_stage_3 = ((full_4 & ~clear_fifo) == 0)? data_in :
    stage_4;

  //data_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_3 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_3))
          if (sync_reset & full_3 & !((full_4 == 0) & read & write))
              stage_3 <= 0;
          else 
            stage_3 <= p3_stage_3;
    end


  //control_3, which is an e_mux
  assign p3_full_3 = ((read & !write) == 0)? full_2 :
    full_4;

  //control_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_3 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_3 <= 0;
          else 
            full_3 <= p3_full_3;
    end


  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    stage_3;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    full_3;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_ethernet_port_interface_0_avalon_master_to_DE4_SOPC_burst_2_upstream_module (
                                                                                                  // inputs:
                                                                                                   clear_fifo,
                                                                                                   clk,
                                                                                                   data_in,
                                                                                                   read,
                                                                                                   reset_n,
                                                                                                   sync_reset,
                                                                                                   write,

                                                                                                  // outputs:
                                                                                                   data_out,
                                                                                                   empty,
                                                                                                   fifo_contains_ones_n,
                                                                                                   full
                                                                                                )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_10;
  reg              full_11;
  reg              full_12;
  reg              full_13;
  reg              full_14;
  reg              full_15;
  reg              full_16;
  reg              full_17;
  reg              full_18;
  reg              full_19;
  reg              full_2;
  reg              full_20;
  reg              full_21;
  reg              full_22;
  reg              full_23;
  reg              full_24;
  reg              full_25;
  reg              full_26;
  reg              full_27;
  reg              full_28;
  reg              full_29;
  reg              full_3;
  reg              full_30;
  reg              full_31;
  reg              full_32;
  reg              full_33;
  wire             full_34;
  reg              full_4;
  reg              full_5;
  reg              full_6;
  reg              full_7;
  reg              full_8;
  reg              full_9;
  reg     [  6: 0] how_many_ones;
  wire    [  6: 0] one_count_minus_one;
  wire    [  6: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p10_full_10;
  wire             p10_stage_10;
  wire             p11_full_11;
  wire             p11_stage_11;
  wire             p12_full_12;
  wire             p12_stage_12;
  wire             p13_full_13;
  wire             p13_stage_13;
  wire             p14_full_14;
  wire             p14_stage_14;
  wire             p15_full_15;
  wire             p15_stage_15;
  wire             p16_full_16;
  wire             p16_stage_16;
  wire             p17_full_17;
  wire             p17_stage_17;
  wire             p18_full_18;
  wire             p18_stage_18;
  wire             p19_full_19;
  wire             p19_stage_19;
  wire             p1_full_1;
  wire             p1_stage_1;
  wire             p20_full_20;
  wire             p20_stage_20;
  wire             p21_full_21;
  wire             p21_stage_21;
  wire             p22_full_22;
  wire             p22_stage_22;
  wire             p23_full_23;
  wire             p23_stage_23;
  wire             p24_full_24;
  wire             p24_stage_24;
  wire             p25_full_25;
  wire             p25_stage_25;
  wire             p26_full_26;
  wire             p26_stage_26;
  wire             p27_full_27;
  wire             p27_stage_27;
  wire             p28_full_28;
  wire             p28_stage_28;
  wire             p29_full_29;
  wire             p29_stage_29;
  wire             p2_full_2;
  wire             p2_stage_2;
  wire             p30_full_30;
  wire             p30_stage_30;
  wire             p31_full_31;
  wire             p31_stage_31;
  wire             p32_full_32;
  wire             p32_stage_32;
  wire             p33_full_33;
  wire             p33_stage_33;
  wire             p3_full_3;
  wire             p3_stage_3;
  wire             p4_full_4;
  wire             p4_stage_4;
  wire             p5_full_5;
  wire             p5_stage_5;
  wire             p6_full_6;
  wire             p6_stage_6;
  wire             p7_full_7;
  wire             p7_stage_7;
  wire             p8_full_8;
  wire             p8_stage_8;
  wire             p9_full_9;
  wire             p9_stage_9;
  reg              stage_0;
  reg              stage_1;
  reg              stage_10;
  reg              stage_11;
  reg              stage_12;
  reg              stage_13;
  reg              stage_14;
  reg              stage_15;
  reg              stage_16;
  reg              stage_17;
  reg              stage_18;
  reg              stage_19;
  reg              stage_2;
  reg              stage_20;
  reg              stage_21;
  reg              stage_22;
  reg              stage_23;
  reg              stage_24;
  reg              stage_25;
  reg              stage_26;
  reg              stage_27;
  reg              stage_28;
  reg              stage_29;
  reg              stage_3;
  reg              stage_30;
  reg              stage_31;
  reg              stage_32;
  reg              stage_33;
  reg              stage_4;
  reg              stage_5;
  reg              stage_6;
  reg              stage_7;
  reg              stage_8;
  reg              stage_9;
  wire    [  6: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_33;
  assign empty = !full_0;
  assign full_34 = 0;
  //data_33, which is an e_mux
  assign p33_stage_33 = ((full_34 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_33, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_33 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_33))
          if (sync_reset & full_33 & !((full_34 == 0) & read & write))
              stage_33 <= 0;
          else 
            stage_33 <= p33_stage_33;
    end


  //control_33, which is an e_mux
  assign p33_full_33 = ((read & !write) == 0)? full_32 :
    0;

  //control_reg_33, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_33 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_33 <= 0;
          else 
            full_33 <= p33_full_33;
    end


  //data_32, which is an e_mux
  assign p32_stage_32 = ((full_33 & ~clear_fifo) == 0)? data_in :
    stage_33;

  //data_reg_32, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_32 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_32))
          if (sync_reset & full_32 & !((full_33 == 0) & read & write))
              stage_32 <= 0;
          else 
            stage_32 <= p32_stage_32;
    end


  //control_32, which is an e_mux
  assign p32_full_32 = ((read & !write) == 0)? full_31 :
    full_33;

  //control_reg_32, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_32 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_32 <= 0;
          else 
            full_32 <= p32_full_32;
    end


  //data_31, which is an e_mux
  assign p31_stage_31 = ((full_32 & ~clear_fifo) == 0)? data_in :
    stage_32;

  //data_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_31 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_31))
          if (sync_reset & full_31 & !((full_32 == 0) & read & write))
              stage_31 <= 0;
          else 
            stage_31 <= p31_stage_31;
    end


  //control_31, which is an e_mux
  assign p31_full_31 = ((read & !write) == 0)? full_30 :
    full_32;

  //control_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_31 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_31 <= 0;
          else 
            full_31 <= p31_full_31;
    end


  //data_30, which is an e_mux
  assign p30_stage_30 = ((full_31 & ~clear_fifo) == 0)? data_in :
    stage_31;

  //data_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_30 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_30))
          if (sync_reset & full_30 & !((full_31 == 0) & read & write))
              stage_30 <= 0;
          else 
            stage_30 <= p30_stage_30;
    end


  //control_30, which is an e_mux
  assign p30_full_30 = ((read & !write) == 0)? full_29 :
    full_31;

  //control_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_30 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_30 <= 0;
          else 
            full_30 <= p30_full_30;
    end


  //data_29, which is an e_mux
  assign p29_stage_29 = ((full_30 & ~clear_fifo) == 0)? data_in :
    stage_30;

  //data_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_29 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_29))
          if (sync_reset & full_29 & !((full_30 == 0) & read & write))
              stage_29 <= 0;
          else 
            stage_29 <= p29_stage_29;
    end


  //control_29, which is an e_mux
  assign p29_full_29 = ((read & !write) == 0)? full_28 :
    full_30;

  //control_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_29 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_29 <= 0;
          else 
            full_29 <= p29_full_29;
    end


  //data_28, which is an e_mux
  assign p28_stage_28 = ((full_29 & ~clear_fifo) == 0)? data_in :
    stage_29;

  //data_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_28 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_28))
          if (sync_reset & full_28 & !((full_29 == 0) & read & write))
              stage_28 <= 0;
          else 
            stage_28 <= p28_stage_28;
    end


  //control_28, which is an e_mux
  assign p28_full_28 = ((read & !write) == 0)? full_27 :
    full_29;

  //control_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_28 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_28 <= 0;
          else 
            full_28 <= p28_full_28;
    end


  //data_27, which is an e_mux
  assign p27_stage_27 = ((full_28 & ~clear_fifo) == 0)? data_in :
    stage_28;

  //data_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_27 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_27))
          if (sync_reset & full_27 & !((full_28 == 0) & read & write))
              stage_27 <= 0;
          else 
            stage_27 <= p27_stage_27;
    end


  //control_27, which is an e_mux
  assign p27_full_27 = ((read & !write) == 0)? full_26 :
    full_28;

  //control_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_27 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_27 <= 0;
          else 
            full_27 <= p27_full_27;
    end


  //data_26, which is an e_mux
  assign p26_stage_26 = ((full_27 & ~clear_fifo) == 0)? data_in :
    stage_27;

  //data_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_26 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_26))
          if (sync_reset & full_26 & !((full_27 == 0) & read & write))
              stage_26 <= 0;
          else 
            stage_26 <= p26_stage_26;
    end


  //control_26, which is an e_mux
  assign p26_full_26 = ((read & !write) == 0)? full_25 :
    full_27;

  //control_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_26 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_26 <= 0;
          else 
            full_26 <= p26_full_26;
    end


  //data_25, which is an e_mux
  assign p25_stage_25 = ((full_26 & ~clear_fifo) == 0)? data_in :
    stage_26;

  //data_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_25 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_25))
          if (sync_reset & full_25 & !((full_26 == 0) & read & write))
              stage_25 <= 0;
          else 
            stage_25 <= p25_stage_25;
    end


  //control_25, which is an e_mux
  assign p25_full_25 = ((read & !write) == 0)? full_24 :
    full_26;

  //control_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_25 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_25 <= 0;
          else 
            full_25 <= p25_full_25;
    end


  //data_24, which is an e_mux
  assign p24_stage_24 = ((full_25 & ~clear_fifo) == 0)? data_in :
    stage_25;

  //data_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_24 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_24))
          if (sync_reset & full_24 & !((full_25 == 0) & read & write))
              stage_24 <= 0;
          else 
            stage_24 <= p24_stage_24;
    end


  //control_24, which is an e_mux
  assign p24_full_24 = ((read & !write) == 0)? full_23 :
    full_25;

  //control_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_24 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_24 <= 0;
          else 
            full_24 <= p24_full_24;
    end


  //data_23, which is an e_mux
  assign p23_stage_23 = ((full_24 & ~clear_fifo) == 0)? data_in :
    stage_24;

  //data_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_23 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_23))
          if (sync_reset & full_23 & !((full_24 == 0) & read & write))
              stage_23 <= 0;
          else 
            stage_23 <= p23_stage_23;
    end


  //control_23, which is an e_mux
  assign p23_full_23 = ((read & !write) == 0)? full_22 :
    full_24;

  //control_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_23 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_23 <= 0;
          else 
            full_23 <= p23_full_23;
    end


  //data_22, which is an e_mux
  assign p22_stage_22 = ((full_23 & ~clear_fifo) == 0)? data_in :
    stage_23;

  //data_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_22 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_22))
          if (sync_reset & full_22 & !((full_23 == 0) & read & write))
              stage_22 <= 0;
          else 
            stage_22 <= p22_stage_22;
    end


  //control_22, which is an e_mux
  assign p22_full_22 = ((read & !write) == 0)? full_21 :
    full_23;

  //control_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_22 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_22 <= 0;
          else 
            full_22 <= p22_full_22;
    end


  //data_21, which is an e_mux
  assign p21_stage_21 = ((full_22 & ~clear_fifo) == 0)? data_in :
    stage_22;

  //data_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_21 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_21))
          if (sync_reset & full_21 & !((full_22 == 0) & read & write))
              stage_21 <= 0;
          else 
            stage_21 <= p21_stage_21;
    end


  //control_21, which is an e_mux
  assign p21_full_21 = ((read & !write) == 0)? full_20 :
    full_22;

  //control_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_21 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_21 <= 0;
          else 
            full_21 <= p21_full_21;
    end


  //data_20, which is an e_mux
  assign p20_stage_20 = ((full_21 & ~clear_fifo) == 0)? data_in :
    stage_21;

  //data_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_20 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_20))
          if (sync_reset & full_20 & !((full_21 == 0) & read & write))
              stage_20 <= 0;
          else 
            stage_20 <= p20_stage_20;
    end


  //control_20, which is an e_mux
  assign p20_full_20 = ((read & !write) == 0)? full_19 :
    full_21;

  //control_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_20 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_20 <= 0;
          else 
            full_20 <= p20_full_20;
    end


  //data_19, which is an e_mux
  assign p19_stage_19 = ((full_20 & ~clear_fifo) == 0)? data_in :
    stage_20;

  //data_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_19 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_19))
          if (sync_reset & full_19 & !((full_20 == 0) & read & write))
              stage_19 <= 0;
          else 
            stage_19 <= p19_stage_19;
    end


  //control_19, which is an e_mux
  assign p19_full_19 = ((read & !write) == 0)? full_18 :
    full_20;

  //control_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_19 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_19 <= 0;
          else 
            full_19 <= p19_full_19;
    end


  //data_18, which is an e_mux
  assign p18_stage_18 = ((full_19 & ~clear_fifo) == 0)? data_in :
    stage_19;

  //data_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_18 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_18))
          if (sync_reset & full_18 & !((full_19 == 0) & read & write))
              stage_18 <= 0;
          else 
            stage_18 <= p18_stage_18;
    end


  //control_18, which is an e_mux
  assign p18_full_18 = ((read & !write) == 0)? full_17 :
    full_19;

  //control_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_18 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_18 <= 0;
          else 
            full_18 <= p18_full_18;
    end


  //data_17, which is an e_mux
  assign p17_stage_17 = ((full_18 & ~clear_fifo) == 0)? data_in :
    stage_18;

  //data_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_17 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_17))
          if (sync_reset & full_17 & !((full_18 == 0) & read & write))
              stage_17 <= 0;
          else 
            stage_17 <= p17_stage_17;
    end


  //control_17, which is an e_mux
  assign p17_full_17 = ((read & !write) == 0)? full_16 :
    full_18;

  //control_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_17 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_17 <= 0;
          else 
            full_17 <= p17_full_17;
    end


  //data_16, which is an e_mux
  assign p16_stage_16 = ((full_17 & ~clear_fifo) == 0)? data_in :
    stage_17;

  //data_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_16 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_16))
          if (sync_reset & full_16 & !((full_17 == 0) & read & write))
              stage_16 <= 0;
          else 
            stage_16 <= p16_stage_16;
    end


  //control_16, which is an e_mux
  assign p16_full_16 = ((read & !write) == 0)? full_15 :
    full_17;

  //control_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_16 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_16 <= 0;
          else 
            full_16 <= p16_full_16;
    end


  //data_15, which is an e_mux
  assign p15_stage_15 = ((full_16 & ~clear_fifo) == 0)? data_in :
    stage_16;

  //data_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_15 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_15))
          if (sync_reset & full_15 & !((full_16 == 0) & read & write))
              stage_15 <= 0;
          else 
            stage_15 <= p15_stage_15;
    end


  //control_15, which is an e_mux
  assign p15_full_15 = ((read & !write) == 0)? full_14 :
    full_16;

  //control_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_15 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_15 <= 0;
          else 
            full_15 <= p15_full_15;
    end


  //data_14, which is an e_mux
  assign p14_stage_14 = ((full_15 & ~clear_fifo) == 0)? data_in :
    stage_15;

  //data_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_14 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_14))
          if (sync_reset & full_14 & !((full_15 == 0) & read & write))
              stage_14 <= 0;
          else 
            stage_14 <= p14_stage_14;
    end


  //control_14, which is an e_mux
  assign p14_full_14 = ((read & !write) == 0)? full_13 :
    full_15;

  //control_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_14 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_14 <= 0;
          else 
            full_14 <= p14_full_14;
    end


  //data_13, which is an e_mux
  assign p13_stage_13 = ((full_14 & ~clear_fifo) == 0)? data_in :
    stage_14;

  //data_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_13 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_13))
          if (sync_reset & full_13 & !((full_14 == 0) & read & write))
              stage_13 <= 0;
          else 
            stage_13 <= p13_stage_13;
    end


  //control_13, which is an e_mux
  assign p13_full_13 = ((read & !write) == 0)? full_12 :
    full_14;

  //control_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_13 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_13 <= 0;
          else 
            full_13 <= p13_full_13;
    end


  //data_12, which is an e_mux
  assign p12_stage_12 = ((full_13 & ~clear_fifo) == 0)? data_in :
    stage_13;

  //data_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_12 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_12))
          if (sync_reset & full_12 & !((full_13 == 0) & read & write))
              stage_12 <= 0;
          else 
            stage_12 <= p12_stage_12;
    end


  //control_12, which is an e_mux
  assign p12_full_12 = ((read & !write) == 0)? full_11 :
    full_13;

  //control_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_12 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_12 <= 0;
          else 
            full_12 <= p12_full_12;
    end


  //data_11, which is an e_mux
  assign p11_stage_11 = ((full_12 & ~clear_fifo) == 0)? data_in :
    stage_12;

  //data_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_11 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_11))
          if (sync_reset & full_11 & !((full_12 == 0) & read & write))
              stage_11 <= 0;
          else 
            stage_11 <= p11_stage_11;
    end


  //control_11, which is an e_mux
  assign p11_full_11 = ((read & !write) == 0)? full_10 :
    full_12;

  //control_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_11 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_11 <= 0;
          else 
            full_11 <= p11_full_11;
    end


  //data_10, which is an e_mux
  assign p10_stage_10 = ((full_11 & ~clear_fifo) == 0)? data_in :
    stage_11;

  //data_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_10 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_10))
          if (sync_reset & full_10 & !((full_11 == 0) & read & write))
              stage_10 <= 0;
          else 
            stage_10 <= p10_stage_10;
    end


  //control_10, which is an e_mux
  assign p10_full_10 = ((read & !write) == 0)? full_9 :
    full_11;

  //control_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_10 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_10 <= 0;
          else 
            full_10 <= p10_full_10;
    end


  //data_9, which is an e_mux
  assign p9_stage_9 = ((full_10 & ~clear_fifo) == 0)? data_in :
    stage_10;

  //data_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_9 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_9))
          if (sync_reset & full_9 & !((full_10 == 0) & read & write))
              stage_9 <= 0;
          else 
            stage_9 <= p9_stage_9;
    end


  //control_9, which is an e_mux
  assign p9_full_9 = ((read & !write) == 0)? full_8 :
    full_10;

  //control_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_9 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_9 <= 0;
          else 
            full_9 <= p9_full_9;
    end


  //data_8, which is an e_mux
  assign p8_stage_8 = ((full_9 & ~clear_fifo) == 0)? data_in :
    stage_9;

  //data_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_8 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_8))
          if (sync_reset & full_8 & !((full_9 == 0) & read & write))
              stage_8 <= 0;
          else 
            stage_8 <= p8_stage_8;
    end


  //control_8, which is an e_mux
  assign p8_full_8 = ((read & !write) == 0)? full_7 :
    full_9;

  //control_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_8 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_8 <= 0;
          else 
            full_8 <= p8_full_8;
    end


  //data_7, which is an e_mux
  assign p7_stage_7 = ((full_8 & ~clear_fifo) == 0)? data_in :
    stage_8;

  //data_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_7 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_7))
          if (sync_reset & full_7 & !((full_8 == 0) & read & write))
              stage_7 <= 0;
          else 
            stage_7 <= p7_stage_7;
    end


  //control_7, which is an e_mux
  assign p7_full_7 = ((read & !write) == 0)? full_6 :
    full_8;

  //control_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_7 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_7 <= 0;
          else 
            full_7 <= p7_full_7;
    end


  //data_6, which is an e_mux
  assign p6_stage_6 = ((full_7 & ~clear_fifo) == 0)? data_in :
    stage_7;

  //data_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_6 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_6))
          if (sync_reset & full_6 & !((full_7 == 0) & read & write))
              stage_6 <= 0;
          else 
            stage_6 <= p6_stage_6;
    end


  //control_6, which is an e_mux
  assign p6_full_6 = ((read & !write) == 0)? full_5 :
    full_7;

  //control_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_6 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_6 <= 0;
          else 
            full_6 <= p6_full_6;
    end


  //data_5, which is an e_mux
  assign p5_stage_5 = ((full_6 & ~clear_fifo) == 0)? data_in :
    stage_6;

  //data_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_5 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_5))
          if (sync_reset & full_5 & !((full_6 == 0) & read & write))
              stage_5 <= 0;
          else 
            stage_5 <= p5_stage_5;
    end


  //control_5, which is an e_mux
  assign p5_full_5 = ((read & !write) == 0)? full_4 :
    full_6;

  //control_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_5 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_5 <= 0;
          else 
            full_5 <= p5_full_5;
    end


  //data_4, which is an e_mux
  assign p4_stage_4 = ((full_5 & ~clear_fifo) == 0)? data_in :
    stage_5;

  //data_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_4 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_4))
          if (sync_reset & full_4 & !((full_5 == 0) & read & write))
              stage_4 <= 0;
          else 
            stage_4 <= p4_stage_4;
    end


  //control_4, which is an e_mux
  assign p4_full_4 = ((read & !write) == 0)? full_3 :
    full_5;

  //control_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_4 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_4 <= 0;
          else 
            full_4 <= p4_full_4;
    end


  //data_3, which is an e_mux
  assign p3_stage_3 = ((full_4 & ~clear_fifo) == 0)? data_in :
    stage_4;

  //data_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_3 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_3))
          if (sync_reset & full_3 & !((full_4 == 0) & read & write))
              stage_3 <= 0;
          else 
            stage_3 <= p3_stage_3;
    end


  //control_3, which is an e_mux
  assign p3_full_3 = ((read & !write) == 0)? full_2 :
    full_4;

  //control_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_3 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_3 <= 0;
          else 
            full_3 <= p3_full_3;
    end


  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    stage_3;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    full_3;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_2_upstream_arbitrator (
                                              // inputs:
                                               DE4_SOPC_burst_2_upstream_readdata,
                                               DE4_SOPC_burst_2_upstream_readdatavalid,
                                               DE4_SOPC_burst_2_upstream_waitrequest,
                                               clk,
                                               ethernet_port_interface_0_avalon_master_address_to_slave,
                                               ethernet_port_interface_0_avalon_master_burstcount,
                                               ethernet_port_interface_0_avalon_master_byteenable,
                                               ethernet_port_interface_0_avalon_master_chipselect,
                                               ethernet_port_interface_0_avalon_master_latency_counter,
                                               ethernet_port_interface_0_avalon_master_read,
                                               ethernet_port_interface_0_avalon_master_write,
                                               ethernet_port_interface_0_avalon_master_writedata,
                                               reset_n,

                                              // outputs:
                                               DE4_SOPC_burst_2_upstream_address,
                                               DE4_SOPC_burst_2_upstream_burstcount,
                                               DE4_SOPC_burst_2_upstream_byteaddress,
                                               DE4_SOPC_burst_2_upstream_byteenable,
                                               DE4_SOPC_burst_2_upstream_debugaccess,
                                               DE4_SOPC_burst_2_upstream_read,
                                               DE4_SOPC_burst_2_upstream_readdata_from_sa,
                                               DE4_SOPC_burst_2_upstream_waitrequest_from_sa,
                                               DE4_SOPC_burst_2_upstream_write,
                                               DE4_SOPC_burst_2_upstream_writedata,
                                               d1_DE4_SOPC_burst_2_upstream_end_xfer,
                                               ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream,
                                               ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream,
                                               ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream,
                                               ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register,
                                               ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream
                                            )
;

  output  [ 24: 0] DE4_SOPC_burst_2_upstream_address;
  output  [  9: 0] DE4_SOPC_burst_2_upstream_burstcount;
  output  [ 27: 0] DE4_SOPC_burst_2_upstream_byteaddress;
  output  [  7: 0] DE4_SOPC_burst_2_upstream_byteenable;
  output           DE4_SOPC_burst_2_upstream_debugaccess;
  output           DE4_SOPC_burst_2_upstream_read;
  output  [ 63: 0] DE4_SOPC_burst_2_upstream_readdata_from_sa;
  output           DE4_SOPC_burst_2_upstream_waitrequest_from_sa;
  output           DE4_SOPC_burst_2_upstream_write;
  output  [ 63: 0] DE4_SOPC_burst_2_upstream_writedata;
  output           d1_DE4_SOPC_burst_2_upstream_end_xfer;
  output           ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream;
  output           ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream;
  output           ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream;
  output           ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register;
  output           ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream;
  input   [ 63: 0] DE4_SOPC_burst_2_upstream_readdata;
  input            DE4_SOPC_burst_2_upstream_readdatavalid;
  input            DE4_SOPC_burst_2_upstream_waitrequest;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_address_to_slave;
  input   [  9: 0] ethernet_port_interface_0_avalon_master_burstcount;
  input   [  3: 0] ethernet_port_interface_0_avalon_master_byteenable;
  input            ethernet_port_interface_0_avalon_master_chipselect;
  input            ethernet_port_interface_0_avalon_master_latency_counter;
  input            ethernet_port_interface_0_avalon_master_read;
  input            ethernet_port_interface_0_avalon_master_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_writedata;
  input            reset_n;

  wire    [ 24: 0] DE4_SOPC_burst_2_upstream_address;
  wire             DE4_SOPC_burst_2_upstream_allgrants;
  wire             DE4_SOPC_burst_2_upstream_allow_new_arb_cycle;
  wire             DE4_SOPC_burst_2_upstream_any_bursting_master_saved_grant;
  wire             DE4_SOPC_burst_2_upstream_any_continuerequest;
  wire             DE4_SOPC_burst_2_upstream_arb_counter_enable;
  reg     [  9: 0] DE4_SOPC_burst_2_upstream_arb_share_counter;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_arb_share_counter_next_value;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_arb_share_set_values;
  reg     [  8: 0] DE4_SOPC_burst_2_upstream_bbt_burstcounter;
  wire             DE4_SOPC_burst_2_upstream_beginbursttransfer_internal;
  wire             DE4_SOPC_burst_2_upstream_begins_xfer;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_burstcount;
  wire             DE4_SOPC_burst_2_upstream_burstcount_fifo_empty;
  wire    [ 27: 0] DE4_SOPC_burst_2_upstream_byteaddress;
  wire    [  7: 0] DE4_SOPC_burst_2_upstream_byteenable;
  reg     [  9: 0] DE4_SOPC_burst_2_upstream_current_burst;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_current_burst_minus_one;
  wire             DE4_SOPC_burst_2_upstream_debugaccess;
  wire             DE4_SOPC_burst_2_upstream_end_xfer;
  wire             DE4_SOPC_burst_2_upstream_firsttransfer;
  wire             DE4_SOPC_burst_2_upstream_grant_vector;
  wire             DE4_SOPC_burst_2_upstream_in_a_read_cycle;
  wire             DE4_SOPC_burst_2_upstream_in_a_write_cycle;
  reg              DE4_SOPC_burst_2_upstream_load_fifo;
  wire             DE4_SOPC_burst_2_upstream_master_qreq_vector;
  wire             DE4_SOPC_burst_2_upstream_move_on_to_next_transaction;
  wire    [  8: 0] DE4_SOPC_burst_2_upstream_next_bbt_burstcount;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_next_burst_count;
  wire             DE4_SOPC_burst_2_upstream_non_bursting_master_requests;
  wire             DE4_SOPC_burst_2_upstream_read;
  wire    [ 63: 0] DE4_SOPC_burst_2_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_2_upstream_readdatavalid_from_sa;
  reg              DE4_SOPC_burst_2_upstream_reg_firsttransfer;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_selected_burstcount;
  reg              DE4_SOPC_burst_2_upstream_slavearbiterlockenable;
  wire             DE4_SOPC_burst_2_upstream_slavearbiterlockenable2;
  wire             DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_transaction_burst_count;
  wire             DE4_SOPC_burst_2_upstream_unreg_firsttransfer;
  wire             DE4_SOPC_burst_2_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_2_upstream_waits_for_read;
  wire             DE4_SOPC_burst_2_upstream_waits_for_write;
  wire             DE4_SOPC_burst_2_upstream_write;
  wire    [ 63: 0] DE4_SOPC_burst_2_upstream_writedata;
  reg              d1_DE4_SOPC_burst_2_upstream_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_arbiterlock;
  wire             ethernet_port_interface_0_avalon_master_arbiterlock2;
  wire             ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream;
  reg              ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream_reg;
  wire    [  7: 0] ethernet_port_interface_0_avalon_master_byteenable_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_continuerequest;
  wire             ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_rdv_fifo_empty_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_rdv_fifo_output_from_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register;
  wire             ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_saved_grant_DE4_SOPC_burst_2_upstream;
  wire    [ 63: 0] ethernet_port_interface_0_avalon_master_writedata_replicated;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             p0_DE4_SOPC_burst_2_upstream_load_fifo;
  wire             wait_for_DE4_SOPC_burst_2_upstream_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~DE4_SOPC_burst_2_upstream_end_xfer;
    end


  assign DE4_SOPC_burst_2_upstream_begins_xfer = ~d1_reasons_to_wait & ((ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream));
  //assign DE4_SOPC_burst_2_upstream_readdata_from_sa = DE4_SOPC_burst_2_upstream_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_readdata_from_sa = DE4_SOPC_burst_2_upstream_readdata;

  assign ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream = ({ethernet_port_interface_0_avalon_master_address_to_slave[31 : 25] , 25'b0} == 32'h0) & ethernet_port_interface_0_avalon_master_chipselect;
  //assign DE4_SOPC_burst_2_upstream_waitrequest_from_sa = DE4_SOPC_burst_2_upstream_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_waitrequest_from_sa = DE4_SOPC_burst_2_upstream_waitrequest;

  //assign DE4_SOPC_burst_2_upstream_readdatavalid_from_sa = DE4_SOPC_burst_2_upstream_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_readdatavalid_from_sa = DE4_SOPC_burst_2_upstream_readdatavalid;

  //DE4_SOPC_burst_2_upstream_arb_share_counter set values, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_arb_share_set_values = (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream)? ((((ethernet_port_interface_0_avalon_master_write & ethernet_port_interface_0_avalon_master_chipselect)) ? ethernet_port_interface_0_avalon_master_burstcount : 1)) :
    1;

  //DE4_SOPC_burst_2_upstream_non_bursting_master_requests mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_non_bursting_master_requests = 0;

  //DE4_SOPC_burst_2_upstream_any_bursting_master_saved_grant mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_any_bursting_master_saved_grant = ethernet_port_interface_0_avalon_master_saved_grant_DE4_SOPC_burst_2_upstream;

  //DE4_SOPC_burst_2_upstream_arb_share_counter_next_value assignment, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_arb_share_counter_next_value = DE4_SOPC_burst_2_upstream_firsttransfer ? (DE4_SOPC_burst_2_upstream_arb_share_set_values - 1) : |DE4_SOPC_burst_2_upstream_arb_share_counter ? (DE4_SOPC_burst_2_upstream_arb_share_counter - 1) : 0;

  //DE4_SOPC_burst_2_upstream_allgrants all slave grants, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_allgrants = |DE4_SOPC_burst_2_upstream_grant_vector;

  //DE4_SOPC_burst_2_upstream_end_xfer assignment, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_end_xfer = ~(DE4_SOPC_burst_2_upstream_waits_for_read | DE4_SOPC_burst_2_upstream_waits_for_write);

  //end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream = DE4_SOPC_burst_2_upstream_end_xfer & (~DE4_SOPC_burst_2_upstream_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //DE4_SOPC_burst_2_upstream_arb_share_counter arbitration counter enable, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_arb_counter_enable = (end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream & DE4_SOPC_burst_2_upstream_allgrants) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream & ~DE4_SOPC_burst_2_upstream_non_bursting_master_requests);

  //DE4_SOPC_burst_2_upstream_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_upstream_arb_share_counter <= 0;
      else if (DE4_SOPC_burst_2_upstream_arb_counter_enable)
          DE4_SOPC_burst_2_upstream_arb_share_counter <= DE4_SOPC_burst_2_upstream_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_2_upstream_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_upstream_slavearbiterlockenable <= 0;
      else if ((|DE4_SOPC_burst_2_upstream_master_qreq_vector & end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_2_upstream & ~DE4_SOPC_burst_2_upstream_non_bursting_master_requests))
          DE4_SOPC_burst_2_upstream_slavearbiterlockenable <= |DE4_SOPC_burst_2_upstream_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0/avalon_master DE4_SOPC_burst_2/upstream arbiterlock, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_arbiterlock = DE4_SOPC_burst_2_upstream_slavearbiterlockenable & ethernet_port_interface_0_avalon_master_continuerequest;

  //DE4_SOPC_burst_2_upstream_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_slavearbiterlockenable2 = |DE4_SOPC_burst_2_upstream_arb_share_counter_next_value;

  //ethernet_port_interface_0/avalon_master DE4_SOPC_burst_2/upstream arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_arbiterlock2 = DE4_SOPC_burst_2_upstream_slavearbiterlockenable2 & ethernet_port_interface_0_avalon_master_continuerequest;

  //DE4_SOPC_burst_2_upstream_any_continuerequest at least one master continues requesting, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_any_continuerequest = 1;

  //ethernet_port_interface_0_avalon_master_continuerequest continued request, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_continuerequest = 1;

  assign ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream = ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream & ~(((ethernet_port_interface_0_avalon_master_read & ethernet_port_interface_0_avalon_master_chipselect) & ((ethernet_port_interface_0_avalon_master_latency_counter != 0) | (1 < ethernet_port_interface_0_avalon_master_latency_counter))));
  //unique name for DE4_SOPC_burst_2_upstream_move_on_to_next_transaction, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_move_on_to_next_transaction = DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_2_upstream_load_fifo;

  //the currently selected burstcount for DE4_SOPC_burst_2_upstream, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_selected_burstcount = (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream)? ethernet_port_interface_0_avalon_master_burstcount :
    1;

  //burstcount_fifo_for_DE4_SOPC_burst_2_upstream, which is an e_fifo_with_registered_outputs
  burstcount_fifo_for_DE4_SOPC_burst_2_upstream_module burstcount_fifo_for_DE4_SOPC_burst_2_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_2_upstream_selected_burstcount),
      .data_out             (DE4_SOPC_burst_2_upstream_transaction_burst_count),
      .empty                (DE4_SOPC_burst_2_upstream_burstcount_fifo_empty),
      .fifo_contains_ones_n (),
      .full                 (),
      .read                 (DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read & DE4_SOPC_burst_2_upstream_load_fifo & ~(DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_2_upstream_burstcount_fifo_empty))
    );

  //DE4_SOPC_burst_2_upstream current burst minus one, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_current_burst_minus_one = DE4_SOPC_burst_2_upstream_current_burst - 1;

  //what to load in current_burst, for DE4_SOPC_burst_2_upstream, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_next_burst_count = (((in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read) & ~DE4_SOPC_burst_2_upstream_load_fifo))? DE4_SOPC_burst_2_upstream_selected_burstcount :
    ((in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read & DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_2_upstream_burstcount_fifo_empty))? DE4_SOPC_burst_2_upstream_selected_burstcount :
    (DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst)? DE4_SOPC_burst_2_upstream_transaction_burst_count :
    DE4_SOPC_burst_2_upstream_current_burst_minus_one;

  //the current burst count for DE4_SOPC_burst_2_upstream, to be decremented, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_upstream_current_burst <= 0;
      else if (DE4_SOPC_burst_2_upstream_readdatavalid_from_sa | (~DE4_SOPC_burst_2_upstream_load_fifo & (in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read)))
          DE4_SOPC_burst_2_upstream_current_burst <= DE4_SOPC_burst_2_upstream_next_burst_count;
    end


  //a 1 or burstcount fifo empty, to initialize the counter, which is an e_mux
  assign p0_DE4_SOPC_burst_2_upstream_load_fifo = (~DE4_SOPC_burst_2_upstream_load_fifo)? 1 :
    (((in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read) & DE4_SOPC_burst_2_upstream_load_fifo))? 1 :
    ~DE4_SOPC_burst_2_upstream_burstcount_fifo_empty;

  //whether to load directly to the counter or to the fifo, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_upstream_load_fifo <= 0;
      else if ((in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read) & ~DE4_SOPC_burst_2_upstream_load_fifo | DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst)
          DE4_SOPC_burst_2_upstream_load_fifo <= p0_DE4_SOPC_burst_2_upstream_load_fifo;
    end


  //the last cycle in the burst for DE4_SOPC_burst_2_upstream, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_this_cycle_is_the_last_burst = ~(|DE4_SOPC_burst_2_upstream_current_burst_minus_one) & DE4_SOPC_burst_2_upstream_readdatavalid_from_sa;

  //rdv_fifo_for_ethernet_port_interface_0_avalon_master_to_DE4_SOPC_burst_2_upstream, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_ethernet_port_interface_0_avalon_master_to_DE4_SOPC_burst_2_upstream_module rdv_fifo_for_ethernet_port_interface_0_avalon_master_to_DE4_SOPC_burst_2_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream),
      .data_out             (ethernet_port_interface_0_avalon_master_rdv_fifo_output_from_DE4_SOPC_burst_2_upstream),
      .empty                (),
      .fifo_contains_ones_n (ethernet_port_interface_0_avalon_master_rdv_fifo_empty_DE4_SOPC_burst_2_upstream),
      .full                 (),
      .read                 (DE4_SOPC_burst_2_upstream_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_2_upstream_waits_for_read)
    );

  assign ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register = ~ethernet_port_interface_0_avalon_master_rdv_fifo_empty_DE4_SOPC_burst_2_upstream;
  //local readdatavalid ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream = DE4_SOPC_burst_2_upstream_readdatavalid_from_sa;

  //replicate narrow data for wide slave
  assign ethernet_port_interface_0_avalon_master_writedata_replicated = {ethernet_port_interface_0_avalon_master_writedata,
    ethernet_port_interface_0_avalon_master_writedata};

  //DE4_SOPC_burst_2_upstream_writedata mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_writedata = ethernet_port_interface_0_avalon_master_writedata_replicated;

  //byteaddress mux for DE4_SOPC_burst_2/upstream, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_byteaddress = ethernet_port_interface_0_avalon_master_address_to_slave;

  //master is always granted when requested
  assign ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream = ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream;

  //ethernet_port_interface_0/avalon_master saved-grant DE4_SOPC_burst_2/upstream, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_saved_grant_DE4_SOPC_burst_2_upstream = ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream;

  //allow new arb cycle for DE4_SOPC_burst_2/upstream, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign DE4_SOPC_burst_2_upstream_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign DE4_SOPC_burst_2_upstream_master_qreq_vector = 1;

  //DE4_SOPC_burst_2_upstream_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_firsttransfer = DE4_SOPC_burst_2_upstream_begins_xfer ? DE4_SOPC_burst_2_upstream_unreg_firsttransfer : DE4_SOPC_burst_2_upstream_reg_firsttransfer;

  //DE4_SOPC_burst_2_upstream_unreg_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_unreg_firsttransfer = ~(DE4_SOPC_burst_2_upstream_slavearbiterlockenable & DE4_SOPC_burst_2_upstream_any_continuerequest);

  //DE4_SOPC_burst_2_upstream_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_upstream_reg_firsttransfer <= 1'b1;
      else if (DE4_SOPC_burst_2_upstream_begins_xfer)
          DE4_SOPC_burst_2_upstream_reg_firsttransfer <= DE4_SOPC_burst_2_upstream_unreg_firsttransfer;
    end


  //DE4_SOPC_burst_2_upstream_next_bbt_burstcount next_bbt_burstcount, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_next_bbt_burstcount = ((((DE4_SOPC_burst_2_upstream_write) && (DE4_SOPC_burst_2_upstream_bbt_burstcounter == 0))))? (DE4_SOPC_burst_2_upstream_burstcount - 1) :
    ((((DE4_SOPC_burst_2_upstream_read) && (DE4_SOPC_burst_2_upstream_bbt_burstcounter == 0))))? 0 :
    (DE4_SOPC_burst_2_upstream_bbt_burstcounter - 1);

  //DE4_SOPC_burst_2_upstream_bbt_burstcounter bbt_burstcounter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_upstream_bbt_burstcounter <= 0;
      else if (DE4_SOPC_burst_2_upstream_begins_xfer)
          DE4_SOPC_burst_2_upstream_bbt_burstcounter <= DE4_SOPC_burst_2_upstream_next_bbt_burstcount;
    end


  //DE4_SOPC_burst_2_upstream_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_beginbursttransfer_internal = DE4_SOPC_burst_2_upstream_begins_xfer & (DE4_SOPC_burst_2_upstream_bbt_burstcounter == 0);

  //DE4_SOPC_burst_2_upstream_read assignment, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_read = ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream & (ethernet_port_interface_0_avalon_master_read & ethernet_port_interface_0_avalon_master_chipselect);

  //DE4_SOPC_burst_2_upstream_write assignment, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_write = ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream & (ethernet_port_interface_0_avalon_master_write & ethernet_port_interface_0_avalon_master_chipselect);

  //DE4_SOPC_burst_2_upstream_address mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_address = ethernet_port_interface_0_avalon_master_address_to_slave;

  //d1_DE4_SOPC_burst_2_upstream_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_DE4_SOPC_burst_2_upstream_end_xfer <= 1;
      else 
        d1_DE4_SOPC_burst_2_upstream_end_xfer <= DE4_SOPC_burst_2_upstream_end_xfer;
    end


  //DE4_SOPC_burst_2_upstream_waits_for_read in a cycle, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_waits_for_read = DE4_SOPC_burst_2_upstream_in_a_read_cycle & DE4_SOPC_burst_2_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_2_upstream_in_a_read_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_in_a_read_cycle = ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream & (ethernet_port_interface_0_avalon_master_read & ethernet_port_interface_0_avalon_master_chipselect);

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = DE4_SOPC_burst_2_upstream_in_a_read_cycle;

  //DE4_SOPC_burst_2_upstream_waits_for_write in a cycle, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_waits_for_write = DE4_SOPC_burst_2_upstream_in_a_write_cycle & DE4_SOPC_burst_2_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_2_upstream_in_a_write_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_2_upstream_in_a_write_cycle = ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream & (ethernet_port_interface_0_avalon_master_write & ethernet_port_interface_0_avalon_master_chipselect);

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = DE4_SOPC_burst_2_upstream_in_a_write_cycle;

  assign wait_for_DE4_SOPC_burst_2_upstream_counter = 0;
  //DE4_SOPC_burst_2_upstream_byteenable byte enable port mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_byteenable = (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream)? ethernet_port_interface_0_avalon_master_byteenable_DE4_SOPC_burst_2_upstream :
    -1;

  //be mux control reg for ethernet_port_interface_0/avalon_master and DE4_SOPC_burst_2/upstream, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream_reg <= 0;
      else 
        ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream_reg <= DE4_SOPC_burst_2_upstream_beginbursttransfer_internal & ~DE4_SOPC_burst_2_upstream_waitrequest_from_sa ? (ethernet_port_interface_0_avalon_master_address_to_slave[2] + 1) : DE4_SOPC_burst_2_upstream_beginbursttransfer_internal & DE4_SOPC_burst_2_upstream_waitrequest_from_sa ? ethernet_port_interface_0_avalon_master_address_to_slave[2] : ~DE4_SOPC_burst_2_upstream_waitrequest_from_sa ? (ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream_reg + 1) :  ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream_reg;
    end


  //be mux control for ethernet_port_interface_0/avalon_master and DE4_SOPC_burst_2/upstream, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream = DE4_SOPC_burst_2_upstream_beginbursttransfer_internal ? ethernet_port_interface_0_avalon_master_address_to_slave[2] : ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream_reg;

  //byte_enable_mux for ethernet_port_interface_0/avalon_master and DE4_SOPC_burst_2/upstream, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_byteenable_DE4_SOPC_burst_2_upstream = (ethernet_port_interface_0_avalon_master_be_mux_control_DE4_SOPC_burst_2_upstream == 0)? ethernet_port_interface_0_avalon_master_byteenable :
    {ethernet_port_interface_0_avalon_master_byteenable, {4'b0}};

  //burstcount mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_burstcount = (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream)? ethernet_port_interface_0_avalon_master_burstcount :
    1;

  //debugaccess mux, which is an e_mux
  assign DE4_SOPC_burst_2_upstream_debugaccess = 0;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_2/upstream enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //ethernet_port_interface_0/avalon_master non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream && (ethernet_port_interface_0_avalon_master_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: ethernet_port_interface_0/avalon_master drove 0 on its 'burstcount' port while accessing slave DE4_SOPC_burst_2/upstream", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_2_downstream_arbitrator (
                                                // inputs:
                                                 DE4_SOPC_burst_2_downstream_address,
                                                 DE4_SOPC_burst_2_downstream_burstcount,
                                                 DE4_SOPC_burst_2_downstream_byteenable,
                                                 DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface,
                                                 DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface,
                                                 DE4_SOPC_burst_2_downstream_read,
                                                 DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface,
                                                 DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register,
                                                 DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface,
                                                 DE4_SOPC_burst_2_downstream_write,
                                                 DE4_SOPC_burst_2_downstream_writedata,
                                                 clk,
                                                 d1_pcie_compiler_0_Tx_Interface_end_xfer,
                                                 pcie_compiler_0_Tx_Interface_readdata_from_sa,
                                                 pcie_compiler_0_Tx_Interface_waitrequest_from_sa,
                                                 reset_n,

                                                // outputs:
                                                 DE4_SOPC_burst_2_downstream_address_to_slave,
                                                 DE4_SOPC_burst_2_downstream_latency_counter,
                                                 DE4_SOPC_burst_2_downstream_readdata,
                                                 DE4_SOPC_burst_2_downstream_readdatavalid,
                                                 DE4_SOPC_burst_2_downstream_reset_n,
                                                 DE4_SOPC_burst_2_downstream_waitrequest
                                              )
;

  output  [ 24: 0] DE4_SOPC_burst_2_downstream_address_to_slave;
  output           DE4_SOPC_burst_2_downstream_latency_counter;
  output  [ 63: 0] DE4_SOPC_burst_2_downstream_readdata;
  output           DE4_SOPC_burst_2_downstream_readdatavalid;
  output           DE4_SOPC_burst_2_downstream_reset_n;
  output           DE4_SOPC_burst_2_downstream_waitrequest;
  input   [ 24: 0] DE4_SOPC_burst_2_downstream_address;
  input   [  9: 0] DE4_SOPC_burst_2_downstream_burstcount;
  input   [  7: 0] DE4_SOPC_burst_2_downstream_byteenable;
  input            DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface;
  input            DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface;
  input            DE4_SOPC_burst_2_downstream_read;
  input            DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface;
  input            DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register;
  input            DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface;
  input            DE4_SOPC_burst_2_downstream_write;
  input   [ 63: 0] DE4_SOPC_burst_2_downstream_writedata;
  input            clk;
  input            d1_pcie_compiler_0_Tx_Interface_end_xfer;
  input   [ 63: 0] pcie_compiler_0_Tx_Interface_readdata_from_sa;
  input            pcie_compiler_0_Tx_Interface_waitrequest_from_sa;
  input            reset_n;

  reg     [ 24: 0] DE4_SOPC_burst_2_downstream_address_last_time;
  wire    [ 24: 0] DE4_SOPC_burst_2_downstream_address_to_slave;
  reg     [  9: 0] DE4_SOPC_burst_2_downstream_burstcount_last_time;
  reg     [  7: 0] DE4_SOPC_burst_2_downstream_byteenable_last_time;
  wire             DE4_SOPC_burst_2_downstream_latency_counter;
  reg              DE4_SOPC_burst_2_downstream_read_last_time;
  wire    [ 63: 0] DE4_SOPC_burst_2_downstream_readdata;
  wire             DE4_SOPC_burst_2_downstream_readdatavalid;
  wire             DE4_SOPC_burst_2_downstream_reset_n;
  wire             DE4_SOPC_burst_2_downstream_run;
  wire             DE4_SOPC_burst_2_downstream_waitrequest;
  reg              DE4_SOPC_burst_2_downstream_write_last_time;
  reg     [ 63: 0] DE4_SOPC_burst_2_downstream_writedata_last_time;
  reg              active_and_waiting_last_time;
  wire             pre_flush_DE4_SOPC_burst_2_downstream_readdatavalid;
  wire             r_0;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface | ~DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface) & ((~DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface | ~(DE4_SOPC_burst_2_downstream_read | DE4_SOPC_burst_2_downstream_write) | (1 & ~pcie_compiler_0_Tx_Interface_waitrequest_from_sa & (DE4_SOPC_burst_2_downstream_read | DE4_SOPC_burst_2_downstream_write)))) & ((~DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface | ~(DE4_SOPC_burst_2_downstream_read | DE4_SOPC_burst_2_downstream_write) | (1 & ~pcie_compiler_0_Tx_Interface_waitrequest_from_sa & (DE4_SOPC_burst_2_downstream_read | DE4_SOPC_burst_2_downstream_write))));

  //cascaded wait assignment, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_run = r_0;

  //optimize select-logic by passing only those address bits which matter.
  assign DE4_SOPC_burst_2_downstream_address_to_slave = DE4_SOPC_burst_2_downstream_address;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_DE4_SOPC_burst_2_downstream_readdatavalid = DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign DE4_SOPC_burst_2_downstream_readdatavalid = 0 |
    pre_flush_DE4_SOPC_burst_2_downstream_readdatavalid;

  //DE4_SOPC_burst_2/downstream readdata mux, which is an e_mux
  assign DE4_SOPC_burst_2_downstream_readdata = pcie_compiler_0_Tx_Interface_readdata_from_sa;

  //actual waitrequest port, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_waitrequest = ~DE4_SOPC_burst_2_downstream_run;

  //latent max counter, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_latency_counter = 0;

  //DE4_SOPC_burst_2_downstream_reset_n assignment, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_reset_n = reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_2_downstream_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_downstream_address_last_time <= 0;
      else 
        DE4_SOPC_burst_2_downstream_address_last_time <= DE4_SOPC_burst_2_downstream_address;
    end


  //DE4_SOPC_burst_2/downstream waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= DE4_SOPC_burst_2_downstream_waitrequest & (DE4_SOPC_burst_2_downstream_read | DE4_SOPC_burst_2_downstream_write);
    end


  //DE4_SOPC_burst_2_downstream_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_2_downstream_address != DE4_SOPC_burst_2_downstream_address_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_2_downstream_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_2_downstream_burstcount check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_downstream_burstcount_last_time <= 0;
      else 
        DE4_SOPC_burst_2_downstream_burstcount_last_time <= DE4_SOPC_burst_2_downstream_burstcount;
    end


  //DE4_SOPC_burst_2_downstream_burstcount matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_2_downstream_burstcount != DE4_SOPC_burst_2_downstream_burstcount_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_2_downstream_burstcount did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_2_downstream_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_downstream_byteenable_last_time <= 0;
      else 
        DE4_SOPC_burst_2_downstream_byteenable_last_time <= DE4_SOPC_burst_2_downstream_byteenable;
    end


  //DE4_SOPC_burst_2_downstream_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_2_downstream_byteenable != DE4_SOPC_burst_2_downstream_byteenable_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_2_downstream_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_2_downstream_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_downstream_read_last_time <= 0;
      else 
        DE4_SOPC_burst_2_downstream_read_last_time <= DE4_SOPC_burst_2_downstream_read;
    end


  //DE4_SOPC_burst_2_downstream_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_2_downstream_read != DE4_SOPC_burst_2_downstream_read_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_2_downstream_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_2_downstream_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_downstream_write_last_time <= 0;
      else 
        DE4_SOPC_burst_2_downstream_write_last_time <= DE4_SOPC_burst_2_downstream_write;
    end


  //DE4_SOPC_burst_2_downstream_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_2_downstream_write != DE4_SOPC_burst_2_downstream_write_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_2_downstream_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_2_downstream_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_2_downstream_writedata_last_time <= 0;
      else 
        DE4_SOPC_burst_2_downstream_writedata_last_time <= DE4_SOPC_burst_2_downstream_writedata;
    end


  //DE4_SOPC_burst_2_downstream_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_2_downstream_writedata != DE4_SOPC_burst_2_downstream_writedata_last_time) & DE4_SOPC_burst_2_downstream_write)
        begin
          $write("%0d ns: DE4_SOPC_burst_2_downstream_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module burstcount_fifo_for_DE4_SOPC_burst_3_upstream_module (
                                                              // inputs:
                                                               clear_fifo,
                                                               clk,
                                                               data_in,
                                                               read,
                                                               reset_n,
                                                               sync_reset,
                                                               write,

                                                              // outputs:
                                                               data_out,
                                                               empty,
                                                               fifo_contains_ones_n,
                                                               full
                                                            )
;

  output  [ 10: 0] data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input   [ 10: 0] data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire    [ 10: 0] data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  wire             full_2;
  reg     [  2: 0] how_many_ones;
  wire    [  2: 0] one_count_minus_one;
  wire    [  2: 0] one_count_plus_one;
  wire             p0_full_0;
  wire    [ 10: 0] p0_stage_0;
  wire             p1_full_1;
  wire    [ 10: 0] p1_stage_1;
  reg     [ 10: 0] stage_0;
  reg     [ 10: 0] stage_1;
  wire    [  2: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_1;
  assign empty = !full_0;
  assign full_2 = 0;
  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    0;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_3_upstream_module (
                                                                                       // inputs:
                                                                                        clear_fifo,
                                                                                        clk,
                                                                                        data_in,
                                                                                        read,
                                                                                        reset_n,
                                                                                        sync_reset,
                                                                                        write,

                                                                                       // outputs:
                                                                                        data_out,
                                                                                        empty,
                                                                                        fifo_contains_ones_n,
                                                                                        full
                                                                                     )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  wire             full_2;
  reg     [  2: 0] how_many_ones;
  wire    [  2: 0] one_count_minus_one;
  wire    [  2: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p1_full_1;
  wire             p1_stage_1;
  reg              stage_0;
  reg              stage_1;
  wire    [  2: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_1;
  assign empty = !full_0;
  assign full_2 = 0;
  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    0;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_3_upstream_arbitrator (
                                              // inputs:
                                               DE4_SOPC_burst_3_upstream_readdata,
                                               DE4_SOPC_burst_3_upstream_readdatavalid,
                                               DE4_SOPC_burst_3_upstream_waitrequest,
                                               clk,
                                               pcie_compiler_0_Rx_Interface_address_to_slave,
                                               pcie_compiler_0_Rx_Interface_burstcount,
                                               pcie_compiler_0_Rx_Interface_byteenable,
                                               pcie_compiler_0_Rx_Interface_dbs_address,
                                               pcie_compiler_0_Rx_Interface_dbs_write_32,
                                               pcie_compiler_0_Rx_Interface_latency_counter,
                                               pcie_compiler_0_Rx_Interface_read,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_write,
                                               reset_n,

                                              // outputs:
                                               DE4_SOPC_burst_3_upstream_address,
                                               DE4_SOPC_burst_3_upstream_burstcount,
                                               DE4_SOPC_burst_3_upstream_byteaddress,
                                               DE4_SOPC_burst_3_upstream_byteenable,
                                               DE4_SOPC_burst_3_upstream_debugaccess,
                                               DE4_SOPC_burst_3_upstream_read,
                                               DE4_SOPC_burst_3_upstream_readdata_from_sa,
                                               DE4_SOPC_burst_3_upstream_waitrequest_from_sa,
                                               DE4_SOPC_burst_3_upstream_write,
                                               DE4_SOPC_burst_3_upstream_writedata,
                                               d1_DE4_SOPC_burst_3_upstream_end_xfer,
                                               pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream,
                                               pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream,
                                               pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream,
                                               pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register,
                                               pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream
                                            )
;

  output  [ 13: 0] DE4_SOPC_burst_3_upstream_address;
  output  [  9: 0] DE4_SOPC_burst_3_upstream_burstcount;
  output  [ 15: 0] DE4_SOPC_burst_3_upstream_byteaddress;
  output  [  3: 0] DE4_SOPC_burst_3_upstream_byteenable;
  output           DE4_SOPC_burst_3_upstream_debugaccess;
  output           DE4_SOPC_burst_3_upstream_read;
  output  [ 31: 0] DE4_SOPC_burst_3_upstream_readdata_from_sa;
  output           DE4_SOPC_burst_3_upstream_waitrequest_from_sa;
  output           DE4_SOPC_burst_3_upstream_write;
  output  [ 31: 0] DE4_SOPC_burst_3_upstream_writedata;
  output           d1_DE4_SOPC_burst_3_upstream_end_xfer;
  output  [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream;
  output           pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream;
  output           pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream;
  output           pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream;
  output           pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register;
  output           pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream;
  input   [ 31: 0] DE4_SOPC_burst_3_upstream_readdata;
  input            DE4_SOPC_burst_3_upstream_readdatavalid;
  input            DE4_SOPC_burst_3_upstream_waitrequest;
  input            clk;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_address_to_slave;
  input   [  9: 0] pcie_compiler_0_Rx_Interface_burstcount;
  input   [  7: 0] pcie_compiler_0_Rx_Interface_byteenable;
  input   [  2: 0] pcie_compiler_0_Rx_Interface_dbs_address;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_dbs_write_32;
  input            pcie_compiler_0_Rx_Interface_latency_counter;
  input            pcie_compiler_0_Rx_Interface_read;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_write;
  input            reset_n;

  wire    [ 13: 0] DE4_SOPC_burst_3_upstream_address;
  wire             DE4_SOPC_burst_3_upstream_allgrants;
  wire             DE4_SOPC_burst_3_upstream_allow_new_arb_cycle;
  wire             DE4_SOPC_burst_3_upstream_any_bursting_master_saved_grant;
  wire             DE4_SOPC_burst_3_upstream_any_continuerequest;
  wire             DE4_SOPC_burst_3_upstream_arb_counter_enable;
  reg     [ 11: 0] DE4_SOPC_burst_3_upstream_arb_share_counter;
  wire    [ 11: 0] DE4_SOPC_burst_3_upstream_arb_share_counter_next_value;
  wire    [ 11: 0] DE4_SOPC_burst_3_upstream_arb_share_set_values;
  reg     [  8: 0] DE4_SOPC_burst_3_upstream_bbt_burstcounter;
  wire             DE4_SOPC_burst_3_upstream_beginbursttransfer_internal;
  wire             DE4_SOPC_burst_3_upstream_begins_xfer;
  wire    [  9: 0] DE4_SOPC_burst_3_upstream_burstcount;
  wire             DE4_SOPC_burst_3_upstream_burstcount_fifo_empty;
  wire    [ 15: 0] DE4_SOPC_burst_3_upstream_byteaddress;
  wire    [  3: 0] DE4_SOPC_burst_3_upstream_byteenable;
  reg     [ 10: 0] DE4_SOPC_burst_3_upstream_current_burst;
  wire    [ 10: 0] DE4_SOPC_burst_3_upstream_current_burst_minus_one;
  wire             DE4_SOPC_burst_3_upstream_debugaccess;
  wire             DE4_SOPC_burst_3_upstream_end_xfer;
  wire             DE4_SOPC_burst_3_upstream_firsttransfer;
  wire             DE4_SOPC_burst_3_upstream_grant_vector;
  wire             DE4_SOPC_burst_3_upstream_in_a_read_cycle;
  wire             DE4_SOPC_burst_3_upstream_in_a_write_cycle;
  reg              DE4_SOPC_burst_3_upstream_load_fifo;
  wire             DE4_SOPC_burst_3_upstream_master_qreq_vector;
  wire             DE4_SOPC_burst_3_upstream_move_on_to_next_transaction;
  wire    [  8: 0] DE4_SOPC_burst_3_upstream_next_bbt_burstcount;
  wire    [ 10: 0] DE4_SOPC_burst_3_upstream_next_burst_count;
  wire             DE4_SOPC_burst_3_upstream_non_bursting_master_requests;
  wire             DE4_SOPC_burst_3_upstream_read;
  wire    [ 31: 0] DE4_SOPC_burst_3_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_3_upstream_readdatavalid_from_sa;
  reg              DE4_SOPC_burst_3_upstream_reg_firsttransfer;
  wire    [ 10: 0] DE4_SOPC_burst_3_upstream_selected_burstcount;
  reg              DE4_SOPC_burst_3_upstream_slavearbiterlockenable;
  wire             DE4_SOPC_burst_3_upstream_slavearbiterlockenable2;
  wire             DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst;
  wire    [ 10: 0] DE4_SOPC_burst_3_upstream_transaction_burst_count;
  wire             DE4_SOPC_burst_3_upstream_unreg_firsttransfer;
  wire             DE4_SOPC_burst_3_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_3_upstream_waits_for_read;
  wire             DE4_SOPC_burst_3_upstream_waits_for_write;
  wire             DE4_SOPC_burst_3_upstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_3_upstream_writedata;
  reg              d1_DE4_SOPC_burst_3_upstream_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             p0_DE4_SOPC_burst_3_upstream_load_fifo;
  wire             pcie_compiler_0_Rx_Interface_arbiterlock;
  wire             pcie_compiler_0_Rx_Interface_arbiterlock2;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream_segment_0;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream_segment_1;
  wire             pcie_compiler_0_Rx_Interface_continuerequest;
  wire             pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_rdv_fifo_output_from_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register;
  wire             pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_3_upstream;
  wire             wait_for_DE4_SOPC_burst_3_upstream_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~DE4_SOPC_burst_3_upstream_end_xfer;
    end


  assign DE4_SOPC_burst_3_upstream_begins_xfer = ~d1_reasons_to_wait & ((pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream));
  //assign DE4_SOPC_burst_3_upstream_readdatavalid_from_sa = DE4_SOPC_burst_3_upstream_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_readdatavalid_from_sa = DE4_SOPC_burst_3_upstream_readdatavalid;

  //assign DE4_SOPC_burst_3_upstream_readdata_from_sa = DE4_SOPC_burst_3_upstream_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_readdata_from_sa = DE4_SOPC_burst_3_upstream_readdata;

  assign pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream = ({pcie_compiler_0_Rx_Interface_address_to_slave[31 : 14] , 14'b0} == 32'h80000000) & (pcie_compiler_0_Rx_Interface_read | pcie_compiler_0_Rx_Interface_write);
  //assign DE4_SOPC_burst_3_upstream_waitrequest_from_sa = DE4_SOPC_burst_3_upstream_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_waitrequest_from_sa = DE4_SOPC_burst_3_upstream_waitrequest;

  //DE4_SOPC_burst_3_upstream_arb_share_counter set values, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_arb_share_set_values = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream)? (((pcie_compiler_0_Rx_Interface_write) ? pcie_compiler_0_Rx_Interface_burstcount<< 1 : 1)) :
    1;

  //DE4_SOPC_burst_3_upstream_non_bursting_master_requests mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_non_bursting_master_requests = 0;

  //DE4_SOPC_burst_3_upstream_any_bursting_master_saved_grant mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_any_bursting_master_saved_grant = pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_3_upstream;

  //DE4_SOPC_burst_3_upstream_arb_share_counter_next_value assignment, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_arb_share_counter_next_value = DE4_SOPC_burst_3_upstream_firsttransfer ? (DE4_SOPC_burst_3_upstream_arb_share_set_values - 1) : |DE4_SOPC_burst_3_upstream_arb_share_counter ? (DE4_SOPC_burst_3_upstream_arb_share_counter - 1) : 0;

  //DE4_SOPC_burst_3_upstream_allgrants all slave grants, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_allgrants = |DE4_SOPC_burst_3_upstream_grant_vector;

  //DE4_SOPC_burst_3_upstream_end_xfer assignment, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_end_xfer = ~(DE4_SOPC_burst_3_upstream_waits_for_read | DE4_SOPC_burst_3_upstream_waits_for_write);

  //end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream = DE4_SOPC_burst_3_upstream_end_xfer & (~DE4_SOPC_burst_3_upstream_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //DE4_SOPC_burst_3_upstream_arb_share_counter arbitration counter enable, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_arb_counter_enable = (end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream & DE4_SOPC_burst_3_upstream_allgrants) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream & ~DE4_SOPC_burst_3_upstream_non_bursting_master_requests);

  //DE4_SOPC_burst_3_upstream_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_upstream_arb_share_counter <= 0;
      else if (DE4_SOPC_burst_3_upstream_arb_counter_enable)
          DE4_SOPC_burst_3_upstream_arb_share_counter <= DE4_SOPC_burst_3_upstream_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_3_upstream_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_upstream_slavearbiterlockenable <= 0;
      else if ((|DE4_SOPC_burst_3_upstream_master_qreq_vector & end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream) | (end_xfer_arb_share_counter_term_DE4_SOPC_burst_3_upstream & ~DE4_SOPC_burst_3_upstream_non_bursting_master_requests))
          DE4_SOPC_burst_3_upstream_slavearbiterlockenable <= |DE4_SOPC_burst_3_upstream_arb_share_counter_next_value;
    end


  //pcie_compiler_0/Rx_Interface DE4_SOPC_burst_3/upstream arbiterlock, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_arbiterlock = DE4_SOPC_burst_3_upstream_slavearbiterlockenable & pcie_compiler_0_Rx_Interface_continuerequest;

  //DE4_SOPC_burst_3_upstream_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_slavearbiterlockenable2 = |DE4_SOPC_burst_3_upstream_arb_share_counter_next_value;

  //pcie_compiler_0/Rx_Interface DE4_SOPC_burst_3/upstream arbiterlock2, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_arbiterlock2 = DE4_SOPC_burst_3_upstream_slavearbiterlockenable2 & pcie_compiler_0_Rx_Interface_continuerequest;

  //DE4_SOPC_burst_3_upstream_any_continuerequest at least one master continues requesting, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_any_continuerequest = 1;

  //pcie_compiler_0_Rx_Interface_continuerequest continued request, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_continuerequest = 1;

  assign pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream = pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream & ~((pcie_compiler_0_Rx_Interface_read & ((pcie_compiler_0_Rx_Interface_latency_counter != 0) | (1 < pcie_compiler_0_Rx_Interface_latency_counter) | (|pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register) | (|pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register))));
  //unique name for DE4_SOPC_burst_3_upstream_move_on_to_next_transaction, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_move_on_to_next_transaction = DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_3_upstream_load_fifo;

  //the currently selected burstcount for DE4_SOPC_burst_3_upstream, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_selected_burstcount = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream)? pcie_compiler_0_Rx_Interface_burstcount :
    1;

  //burstcount_fifo_for_DE4_SOPC_burst_3_upstream, which is an e_fifo_with_registered_outputs
  burstcount_fifo_for_DE4_SOPC_burst_3_upstream_module burstcount_fifo_for_DE4_SOPC_burst_3_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_3_upstream_selected_burstcount),
      .data_out             (DE4_SOPC_burst_3_upstream_transaction_burst_count),
      .empty                (DE4_SOPC_burst_3_upstream_burstcount_fifo_empty),
      .fifo_contains_ones_n (),
      .full                 (),
      .read                 (DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read & DE4_SOPC_burst_3_upstream_load_fifo & ~(DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_3_upstream_burstcount_fifo_empty))
    );

  //DE4_SOPC_burst_3_upstream current burst minus one, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_current_burst_minus_one = DE4_SOPC_burst_3_upstream_current_burst - 1;

  //what to load in current_burst, for DE4_SOPC_burst_3_upstream, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_next_burst_count = (((in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read) & ~DE4_SOPC_burst_3_upstream_load_fifo))? {DE4_SOPC_burst_3_upstream_selected_burstcount, 1'b0} :
    ((in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read & DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst & DE4_SOPC_burst_3_upstream_burstcount_fifo_empty))? {DE4_SOPC_burst_3_upstream_selected_burstcount, 1'b0} :
    (DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst)? {DE4_SOPC_burst_3_upstream_transaction_burst_count,  1'b0} :
    DE4_SOPC_burst_3_upstream_current_burst_minus_one;

  //the current burst count for DE4_SOPC_burst_3_upstream, to be decremented, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_upstream_current_burst <= 0;
      else if (DE4_SOPC_burst_3_upstream_readdatavalid_from_sa | (~DE4_SOPC_burst_3_upstream_load_fifo & (in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read)))
          DE4_SOPC_burst_3_upstream_current_burst <= DE4_SOPC_burst_3_upstream_next_burst_count;
    end


  //a 1 or burstcount fifo empty, to initialize the counter, which is an e_mux
  assign p0_DE4_SOPC_burst_3_upstream_load_fifo = (~DE4_SOPC_burst_3_upstream_load_fifo)? 1 :
    (((in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read) & DE4_SOPC_burst_3_upstream_load_fifo))? 1 :
    ~DE4_SOPC_burst_3_upstream_burstcount_fifo_empty;

  //whether to load directly to the counter or to the fifo, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_upstream_load_fifo <= 0;
      else if ((in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read) & ~DE4_SOPC_burst_3_upstream_load_fifo | DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst)
          DE4_SOPC_burst_3_upstream_load_fifo <= p0_DE4_SOPC_burst_3_upstream_load_fifo;
    end


  //the last cycle in the burst for DE4_SOPC_burst_3_upstream, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_this_cycle_is_the_last_burst = ~(|DE4_SOPC_burst_3_upstream_current_burst_minus_one) & DE4_SOPC_burst_3_upstream_readdatavalid_from_sa;

  //rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_3_upstream, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_3_upstream_module rdv_fifo_for_pcie_compiler_0_Rx_Interface_to_DE4_SOPC_burst_3_upstream
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream),
      .data_out             (pcie_compiler_0_Rx_Interface_rdv_fifo_output_from_DE4_SOPC_burst_3_upstream),
      .empty                (),
      .fifo_contains_ones_n (pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_3_upstream),
      .full                 (),
      .read                 (DE4_SOPC_burst_3_upstream_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~DE4_SOPC_burst_3_upstream_waits_for_read)
    );

  assign pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register = ~pcie_compiler_0_Rx_Interface_rdv_fifo_empty_DE4_SOPC_burst_3_upstream;
  //local readdatavalid pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream = DE4_SOPC_burst_3_upstream_readdatavalid_from_sa;

  //DE4_SOPC_burst_3_upstream_writedata mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_writedata = pcie_compiler_0_Rx_Interface_dbs_write_32;

  //byteaddress mux for DE4_SOPC_burst_3/upstream, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_byteaddress = pcie_compiler_0_Rx_Interface_address_to_slave;

  //master is always granted when requested
  assign pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream = pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream;

  //pcie_compiler_0/Rx_Interface saved-grant DE4_SOPC_burst_3/upstream, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_saved_grant_DE4_SOPC_burst_3_upstream = pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream;

  //allow new arb cycle for DE4_SOPC_burst_3/upstream, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign DE4_SOPC_burst_3_upstream_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign DE4_SOPC_burst_3_upstream_master_qreq_vector = 1;

  //DE4_SOPC_burst_3_upstream_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_firsttransfer = DE4_SOPC_burst_3_upstream_begins_xfer ? DE4_SOPC_burst_3_upstream_unreg_firsttransfer : DE4_SOPC_burst_3_upstream_reg_firsttransfer;

  //DE4_SOPC_burst_3_upstream_unreg_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_unreg_firsttransfer = ~(DE4_SOPC_burst_3_upstream_slavearbiterlockenable & DE4_SOPC_burst_3_upstream_any_continuerequest);

  //DE4_SOPC_burst_3_upstream_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_upstream_reg_firsttransfer <= 1'b1;
      else if (DE4_SOPC_burst_3_upstream_begins_xfer)
          DE4_SOPC_burst_3_upstream_reg_firsttransfer <= DE4_SOPC_burst_3_upstream_unreg_firsttransfer;
    end


  //DE4_SOPC_burst_3_upstream_next_bbt_burstcount next_bbt_burstcount, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_next_bbt_burstcount = ((((DE4_SOPC_burst_3_upstream_write) && (DE4_SOPC_burst_3_upstream_bbt_burstcounter == 0))))? (DE4_SOPC_burst_3_upstream_burstcount - 1) :
    ((((DE4_SOPC_burst_3_upstream_read) && (DE4_SOPC_burst_3_upstream_bbt_burstcounter == 0))))? 0 :
    (DE4_SOPC_burst_3_upstream_bbt_burstcounter - 1);

  //DE4_SOPC_burst_3_upstream_bbt_burstcounter bbt_burstcounter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_upstream_bbt_burstcounter <= 0;
      else if (DE4_SOPC_burst_3_upstream_begins_xfer)
          DE4_SOPC_burst_3_upstream_bbt_burstcounter <= DE4_SOPC_burst_3_upstream_next_bbt_burstcount;
    end


  //DE4_SOPC_burst_3_upstream_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_beginbursttransfer_internal = DE4_SOPC_burst_3_upstream_begins_xfer & (DE4_SOPC_burst_3_upstream_bbt_burstcounter == 0);

  //DE4_SOPC_burst_3_upstream_read assignment, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_read = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream & pcie_compiler_0_Rx_Interface_read;

  //DE4_SOPC_burst_3_upstream_write assignment, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_write = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream & pcie_compiler_0_Rx_Interface_write;

  //DE4_SOPC_burst_3_upstream_address mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_address = {pcie_compiler_0_Rx_Interface_address_to_slave >> 3,
    pcie_compiler_0_Rx_Interface_dbs_address[2],
    {2 {1'b0}}};

  //d1_DE4_SOPC_burst_3_upstream_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_DE4_SOPC_burst_3_upstream_end_xfer <= 1;
      else 
        d1_DE4_SOPC_burst_3_upstream_end_xfer <= DE4_SOPC_burst_3_upstream_end_xfer;
    end


  //DE4_SOPC_burst_3_upstream_waits_for_read in a cycle, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_waits_for_read = DE4_SOPC_burst_3_upstream_in_a_read_cycle & DE4_SOPC_burst_3_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_3_upstream_in_a_read_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_in_a_read_cycle = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream & pcie_compiler_0_Rx_Interface_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = DE4_SOPC_burst_3_upstream_in_a_read_cycle;

  //DE4_SOPC_burst_3_upstream_waits_for_write in a cycle, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_waits_for_write = DE4_SOPC_burst_3_upstream_in_a_write_cycle & DE4_SOPC_burst_3_upstream_waitrequest_from_sa;

  //DE4_SOPC_burst_3_upstream_in_a_write_cycle assignment, which is an e_assign
  assign DE4_SOPC_burst_3_upstream_in_a_write_cycle = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream & pcie_compiler_0_Rx_Interface_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = DE4_SOPC_burst_3_upstream_in_a_write_cycle;

  assign wait_for_DE4_SOPC_burst_3_upstream_counter = 0;
  //DE4_SOPC_burst_3_upstream_byteenable byte enable port mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_byteenable = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream)? pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream :
    -1;

  assign {pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream_segment_1,
pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream_segment_0} = pcie_compiler_0_Rx_Interface_byteenable;
  assign pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream = ((pcie_compiler_0_Rx_Interface_dbs_address[2] == 0))? pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream_segment_0 :
    pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream_segment_1;

  //burstcount mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_burstcount = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream)? pcie_compiler_0_Rx_Interface_burstcount :
    1;

  //debugaccess mux, which is an e_mux
  assign DE4_SOPC_burst_3_upstream_debugaccess = 0;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_3/upstream enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //pcie_compiler_0/Rx_Interface non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream && (pcie_compiler_0_Rx_Interface_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: pcie_compiler_0/Rx_Interface drove 0 on its 'burstcount' port while accessing slave DE4_SOPC_burst_3/upstream", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_burst_3_downstream_arbitrator (
                                                // inputs:
                                                 DE4_SOPC_burst_3_downstream_address,
                                                 DE4_SOPC_burst_3_downstream_burstcount,
                                                 DE4_SOPC_burst_3_downstream_byteenable,
                                                 DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access,
                                                 DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access,
                                                 DE4_SOPC_burst_3_downstream_read,
                                                 DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access,
                                                 DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access,
                                                 DE4_SOPC_burst_3_downstream_write,
                                                 DE4_SOPC_burst_3_downstream_writedata,
                                                 clk,
                                                 d1_pcie_compiler_0_Control_Register_Access_end_xfer,
                                                 pcie_compiler_0_Control_Register_Access_readdata_from_sa,
                                                 pcie_compiler_0_Control_Register_Access_waitrequest_from_sa,
                                                 reset_n,

                                                // outputs:
                                                 DE4_SOPC_burst_3_downstream_address_to_slave,
                                                 DE4_SOPC_burst_3_downstream_latency_counter,
                                                 DE4_SOPC_burst_3_downstream_readdata,
                                                 DE4_SOPC_burst_3_downstream_readdatavalid,
                                                 DE4_SOPC_burst_3_downstream_reset_n,
                                                 DE4_SOPC_burst_3_downstream_waitrequest
                                              )
;

  output  [ 13: 0] DE4_SOPC_burst_3_downstream_address_to_slave;
  output           DE4_SOPC_burst_3_downstream_latency_counter;
  output  [ 31: 0] DE4_SOPC_burst_3_downstream_readdata;
  output           DE4_SOPC_burst_3_downstream_readdatavalid;
  output           DE4_SOPC_burst_3_downstream_reset_n;
  output           DE4_SOPC_burst_3_downstream_waitrequest;
  input   [ 13: 0] DE4_SOPC_burst_3_downstream_address;
  input            DE4_SOPC_burst_3_downstream_burstcount;
  input   [  3: 0] DE4_SOPC_burst_3_downstream_byteenable;
  input            DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access;
  input            DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access;
  input            DE4_SOPC_burst_3_downstream_read;
  input            DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access;
  input            DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access;
  input            DE4_SOPC_burst_3_downstream_write;
  input   [ 31: 0] DE4_SOPC_burst_3_downstream_writedata;
  input            clk;
  input            d1_pcie_compiler_0_Control_Register_Access_end_xfer;
  input   [ 31: 0] pcie_compiler_0_Control_Register_Access_readdata_from_sa;
  input            pcie_compiler_0_Control_Register_Access_waitrequest_from_sa;
  input            reset_n;

  reg     [ 13: 0] DE4_SOPC_burst_3_downstream_address_last_time;
  wire    [ 13: 0] DE4_SOPC_burst_3_downstream_address_to_slave;
  reg              DE4_SOPC_burst_3_downstream_burstcount_last_time;
  reg     [  3: 0] DE4_SOPC_burst_3_downstream_byteenable_last_time;
  wire             DE4_SOPC_burst_3_downstream_latency_counter;
  reg              DE4_SOPC_burst_3_downstream_read_last_time;
  wire    [ 31: 0] DE4_SOPC_burst_3_downstream_readdata;
  wire             DE4_SOPC_burst_3_downstream_readdatavalid;
  wire             DE4_SOPC_burst_3_downstream_reset_n;
  wire             DE4_SOPC_burst_3_downstream_run;
  wire             DE4_SOPC_burst_3_downstream_waitrequest;
  reg              DE4_SOPC_burst_3_downstream_write_last_time;
  reg     [ 31: 0] DE4_SOPC_burst_3_downstream_writedata_last_time;
  reg              active_and_waiting_last_time;
  wire             pre_flush_DE4_SOPC_burst_3_downstream_readdatavalid;
  wire             r_0;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access | ~DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access) & ((~DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access | ~(DE4_SOPC_burst_3_downstream_read | DE4_SOPC_burst_3_downstream_write) | (1 & ~pcie_compiler_0_Control_Register_Access_waitrequest_from_sa & (DE4_SOPC_burst_3_downstream_read | DE4_SOPC_burst_3_downstream_write)))) & ((~DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access | ~(DE4_SOPC_burst_3_downstream_read | DE4_SOPC_burst_3_downstream_write) | (1 & ~pcie_compiler_0_Control_Register_Access_waitrequest_from_sa & (DE4_SOPC_burst_3_downstream_read | DE4_SOPC_burst_3_downstream_write))));

  //cascaded wait assignment, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_run = r_0;

  //optimize select-logic by passing only those address bits which matter.
  assign DE4_SOPC_burst_3_downstream_address_to_slave = DE4_SOPC_burst_3_downstream_address;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_DE4_SOPC_burst_3_downstream_readdatavalid = 0;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign DE4_SOPC_burst_3_downstream_readdatavalid = 0 |
    pre_flush_DE4_SOPC_burst_3_downstream_readdatavalid |
    DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access;

  //DE4_SOPC_burst_3/downstream readdata mux, which is an e_mux
  assign DE4_SOPC_burst_3_downstream_readdata = pcie_compiler_0_Control_Register_Access_readdata_from_sa;

  //actual waitrequest port, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_waitrequest = ~DE4_SOPC_burst_3_downstream_run;

  //latent max counter, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_latency_counter = 0;

  //DE4_SOPC_burst_3_downstream_reset_n assignment, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_reset_n = reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_burst_3_downstream_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_downstream_address_last_time <= 0;
      else 
        DE4_SOPC_burst_3_downstream_address_last_time <= DE4_SOPC_burst_3_downstream_address;
    end


  //DE4_SOPC_burst_3/downstream waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= DE4_SOPC_burst_3_downstream_waitrequest & (DE4_SOPC_burst_3_downstream_read | DE4_SOPC_burst_3_downstream_write);
    end


  //DE4_SOPC_burst_3_downstream_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_3_downstream_address != DE4_SOPC_burst_3_downstream_address_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_3_downstream_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_3_downstream_burstcount check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_downstream_burstcount_last_time <= 0;
      else 
        DE4_SOPC_burst_3_downstream_burstcount_last_time <= DE4_SOPC_burst_3_downstream_burstcount;
    end


  //DE4_SOPC_burst_3_downstream_burstcount matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_3_downstream_burstcount != DE4_SOPC_burst_3_downstream_burstcount_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_3_downstream_burstcount did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_3_downstream_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_downstream_byteenable_last_time <= 0;
      else 
        DE4_SOPC_burst_3_downstream_byteenable_last_time <= DE4_SOPC_burst_3_downstream_byteenable;
    end


  //DE4_SOPC_burst_3_downstream_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_3_downstream_byteenable != DE4_SOPC_burst_3_downstream_byteenable_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_3_downstream_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_3_downstream_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_downstream_read_last_time <= 0;
      else 
        DE4_SOPC_burst_3_downstream_read_last_time <= DE4_SOPC_burst_3_downstream_read;
    end


  //DE4_SOPC_burst_3_downstream_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_3_downstream_read != DE4_SOPC_burst_3_downstream_read_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_3_downstream_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_3_downstream_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_downstream_write_last_time <= 0;
      else 
        DE4_SOPC_burst_3_downstream_write_last_time <= DE4_SOPC_burst_3_downstream_write;
    end


  //DE4_SOPC_burst_3_downstream_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_3_downstream_write != DE4_SOPC_burst_3_downstream_write_last_time))
        begin
          $write("%0d ns: DE4_SOPC_burst_3_downstream_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_3_downstream_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_burst_3_downstream_writedata_last_time <= 0;
      else 
        DE4_SOPC_burst_3_downstream_writedata_last_time <= DE4_SOPC_burst_3_downstream_writedata;
    end


  //DE4_SOPC_burst_3_downstream_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_burst_3_downstream_writedata != DE4_SOPC_burst_3_downstream_writedata_last_time) & DE4_SOPC_burst_3_downstream_write)
        begin
          $write("%0d ns: DE4_SOPC_burst_3_downstream_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_clock_0_in_arbitrator (
                                        // inputs:
                                         DE4_SOPC_clock_0_in_endofpacket,
                                         DE4_SOPC_clock_0_in_readdata,
                                         DE4_SOPC_clock_0_in_waitrequest,
                                         clk,
                                         master_0_latency_counter,
                                         master_0_master_address_to_slave,
                                         master_0_master_byteenable,
                                         master_0_master_read,
                                         master_0_master_write,
                                         master_0_master_writedata,
                                         master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                         reset_n,

                                        // outputs:
                                         DE4_SOPC_clock_0_in_address,
                                         DE4_SOPC_clock_0_in_byteenable,
                                         DE4_SOPC_clock_0_in_endofpacket_from_sa,
                                         DE4_SOPC_clock_0_in_nativeaddress,
                                         DE4_SOPC_clock_0_in_read,
                                         DE4_SOPC_clock_0_in_readdata_from_sa,
                                         DE4_SOPC_clock_0_in_reset_n,
                                         DE4_SOPC_clock_0_in_waitrequest_from_sa,
                                         DE4_SOPC_clock_0_in_write,
                                         DE4_SOPC_clock_0_in_writedata,
                                         d1_DE4_SOPC_clock_0_in_end_xfer,
                                         master_0_granted_DE4_SOPC_clock_0_in,
                                         master_0_qualified_request_DE4_SOPC_clock_0_in,
                                         master_0_read_data_valid_DE4_SOPC_clock_0_in,
                                         master_0_requests_DE4_SOPC_clock_0_in
                                      )
;

  output  [  3: 0] DE4_SOPC_clock_0_in_address;
  output  [  1: 0] DE4_SOPC_clock_0_in_byteenable;
  output           DE4_SOPC_clock_0_in_endofpacket_from_sa;
  output  [  2: 0] DE4_SOPC_clock_0_in_nativeaddress;
  output           DE4_SOPC_clock_0_in_read;
  output  [ 15: 0] DE4_SOPC_clock_0_in_readdata_from_sa;
  output           DE4_SOPC_clock_0_in_reset_n;
  output           DE4_SOPC_clock_0_in_waitrequest_from_sa;
  output           DE4_SOPC_clock_0_in_write;
  output  [ 15: 0] DE4_SOPC_clock_0_in_writedata;
  output           d1_DE4_SOPC_clock_0_in_end_xfer;
  output           master_0_granted_DE4_SOPC_clock_0_in;
  output           master_0_qualified_request_DE4_SOPC_clock_0_in;
  output           master_0_read_data_valid_DE4_SOPC_clock_0_in;
  output           master_0_requests_DE4_SOPC_clock_0_in;
  input            DE4_SOPC_clock_0_in_endofpacket;
  input   [ 15: 0] DE4_SOPC_clock_0_in_readdata;
  input            DE4_SOPC_clock_0_in_waitrequest;
  input            clk;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input   [  3: 0] master_0_master_byteenable;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;

  wire    [  3: 0] DE4_SOPC_clock_0_in_address;
  wire             DE4_SOPC_clock_0_in_allgrants;
  wire             DE4_SOPC_clock_0_in_allow_new_arb_cycle;
  wire             DE4_SOPC_clock_0_in_any_bursting_master_saved_grant;
  wire             DE4_SOPC_clock_0_in_any_continuerequest;
  wire             DE4_SOPC_clock_0_in_arb_counter_enable;
  reg              DE4_SOPC_clock_0_in_arb_share_counter;
  wire             DE4_SOPC_clock_0_in_arb_share_counter_next_value;
  wire             DE4_SOPC_clock_0_in_arb_share_set_values;
  wire             DE4_SOPC_clock_0_in_beginbursttransfer_internal;
  wire             DE4_SOPC_clock_0_in_begins_xfer;
  wire    [  1: 0] DE4_SOPC_clock_0_in_byteenable;
  wire             DE4_SOPC_clock_0_in_end_xfer;
  wire             DE4_SOPC_clock_0_in_endofpacket_from_sa;
  wire             DE4_SOPC_clock_0_in_firsttransfer;
  wire             DE4_SOPC_clock_0_in_grant_vector;
  wire             DE4_SOPC_clock_0_in_in_a_read_cycle;
  wire             DE4_SOPC_clock_0_in_in_a_write_cycle;
  wire             DE4_SOPC_clock_0_in_master_qreq_vector;
  wire    [  2: 0] DE4_SOPC_clock_0_in_nativeaddress;
  wire             DE4_SOPC_clock_0_in_non_bursting_master_requests;
  wire             DE4_SOPC_clock_0_in_read;
  wire    [ 15: 0] DE4_SOPC_clock_0_in_readdata_from_sa;
  reg              DE4_SOPC_clock_0_in_reg_firsttransfer;
  wire             DE4_SOPC_clock_0_in_reset_n;
  reg              DE4_SOPC_clock_0_in_slavearbiterlockenable;
  wire             DE4_SOPC_clock_0_in_slavearbiterlockenable2;
  wire             DE4_SOPC_clock_0_in_unreg_firsttransfer;
  wire             DE4_SOPC_clock_0_in_waitrequest_from_sa;
  wire             DE4_SOPC_clock_0_in_waits_for_read;
  wire             DE4_SOPC_clock_0_in_waits_for_write;
  wire             DE4_SOPC_clock_0_in_write;
  wire    [ 15: 0] DE4_SOPC_clock_0_in_writedata;
  reg              d1_DE4_SOPC_clock_0_in_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             master_0_granted_DE4_SOPC_clock_0_in;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_DE4_SOPC_clock_0_in;
  wire             master_0_read_data_valid_DE4_SOPC_clock_0_in;
  wire             master_0_requests_DE4_SOPC_clock_0_in;
  wire             master_0_saved_grant_DE4_SOPC_clock_0_in;
  wire    [ 31: 0] shifted_address_to_DE4_SOPC_clock_0_in_from_master_0_master;
  wire             wait_for_DE4_SOPC_clock_0_in_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~DE4_SOPC_clock_0_in_end_xfer;
    end


  assign DE4_SOPC_clock_0_in_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_DE4_SOPC_clock_0_in));
  //assign DE4_SOPC_clock_0_in_readdata_from_sa = DE4_SOPC_clock_0_in_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_clock_0_in_readdata_from_sa = DE4_SOPC_clock_0_in_readdata;

  assign master_0_requests_DE4_SOPC_clock_0_in = ({master_0_master_address_to_slave[31 : 5] , 5'b0} == 32'h21001140) & (master_0_master_read | master_0_master_write);
  //assign DE4_SOPC_clock_0_in_waitrequest_from_sa = DE4_SOPC_clock_0_in_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_clock_0_in_waitrequest_from_sa = DE4_SOPC_clock_0_in_waitrequest;

  //DE4_SOPC_clock_0_in_arb_share_counter set values, which is an e_mux
  assign DE4_SOPC_clock_0_in_arb_share_set_values = 1;

  //DE4_SOPC_clock_0_in_non_bursting_master_requests mux, which is an e_mux
  assign DE4_SOPC_clock_0_in_non_bursting_master_requests = master_0_requests_DE4_SOPC_clock_0_in;

  //DE4_SOPC_clock_0_in_any_bursting_master_saved_grant mux, which is an e_mux
  assign DE4_SOPC_clock_0_in_any_bursting_master_saved_grant = 0;

  //DE4_SOPC_clock_0_in_arb_share_counter_next_value assignment, which is an e_assign
  assign DE4_SOPC_clock_0_in_arb_share_counter_next_value = DE4_SOPC_clock_0_in_firsttransfer ? (DE4_SOPC_clock_0_in_arb_share_set_values - 1) : |DE4_SOPC_clock_0_in_arb_share_counter ? (DE4_SOPC_clock_0_in_arb_share_counter - 1) : 0;

  //DE4_SOPC_clock_0_in_allgrants all slave grants, which is an e_mux
  assign DE4_SOPC_clock_0_in_allgrants = |DE4_SOPC_clock_0_in_grant_vector;

  //DE4_SOPC_clock_0_in_end_xfer assignment, which is an e_assign
  assign DE4_SOPC_clock_0_in_end_xfer = ~(DE4_SOPC_clock_0_in_waits_for_read | DE4_SOPC_clock_0_in_waits_for_write);

  //end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in = DE4_SOPC_clock_0_in_end_xfer & (~DE4_SOPC_clock_0_in_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //DE4_SOPC_clock_0_in_arb_share_counter arbitration counter enable, which is an e_assign
  assign DE4_SOPC_clock_0_in_arb_counter_enable = (end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in & DE4_SOPC_clock_0_in_allgrants) | (end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in & ~DE4_SOPC_clock_0_in_non_bursting_master_requests);

  //DE4_SOPC_clock_0_in_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_in_arb_share_counter <= 0;
      else if (DE4_SOPC_clock_0_in_arb_counter_enable)
          DE4_SOPC_clock_0_in_arb_share_counter <= DE4_SOPC_clock_0_in_arb_share_counter_next_value;
    end


  //DE4_SOPC_clock_0_in_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_in_slavearbiterlockenable <= 0;
      else if ((|DE4_SOPC_clock_0_in_master_qreq_vector & end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in) | (end_xfer_arb_share_counter_term_DE4_SOPC_clock_0_in & ~DE4_SOPC_clock_0_in_non_bursting_master_requests))
          DE4_SOPC_clock_0_in_slavearbiterlockenable <= |DE4_SOPC_clock_0_in_arb_share_counter_next_value;
    end


  //master_0/master DE4_SOPC_clock_0/in arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = DE4_SOPC_clock_0_in_slavearbiterlockenable & master_0_master_continuerequest;

  //DE4_SOPC_clock_0_in_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign DE4_SOPC_clock_0_in_slavearbiterlockenable2 = |DE4_SOPC_clock_0_in_arb_share_counter_next_value;

  //master_0/master DE4_SOPC_clock_0/in arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = DE4_SOPC_clock_0_in_slavearbiterlockenable2 & master_0_master_continuerequest;

  //DE4_SOPC_clock_0_in_any_continuerequest at least one master continues requesting, which is an e_assign
  assign DE4_SOPC_clock_0_in_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_DE4_SOPC_clock_0_in = master_0_requests_DE4_SOPC_clock_0_in & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))));
  //local readdatavalid master_0_read_data_valid_DE4_SOPC_clock_0_in, which is an e_mux
  assign master_0_read_data_valid_DE4_SOPC_clock_0_in = master_0_granted_DE4_SOPC_clock_0_in & master_0_master_read & ~DE4_SOPC_clock_0_in_waits_for_read;

  //DE4_SOPC_clock_0_in_writedata mux, which is an e_mux
  assign DE4_SOPC_clock_0_in_writedata = master_0_master_writedata;

  //assign DE4_SOPC_clock_0_in_endofpacket_from_sa = DE4_SOPC_clock_0_in_endofpacket so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign DE4_SOPC_clock_0_in_endofpacket_from_sa = DE4_SOPC_clock_0_in_endofpacket;

  //master is always granted when requested
  assign master_0_granted_DE4_SOPC_clock_0_in = master_0_qualified_request_DE4_SOPC_clock_0_in;

  //master_0/master saved-grant DE4_SOPC_clock_0/in, which is an e_assign
  assign master_0_saved_grant_DE4_SOPC_clock_0_in = master_0_requests_DE4_SOPC_clock_0_in;

  //allow new arb cycle for DE4_SOPC_clock_0/in, which is an e_assign
  assign DE4_SOPC_clock_0_in_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign DE4_SOPC_clock_0_in_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign DE4_SOPC_clock_0_in_master_qreq_vector = 1;

  //DE4_SOPC_clock_0_in_reset_n assignment, which is an e_assign
  assign DE4_SOPC_clock_0_in_reset_n = reset_n;

  //DE4_SOPC_clock_0_in_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_clock_0_in_firsttransfer = DE4_SOPC_clock_0_in_begins_xfer ? DE4_SOPC_clock_0_in_unreg_firsttransfer : DE4_SOPC_clock_0_in_reg_firsttransfer;

  //DE4_SOPC_clock_0_in_unreg_firsttransfer first transaction, which is an e_assign
  assign DE4_SOPC_clock_0_in_unreg_firsttransfer = ~(DE4_SOPC_clock_0_in_slavearbiterlockenable & DE4_SOPC_clock_0_in_any_continuerequest);

  //DE4_SOPC_clock_0_in_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_in_reg_firsttransfer <= 1'b1;
      else if (DE4_SOPC_clock_0_in_begins_xfer)
          DE4_SOPC_clock_0_in_reg_firsttransfer <= DE4_SOPC_clock_0_in_unreg_firsttransfer;
    end


  //DE4_SOPC_clock_0_in_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign DE4_SOPC_clock_0_in_beginbursttransfer_internal = DE4_SOPC_clock_0_in_begins_xfer;

  //DE4_SOPC_clock_0_in_read assignment, which is an e_mux
  assign DE4_SOPC_clock_0_in_read = master_0_granted_DE4_SOPC_clock_0_in & master_0_master_read;

  //DE4_SOPC_clock_0_in_write assignment, which is an e_mux
  assign DE4_SOPC_clock_0_in_write = master_0_granted_DE4_SOPC_clock_0_in & master_0_master_write;

  assign shifted_address_to_DE4_SOPC_clock_0_in_from_master_0_master = master_0_master_address_to_slave;
  //DE4_SOPC_clock_0_in_address mux, which is an e_mux
  assign DE4_SOPC_clock_0_in_address = shifted_address_to_DE4_SOPC_clock_0_in_from_master_0_master >> 2;

  //slaveid DE4_SOPC_clock_0_in_nativeaddress nativeaddress mux, which is an e_mux
  assign DE4_SOPC_clock_0_in_nativeaddress = master_0_master_address_to_slave >> 2;

  //d1_DE4_SOPC_clock_0_in_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_DE4_SOPC_clock_0_in_end_xfer <= 1;
      else 
        d1_DE4_SOPC_clock_0_in_end_xfer <= DE4_SOPC_clock_0_in_end_xfer;
    end


  //DE4_SOPC_clock_0_in_waits_for_read in a cycle, which is an e_mux
  assign DE4_SOPC_clock_0_in_waits_for_read = DE4_SOPC_clock_0_in_in_a_read_cycle & DE4_SOPC_clock_0_in_waitrequest_from_sa;

  //DE4_SOPC_clock_0_in_in_a_read_cycle assignment, which is an e_assign
  assign DE4_SOPC_clock_0_in_in_a_read_cycle = master_0_granted_DE4_SOPC_clock_0_in & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = DE4_SOPC_clock_0_in_in_a_read_cycle;

  //DE4_SOPC_clock_0_in_waits_for_write in a cycle, which is an e_mux
  assign DE4_SOPC_clock_0_in_waits_for_write = DE4_SOPC_clock_0_in_in_a_write_cycle & DE4_SOPC_clock_0_in_waitrequest_from_sa;

  //DE4_SOPC_clock_0_in_in_a_write_cycle assignment, which is an e_assign
  assign DE4_SOPC_clock_0_in_in_a_write_cycle = master_0_granted_DE4_SOPC_clock_0_in & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = DE4_SOPC_clock_0_in_in_a_write_cycle;

  assign wait_for_DE4_SOPC_clock_0_in_counter = 0;
  //DE4_SOPC_clock_0_in_byteenable byte enable port mux, which is an e_mux
  assign DE4_SOPC_clock_0_in_byteenable = (master_0_granted_DE4_SOPC_clock_0_in)? master_0_master_byteenable :
    -1;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_clock_0/in enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_clock_0_out_arbitrator (
                                         // inputs:
                                          DE4_SOPC_clock_0_out_address,
                                          DE4_SOPC_clock_0_out_byteenable,
                                          DE4_SOPC_clock_0_out_granted_pll_s1,
                                          DE4_SOPC_clock_0_out_qualified_request_pll_s1,
                                          DE4_SOPC_clock_0_out_read,
                                          DE4_SOPC_clock_0_out_read_data_valid_pll_s1,
                                          DE4_SOPC_clock_0_out_requests_pll_s1,
                                          DE4_SOPC_clock_0_out_write,
                                          DE4_SOPC_clock_0_out_writedata,
                                          clk,
                                          d1_pll_s1_end_xfer,
                                          pll_s1_readdata_from_sa,
                                          reset_n,

                                         // outputs:
                                          DE4_SOPC_clock_0_out_address_to_slave,
                                          DE4_SOPC_clock_0_out_readdata,
                                          DE4_SOPC_clock_0_out_reset_n,
                                          DE4_SOPC_clock_0_out_waitrequest
                                       )
;

  output  [  3: 0] DE4_SOPC_clock_0_out_address_to_slave;
  output  [ 15: 0] DE4_SOPC_clock_0_out_readdata;
  output           DE4_SOPC_clock_0_out_reset_n;
  output           DE4_SOPC_clock_0_out_waitrequest;
  input   [  3: 0] DE4_SOPC_clock_0_out_address;
  input   [  1: 0] DE4_SOPC_clock_0_out_byteenable;
  input            DE4_SOPC_clock_0_out_granted_pll_s1;
  input            DE4_SOPC_clock_0_out_qualified_request_pll_s1;
  input            DE4_SOPC_clock_0_out_read;
  input            DE4_SOPC_clock_0_out_read_data_valid_pll_s1;
  input            DE4_SOPC_clock_0_out_requests_pll_s1;
  input            DE4_SOPC_clock_0_out_write;
  input   [ 15: 0] DE4_SOPC_clock_0_out_writedata;
  input            clk;
  input            d1_pll_s1_end_xfer;
  input   [ 15: 0] pll_s1_readdata_from_sa;
  input            reset_n;

  reg     [  3: 0] DE4_SOPC_clock_0_out_address_last_time;
  wire    [  3: 0] DE4_SOPC_clock_0_out_address_to_slave;
  reg     [  1: 0] DE4_SOPC_clock_0_out_byteenable_last_time;
  reg              DE4_SOPC_clock_0_out_read_last_time;
  wire    [ 15: 0] DE4_SOPC_clock_0_out_readdata;
  wire             DE4_SOPC_clock_0_out_reset_n;
  wire             DE4_SOPC_clock_0_out_run;
  wire             DE4_SOPC_clock_0_out_waitrequest;
  reg              DE4_SOPC_clock_0_out_write_last_time;
  reg     [ 15: 0] DE4_SOPC_clock_0_out_writedata_last_time;
  reg              active_and_waiting_last_time;
  wire             r_1;
  //r_1 master_run cascaded wait assignment, which is an e_assign
  assign r_1 = 1 & ((~DE4_SOPC_clock_0_out_qualified_request_pll_s1 | ~DE4_SOPC_clock_0_out_read | (1 & ~d1_pll_s1_end_xfer & DE4_SOPC_clock_0_out_read))) & ((~DE4_SOPC_clock_0_out_qualified_request_pll_s1 | ~DE4_SOPC_clock_0_out_write | (1 & DE4_SOPC_clock_0_out_write)));

  //cascaded wait assignment, which is an e_assign
  assign DE4_SOPC_clock_0_out_run = r_1;

  //optimize select-logic by passing only those address bits which matter.
  assign DE4_SOPC_clock_0_out_address_to_slave = DE4_SOPC_clock_0_out_address;

  //DE4_SOPC_clock_0/out readdata mux, which is an e_mux
  assign DE4_SOPC_clock_0_out_readdata = pll_s1_readdata_from_sa;

  //actual waitrequest port, which is an e_assign
  assign DE4_SOPC_clock_0_out_waitrequest = ~DE4_SOPC_clock_0_out_run;

  //DE4_SOPC_clock_0_out_reset_n assignment, which is an e_assign
  assign DE4_SOPC_clock_0_out_reset_n = reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //DE4_SOPC_clock_0_out_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_out_address_last_time <= 0;
      else 
        DE4_SOPC_clock_0_out_address_last_time <= DE4_SOPC_clock_0_out_address;
    end


  //DE4_SOPC_clock_0/out waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= DE4_SOPC_clock_0_out_waitrequest & (DE4_SOPC_clock_0_out_read | DE4_SOPC_clock_0_out_write);
    end


  //DE4_SOPC_clock_0_out_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_clock_0_out_address != DE4_SOPC_clock_0_out_address_last_time))
        begin
          $write("%0d ns: DE4_SOPC_clock_0_out_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_clock_0_out_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_out_byteenable_last_time <= 0;
      else 
        DE4_SOPC_clock_0_out_byteenable_last_time <= DE4_SOPC_clock_0_out_byteenable;
    end


  //DE4_SOPC_clock_0_out_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_clock_0_out_byteenable != DE4_SOPC_clock_0_out_byteenable_last_time))
        begin
          $write("%0d ns: DE4_SOPC_clock_0_out_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_clock_0_out_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_out_read_last_time <= 0;
      else 
        DE4_SOPC_clock_0_out_read_last_time <= DE4_SOPC_clock_0_out_read;
    end


  //DE4_SOPC_clock_0_out_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_clock_0_out_read != DE4_SOPC_clock_0_out_read_last_time))
        begin
          $write("%0d ns: DE4_SOPC_clock_0_out_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_clock_0_out_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_out_write_last_time <= 0;
      else 
        DE4_SOPC_clock_0_out_write_last_time <= DE4_SOPC_clock_0_out_write;
    end


  //DE4_SOPC_clock_0_out_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_clock_0_out_write != DE4_SOPC_clock_0_out_write_last_time))
        begin
          $write("%0d ns: DE4_SOPC_clock_0_out_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //DE4_SOPC_clock_0_out_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          DE4_SOPC_clock_0_out_writedata_last_time <= 0;
      else 
        DE4_SOPC_clock_0_out_writedata_last_time <= DE4_SOPC_clock_0_out_writedata;
    end


  //DE4_SOPC_clock_0_out_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (DE4_SOPC_clock_0_out_writedata != DE4_SOPC_clock_0_out_writedata_last_time) & DE4_SOPC_clock_0_out_write)
        begin
          $write("%0d ns: DE4_SOPC_clock_0_out_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_DE4_SOPC_burst_0_downstream_to_ethernet_port_interface_0_avalon_slave_module (
                                                                                                   // inputs:
                                                                                                    clear_fifo,
                                                                                                    clk,
                                                                                                    data_in,
                                                                                                    read,
                                                                                                    reset_n,
                                                                                                    sync_reset,
                                                                                                    write,

                                                                                                   // outputs:
                                                                                                    data_out,
                                                                                                    empty,
                                                                                                    fifo_contains_ones_n,
                                                                                                    full
                                                                                                 )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  wire             full_1;
  reg     [  1: 0] how_many_ones;
  wire    [  1: 0] one_count_minus_one;
  wire    [  1: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  reg              stage_0;
  wire    [  1: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_0;
  assign empty = !full_0;
  assign full_1 = 0;
  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    0;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_slave_arbitrator (
                                                           // inputs:
                                                            DE4_SOPC_burst_0_downstream_address_to_slave,
                                                            DE4_SOPC_burst_0_downstream_arbitrationshare,
                                                            DE4_SOPC_burst_0_downstream_burstcount,
                                                            DE4_SOPC_burst_0_downstream_latency_counter,
                                                            DE4_SOPC_burst_0_downstream_read,
                                                            DE4_SOPC_burst_0_downstream_write,
                                                            DE4_SOPC_burst_0_downstream_writedata,
                                                            clk,
                                                            ethernet_port_interface_0_avalon_slave_readdata,
                                                            ethernet_port_interface_0_avalon_slave_readdatavalid,
                                                            ethernet_port_interface_0_avalon_slave_waitrequest,
                                                            reset_n,

                                                           // outputs:
                                                            DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave,
                                                            DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave,
                                                            DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave,
                                                            DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register,
                                                            DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave,
                                                            d1_ethernet_port_interface_0_avalon_slave_end_xfer,
                                                            ethernet_port_interface_0_avalon_slave_address,
                                                            ethernet_port_interface_0_avalon_slave_read,
                                                            ethernet_port_interface_0_avalon_slave_readdata_from_sa,
                                                            ethernet_port_interface_0_avalon_slave_waitrequest_from_sa,
                                                            ethernet_port_interface_0_avalon_slave_write,
                                                            ethernet_port_interface_0_avalon_slave_writedata
                                                         )
;

  output           DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave;
  output           DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave;
  output           DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave;
  output           DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register;
  output           DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave;
  output           d1_ethernet_port_interface_0_avalon_slave_end_xfer;
  output  [ 26: 0] ethernet_port_interface_0_avalon_slave_address;
  output           ethernet_port_interface_0_avalon_slave_read;
  output  [ 31: 0] ethernet_port_interface_0_avalon_slave_readdata_from_sa;
  output           ethernet_port_interface_0_avalon_slave_waitrequest_from_sa;
  output           ethernet_port_interface_0_avalon_slave_write;
  output  [ 31: 0] ethernet_port_interface_0_avalon_slave_writedata;
  input   [ 28: 0] DE4_SOPC_burst_0_downstream_address_to_slave;
  input   [ 10: 0] DE4_SOPC_burst_0_downstream_arbitrationshare;
  input            DE4_SOPC_burst_0_downstream_burstcount;
  input            DE4_SOPC_burst_0_downstream_latency_counter;
  input            DE4_SOPC_burst_0_downstream_read;
  input            DE4_SOPC_burst_0_downstream_write;
  input   [ 31: 0] DE4_SOPC_burst_0_downstream_writedata;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_slave_readdata;
  input            ethernet_port_interface_0_avalon_slave_readdatavalid;
  input            ethernet_port_interface_0_avalon_slave_waitrequest;
  input            reset_n;

  wire             DE4_SOPC_burst_0_downstream_arbiterlock;
  wire             DE4_SOPC_burst_0_downstream_arbiterlock2;
  wire             DE4_SOPC_burst_0_downstream_continuerequest;
  wire             DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_rdv_fifo_empty_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_rdv_fifo_output_from_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register;
  wire             DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_saved_grant_ethernet_port_interface_0_avalon_slave;
  reg              d1_ethernet_port_interface_0_avalon_slave_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave;
  wire    [ 26: 0] ethernet_port_interface_0_avalon_slave_address;
  wire             ethernet_port_interface_0_avalon_slave_allgrants;
  wire             ethernet_port_interface_0_avalon_slave_allow_new_arb_cycle;
  wire             ethernet_port_interface_0_avalon_slave_any_bursting_master_saved_grant;
  wire             ethernet_port_interface_0_avalon_slave_any_continuerequest;
  wire             ethernet_port_interface_0_avalon_slave_arb_counter_enable;
  reg     [ 10: 0] ethernet_port_interface_0_avalon_slave_arb_share_counter;
  wire    [ 10: 0] ethernet_port_interface_0_avalon_slave_arb_share_counter_next_value;
  wire    [ 10: 0] ethernet_port_interface_0_avalon_slave_arb_share_set_values;
  wire             ethernet_port_interface_0_avalon_slave_beginbursttransfer_internal;
  wire             ethernet_port_interface_0_avalon_slave_begins_xfer;
  wire             ethernet_port_interface_0_avalon_slave_end_xfer;
  wire             ethernet_port_interface_0_avalon_slave_firsttransfer;
  wire             ethernet_port_interface_0_avalon_slave_grant_vector;
  wire             ethernet_port_interface_0_avalon_slave_in_a_read_cycle;
  wire             ethernet_port_interface_0_avalon_slave_in_a_write_cycle;
  wire             ethernet_port_interface_0_avalon_slave_master_qreq_vector;
  wire             ethernet_port_interface_0_avalon_slave_move_on_to_next_transaction;
  wire             ethernet_port_interface_0_avalon_slave_non_bursting_master_requests;
  wire             ethernet_port_interface_0_avalon_slave_read;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_readdata_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_readdatavalid_from_sa;
  reg              ethernet_port_interface_0_avalon_slave_reg_firsttransfer;
  reg              ethernet_port_interface_0_avalon_slave_slavearbiterlockenable;
  wire             ethernet_port_interface_0_avalon_slave_slavearbiterlockenable2;
  wire             ethernet_port_interface_0_avalon_slave_unreg_firsttransfer;
  wire             ethernet_port_interface_0_avalon_slave_waitrequest_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_waits_for_read;
  wire             ethernet_port_interface_0_avalon_slave_waits_for_write;
  wire             ethernet_port_interface_0_avalon_slave_write;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_writedata;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire    [ 28: 0] shifted_address_to_ethernet_port_interface_0_avalon_slave_from_DE4_SOPC_burst_0_downstream;
  wire             wait_for_ethernet_port_interface_0_avalon_slave_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~ethernet_port_interface_0_avalon_slave_end_xfer;
    end


  assign ethernet_port_interface_0_avalon_slave_begins_xfer = ~d1_reasons_to_wait & ((DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave));
  //assign ethernet_port_interface_0_avalon_slave_readdata_from_sa = ethernet_port_interface_0_avalon_slave_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_readdata_from_sa = ethernet_port_interface_0_avalon_slave_readdata;

  assign DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave = (1) & (DE4_SOPC_burst_0_downstream_read | DE4_SOPC_burst_0_downstream_write);
  //assign ethernet_port_interface_0_avalon_slave_waitrequest_from_sa = ethernet_port_interface_0_avalon_slave_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_waitrequest_from_sa = ethernet_port_interface_0_avalon_slave_waitrequest;

  //assign ethernet_port_interface_0_avalon_slave_readdatavalid_from_sa = ethernet_port_interface_0_avalon_slave_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_readdatavalid_from_sa = ethernet_port_interface_0_avalon_slave_readdatavalid;

  //ethernet_port_interface_0_avalon_slave_arb_share_counter set values, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_arb_share_set_values = (DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave)? DE4_SOPC_burst_0_downstream_arbitrationshare :
    1;

  //ethernet_port_interface_0_avalon_slave_non_bursting_master_requests mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_non_bursting_master_requests = 0;

  //ethernet_port_interface_0_avalon_slave_any_bursting_master_saved_grant mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_any_bursting_master_saved_grant = DE4_SOPC_burst_0_downstream_saved_grant_ethernet_port_interface_0_avalon_slave;

  //ethernet_port_interface_0_avalon_slave_arb_share_counter_next_value assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_arb_share_counter_next_value = ethernet_port_interface_0_avalon_slave_firsttransfer ? (ethernet_port_interface_0_avalon_slave_arb_share_set_values - 1) : |ethernet_port_interface_0_avalon_slave_arb_share_counter ? (ethernet_port_interface_0_avalon_slave_arb_share_counter - 1) : 0;

  //ethernet_port_interface_0_avalon_slave_allgrants all slave grants, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_allgrants = |ethernet_port_interface_0_avalon_slave_grant_vector;

  //ethernet_port_interface_0_avalon_slave_end_xfer assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_end_xfer = ~(ethernet_port_interface_0_avalon_slave_waits_for_read | ethernet_port_interface_0_avalon_slave_waits_for_write);

  //end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave = ethernet_port_interface_0_avalon_slave_end_xfer & (~ethernet_port_interface_0_avalon_slave_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //ethernet_port_interface_0_avalon_slave_arb_share_counter arbitration counter enable, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_arb_counter_enable = (end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave & ethernet_port_interface_0_avalon_slave_allgrants) | (end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave & ~ethernet_port_interface_0_avalon_slave_non_bursting_master_requests);

  //ethernet_port_interface_0_avalon_slave_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_slave_arb_share_counter <= 0;
      else if (ethernet_port_interface_0_avalon_slave_arb_counter_enable)
          ethernet_port_interface_0_avalon_slave_arb_share_counter <= ethernet_port_interface_0_avalon_slave_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0_avalon_slave_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_slave_slavearbiterlockenable <= 0;
      else if ((|ethernet_port_interface_0_avalon_slave_master_qreq_vector & end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave) | (end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave & ~ethernet_port_interface_0_avalon_slave_non_bursting_master_requests))
          ethernet_port_interface_0_avalon_slave_slavearbiterlockenable <= |ethernet_port_interface_0_avalon_slave_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_0/downstream ethernet_port_interface_0/avalon_slave arbiterlock, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_arbiterlock = ethernet_port_interface_0_avalon_slave_slavearbiterlockenable & DE4_SOPC_burst_0_downstream_continuerequest;

  //ethernet_port_interface_0_avalon_slave_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_slavearbiterlockenable2 = |ethernet_port_interface_0_avalon_slave_arb_share_counter_next_value;

  //DE4_SOPC_burst_0/downstream ethernet_port_interface_0/avalon_slave arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_arbiterlock2 = ethernet_port_interface_0_avalon_slave_slavearbiterlockenable2 & DE4_SOPC_burst_0_downstream_continuerequest;

  //ethernet_port_interface_0_avalon_slave_any_continuerequest at least one master continues requesting, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_any_continuerequest = 1;

  //DE4_SOPC_burst_0_downstream_continuerequest continued request, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_continuerequest = 1;

  assign DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave = DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave & ~((DE4_SOPC_burst_0_downstream_read & ((DE4_SOPC_burst_0_downstream_latency_counter != 0) | (1 < DE4_SOPC_burst_0_downstream_latency_counter))));
  //unique name for ethernet_port_interface_0_avalon_slave_move_on_to_next_transaction, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_move_on_to_next_transaction = ethernet_port_interface_0_avalon_slave_readdatavalid_from_sa;

  //rdv_fifo_for_DE4_SOPC_burst_0_downstream_to_ethernet_port_interface_0_avalon_slave, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_DE4_SOPC_burst_0_downstream_to_ethernet_port_interface_0_avalon_slave_module rdv_fifo_for_DE4_SOPC_burst_0_downstream_to_ethernet_port_interface_0_avalon_slave
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave),
      .data_out             (DE4_SOPC_burst_0_downstream_rdv_fifo_output_from_ethernet_port_interface_0_avalon_slave),
      .empty                (),
      .fifo_contains_ones_n (DE4_SOPC_burst_0_downstream_rdv_fifo_empty_ethernet_port_interface_0_avalon_slave),
      .full                 (),
      .read                 (ethernet_port_interface_0_avalon_slave_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~ethernet_port_interface_0_avalon_slave_waits_for_read)
    );

  assign DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register = ~DE4_SOPC_burst_0_downstream_rdv_fifo_empty_ethernet_port_interface_0_avalon_slave;
  //local readdatavalid DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave, which is an e_mux
  assign DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave = ethernet_port_interface_0_avalon_slave_readdatavalid_from_sa;

  //ethernet_port_interface_0_avalon_slave_writedata mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_writedata = DE4_SOPC_burst_0_downstream_writedata;

  //master is always granted when requested
  assign DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave = DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave;

  //DE4_SOPC_burst_0/downstream saved-grant ethernet_port_interface_0/avalon_slave, which is an e_assign
  assign DE4_SOPC_burst_0_downstream_saved_grant_ethernet_port_interface_0_avalon_slave = DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave;

  //allow new arb cycle for ethernet_port_interface_0/avalon_slave, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign ethernet_port_interface_0_avalon_slave_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign ethernet_port_interface_0_avalon_slave_master_qreq_vector = 1;

  //ethernet_port_interface_0_avalon_slave_firsttransfer first transaction, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_firsttransfer = ethernet_port_interface_0_avalon_slave_begins_xfer ? ethernet_port_interface_0_avalon_slave_unreg_firsttransfer : ethernet_port_interface_0_avalon_slave_reg_firsttransfer;

  //ethernet_port_interface_0_avalon_slave_unreg_firsttransfer first transaction, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_unreg_firsttransfer = ~(ethernet_port_interface_0_avalon_slave_slavearbiterlockenable & ethernet_port_interface_0_avalon_slave_any_continuerequest);

  //ethernet_port_interface_0_avalon_slave_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_slave_reg_firsttransfer <= 1'b1;
      else if (ethernet_port_interface_0_avalon_slave_begins_xfer)
          ethernet_port_interface_0_avalon_slave_reg_firsttransfer <= ethernet_port_interface_0_avalon_slave_unreg_firsttransfer;
    end


  //ethernet_port_interface_0_avalon_slave_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_beginbursttransfer_internal = ethernet_port_interface_0_avalon_slave_begins_xfer;

  //ethernet_port_interface_0_avalon_slave_read assignment, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_read = DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave & DE4_SOPC_burst_0_downstream_read;

  //ethernet_port_interface_0_avalon_slave_write assignment, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_write = DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave & DE4_SOPC_burst_0_downstream_write;

  assign shifted_address_to_ethernet_port_interface_0_avalon_slave_from_DE4_SOPC_burst_0_downstream = DE4_SOPC_burst_0_downstream_address_to_slave;
  //ethernet_port_interface_0_avalon_slave_address mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_address = shifted_address_to_ethernet_port_interface_0_avalon_slave_from_DE4_SOPC_burst_0_downstream >> 2;

  //d1_ethernet_port_interface_0_avalon_slave_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_ethernet_port_interface_0_avalon_slave_end_xfer <= 1;
      else 
        d1_ethernet_port_interface_0_avalon_slave_end_xfer <= ethernet_port_interface_0_avalon_slave_end_xfer;
    end


  //ethernet_port_interface_0_avalon_slave_waits_for_read in a cycle, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_waits_for_read = ethernet_port_interface_0_avalon_slave_in_a_read_cycle & ethernet_port_interface_0_avalon_slave_waitrequest_from_sa;

  //ethernet_port_interface_0_avalon_slave_in_a_read_cycle assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_in_a_read_cycle = DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave & DE4_SOPC_burst_0_downstream_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = ethernet_port_interface_0_avalon_slave_in_a_read_cycle;

  //ethernet_port_interface_0_avalon_slave_waits_for_write in a cycle, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_waits_for_write = ethernet_port_interface_0_avalon_slave_in_a_write_cycle & ethernet_port_interface_0_avalon_slave_waitrequest_from_sa;

  //ethernet_port_interface_0_avalon_slave_in_a_write_cycle assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_in_a_write_cycle = DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave & DE4_SOPC_burst_0_downstream_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = ethernet_port_interface_0_avalon_slave_in_a_write_cycle;

  assign wait_for_ethernet_port_interface_0_avalon_slave_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //ethernet_port_interface_0/avalon_slave enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //DE4_SOPC_burst_0/downstream non-zero arbitrationshare assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave && (DE4_SOPC_burst_0_downstream_arbitrationshare == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_0/downstream drove 0 on its 'arbitrationshare' port while accessing slave ethernet_port_interface_0/avalon_slave", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_0/downstream non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave && (DE4_SOPC_burst_0_downstream_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_0/downstream drove 0 on its 'burstcount' port while accessing slave ethernet_port_interface_0/avalon_slave", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_DE4_SOPC_burst_1_downstream_to_ethernet_port_interface_0_avalon_slave_1_module (
                                                                                                     // inputs:
                                                                                                      clear_fifo,
                                                                                                      clk,
                                                                                                      data_in,
                                                                                                      read,
                                                                                                      reset_n,
                                                                                                      sync_reset,
                                                                                                      write,

                                                                                                     // outputs:
                                                                                                      data_out,
                                                                                                      empty,
                                                                                                      fifo_contains_ones_n,
                                                                                                      full
                                                                                                   )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  wire             full_1;
  reg     [  1: 0] how_many_ones;
  wire    [  1: 0] one_count_minus_one;
  wire    [  1: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  reg              stage_0;
  wire    [  1: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_0;
  assign empty = !full_0;
  assign full_1 = 0;
  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    0;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_slave_1_arbitrator (
                                                             // inputs:
                                                              DE4_SOPC_burst_1_downstream_address_to_slave,
                                                              DE4_SOPC_burst_1_downstream_arbitrationshare,
                                                              DE4_SOPC_burst_1_downstream_burstcount,
                                                              DE4_SOPC_burst_1_downstream_latency_counter,
                                                              DE4_SOPC_burst_1_downstream_read,
                                                              DE4_SOPC_burst_1_downstream_write,
                                                              DE4_SOPC_burst_1_downstream_writedata,
                                                              clk,
                                                              ethernet_port_interface_0_avalon_slave_1_readdata,
                                                              ethernet_port_interface_0_avalon_slave_1_readdatavalid,
                                                              ethernet_port_interface_0_avalon_slave_1_waitrequest,
                                                              reset_n,

                                                             // outputs:
                                                              DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1,
                                                              DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1,
                                                              DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1,
                                                              DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register,
                                                              DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1,
                                                              d1_ethernet_port_interface_0_avalon_slave_1_end_xfer,
                                                              ethernet_port_interface_0_avalon_slave_1_address,
                                                              ethernet_port_interface_0_avalon_slave_1_read,
                                                              ethernet_port_interface_0_avalon_slave_1_readdata_from_sa,
                                                              ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa,
                                                              ethernet_port_interface_0_avalon_slave_1_write,
                                                              ethernet_port_interface_0_avalon_slave_1_writedata
                                                           )
;

  output           DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1;
  output           DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1;
  output           DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1;
  output           DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register;
  output           DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1;
  output           d1_ethernet_port_interface_0_avalon_slave_1_end_xfer;
  output  [ 26: 0] ethernet_port_interface_0_avalon_slave_1_address;
  output           ethernet_port_interface_0_avalon_slave_1_read;
  output  [ 31: 0] ethernet_port_interface_0_avalon_slave_1_readdata_from_sa;
  output           ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa;
  output           ethernet_port_interface_0_avalon_slave_1_write;
  output  [ 31: 0] ethernet_port_interface_0_avalon_slave_1_writedata;
  input   [ 28: 0] DE4_SOPC_burst_1_downstream_address_to_slave;
  input   [ 10: 0] DE4_SOPC_burst_1_downstream_arbitrationshare;
  input            DE4_SOPC_burst_1_downstream_burstcount;
  input            DE4_SOPC_burst_1_downstream_latency_counter;
  input            DE4_SOPC_burst_1_downstream_read;
  input            DE4_SOPC_burst_1_downstream_write;
  input   [ 31: 0] DE4_SOPC_burst_1_downstream_writedata;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_slave_1_readdata;
  input            ethernet_port_interface_0_avalon_slave_1_readdatavalid;
  input            ethernet_port_interface_0_avalon_slave_1_waitrequest;
  input            reset_n;

  wire             DE4_SOPC_burst_1_downstream_arbiterlock;
  wire             DE4_SOPC_burst_1_downstream_arbiterlock2;
  wire             DE4_SOPC_burst_1_downstream_continuerequest;
  wire             DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_rdv_fifo_empty_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_rdv_fifo_output_from_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register;
  wire             DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_saved_grant_ethernet_port_interface_0_avalon_slave_1;
  reg              d1_ethernet_port_interface_0_avalon_slave_1_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1;
  wire    [ 26: 0] ethernet_port_interface_0_avalon_slave_1_address;
  wire             ethernet_port_interface_0_avalon_slave_1_allgrants;
  wire             ethernet_port_interface_0_avalon_slave_1_allow_new_arb_cycle;
  wire             ethernet_port_interface_0_avalon_slave_1_any_bursting_master_saved_grant;
  wire             ethernet_port_interface_0_avalon_slave_1_any_continuerequest;
  wire             ethernet_port_interface_0_avalon_slave_1_arb_counter_enable;
  reg     [ 10: 0] ethernet_port_interface_0_avalon_slave_1_arb_share_counter;
  wire    [ 10: 0] ethernet_port_interface_0_avalon_slave_1_arb_share_counter_next_value;
  wire    [ 10: 0] ethernet_port_interface_0_avalon_slave_1_arb_share_set_values;
  wire             ethernet_port_interface_0_avalon_slave_1_beginbursttransfer_internal;
  wire             ethernet_port_interface_0_avalon_slave_1_begins_xfer;
  wire             ethernet_port_interface_0_avalon_slave_1_end_xfer;
  wire             ethernet_port_interface_0_avalon_slave_1_firsttransfer;
  wire             ethernet_port_interface_0_avalon_slave_1_grant_vector;
  wire             ethernet_port_interface_0_avalon_slave_1_in_a_read_cycle;
  wire             ethernet_port_interface_0_avalon_slave_1_in_a_write_cycle;
  wire             ethernet_port_interface_0_avalon_slave_1_master_qreq_vector;
  wire             ethernet_port_interface_0_avalon_slave_1_move_on_to_next_transaction;
  wire             ethernet_port_interface_0_avalon_slave_1_non_bursting_master_requests;
  wire             ethernet_port_interface_0_avalon_slave_1_read;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_1_readdata_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_1_readdatavalid_from_sa;
  reg              ethernet_port_interface_0_avalon_slave_1_reg_firsttransfer;
  reg              ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable;
  wire             ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable2;
  wire             ethernet_port_interface_0_avalon_slave_1_unreg_firsttransfer;
  wire             ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_1_waits_for_read;
  wire             ethernet_port_interface_0_avalon_slave_1_waits_for_write;
  wire             ethernet_port_interface_0_avalon_slave_1_write;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_1_writedata;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire    [ 28: 0] shifted_address_to_ethernet_port_interface_0_avalon_slave_1_from_DE4_SOPC_burst_1_downstream;
  wire             wait_for_ethernet_port_interface_0_avalon_slave_1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~ethernet_port_interface_0_avalon_slave_1_end_xfer;
    end


  assign ethernet_port_interface_0_avalon_slave_1_begins_xfer = ~d1_reasons_to_wait & ((DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1));
  //assign ethernet_port_interface_0_avalon_slave_1_readdata_from_sa = ethernet_port_interface_0_avalon_slave_1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_readdata_from_sa = ethernet_port_interface_0_avalon_slave_1_readdata;

  assign DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1 = (1) & (DE4_SOPC_burst_1_downstream_read | DE4_SOPC_burst_1_downstream_write);
  //assign ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa = ethernet_port_interface_0_avalon_slave_1_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa = ethernet_port_interface_0_avalon_slave_1_waitrequest;

  //assign ethernet_port_interface_0_avalon_slave_1_readdatavalid_from_sa = ethernet_port_interface_0_avalon_slave_1_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_readdatavalid_from_sa = ethernet_port_interface_0_avalon_slave_1_readdatavalid;

  //ethernet_port_interface_0_avalon_slave_1_arb_share_counter set values, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_arb_share_set_values = (DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1)? DE4_SOPC_burst_1_downstream_arbitrationshare :
    1;

  //ethernet_port_interface_0_avalon_slave_1_non_bursting_master_requests mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_non_bursting_master_requests = 0;

  //ethernet_port_interface_0_avalon_slave_1_any_bursting_master_saved_grant mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_any_bursting_master_saved_grant = DE4_SOPC_burst_1_downstream_saved_grant_ethernet_port_interface_0_avalon_slave_1;

  //ethernet_port_interface_0_avalon_slave_1_arb_share_counter_next_value assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_arb_share_counter_next_value = ethernet_port_interface_0_avalon_slave_1_firsttransfer ? (ethernet_port_interface_0_avalon_slave_1_arb_share_set_values - 1) : |ethernet_port_interface_0_avalon_slave_1_arb_share_counter ? (ethernet_port_interface_0_avalon_slave_1_arb_share_counter - 1) : 0;

  //ethernet_port_interface_0_avalon_slave_1_allgrants all slave grants, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_allgrants = |ethernet_port_interface_0_avalon_slave_1_grant_vector;

  //ethernet_port_interface_0_avalon_slave_1_end_xfer assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_end_xfer = ~(ethernet_port_interface_0_avalon_slave_1_waits_for_read | ethernet_port_interface_0_avalon_slave_1_waits_for_write);

  //end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1 = ethernet_port_interface_0_avalon_slave_1_end_xfer & (~ethernet_port_interface_0_avalon_slave_1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //ethernet_port_interface_0_avalon_slave_1_arb_share_counter arbitration counter enable, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_arb_counter_enable = (end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1 & ethernet_port_interface_0_avalon_slave_1_allgrants) | (end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1 & ~ethernet_port_interface_0_avalon_slave_1_non_bursting_master_requests);

  //ethernet_port_interface_0_avalon_slave_1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_slave_1_arb_share_counter <= 0;
      else if (ethernet_port_interface_0_avalon_slave_1_arb_counter_enable)
          ethernet_port_interface_0_avalon_slave_1_arb_share_counter <= ethernet_port_interface_0_avalon_slave_1_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable <= 0;
      else if ((|ethernet_port_interface_0_avalon_slave_1_master_qreq_vector & end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1) | (end_xfer_arb_share_counter_term_ethernet_port_interface_0_avalon_slave_1 & ~ethernet_port_interface_0_avalon_slave_1_non_bursting_master_requests))
          ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable <= |ethernet_port_interface_0_avalon_slave_1_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_1/downstream ethernet_port_interface_0/avalon_slave_1 arbiterlock, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_arbiterlock = ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable & DE4_SOPC_burst_1_downstream_continuerequest;

  //ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable2 = |ethernet_port_interface_0_avalon_slave_1_arb_share_counter_next_value;

  //DE4_SOPC_burst_1/downstream ethernet_port_interface_0/avalon_slave_1 arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_arbiterlock2 = ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable2 & DE4_SOPC_burst_1_downstream_continuerequest;

  //ethernet_port_interface_0_avalon_slave_1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_any_continuerequest = 1;

  //DE4_SOPC_burst_1_downstream_continuerequest continued request, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_continuerequest = 1;

  assign DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1 = DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1 & ~((DE4_SOPC_burst_1_downstream_read & ((DE4_SOPC_burst_1_downstream_latency_counter != 0) | (1 < DE4_SOPC_burst_1_downstream_latency_counter))));
  //unique name for ethernet_port_interface_0_avalon_slave_1_move_on_to_next_transaction, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_move_on_to_next_transaction = ethernet_port_interface_0_avalon_slave_1_readdatavalid_from_sa;

  //rdv_fifo_for_DE4_SOPC_burst_1_downstream_to_ethernet_port_interface_0_avalon_slave_1, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_DE4_SOPC_burst_1_downstream_to_ethernet_port_interface_0_avalon_slave_1_module rdv_fifo_for_DE4_SOPC_burst_1_downstream_to_ethernet_port_interface_0_avalon_slave_1
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1),
      .data_out             (DE4_SOPC_burst_1_downstream_rdv_fifo_output_from_ethernet_port_interface_0_avalon_slave_1),
      .empty                (),
      .fifo_contains_ones_n (DE4_SOPC_burst_1_downstream_rdv_fifo_empty_ethernet_port_interface_0_avalon_slave_1),
      .full                 (),
      .read                 (ethernet_port_interface_0_avalon_slave_1_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~ethernet_port_interface_0_avalon_slave_1_waits_for_read)
    );

  assign DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register = ~DE4_SOPC_burst_1_downstream_rdv_fifo_empty_ethernet_port_interface_0_avalon_slave_1;
  //local readdatavalid DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1, which is an e_mux
  assign DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1 = ethernet_port_interface_0_avalon_slave_1_readdatavalid_from_sa;

  //ethernet_port_interface_0_avalon_slave_1_writedata mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_writedata = DE4_SOPC_burst_1_downstream_writedata;

  //master is always granted when requested
  assign DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1 = DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1;

  //DE4_SOPC_burst_1/downstream saved-grant ethernet_port_interface_0/avalon_slave_1, which is an e_assign
  assign DE4_SOPC_burst_1_downstream_saved_grant_ethernet_port_interface_0_avalon_slave_1 = DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1;

  //allow new arb cycle for ethernet_port_interface_0/avalon_slave_1, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign ethernet_port_interface_0_avalon_slave_1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign ethernet_port_interface_0_avalon_slave_1_master_qreq_vector = 1;

  //ethernet_port_interface_0_avalon_slave_1_firsttransfer first transaction, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_firsttransfer = ethernet_port_interface_0_avalon_slave_1_begins_xfer ? ethernet_port_interface_0_avalon_slave_1_unreg_firsttransfer : ethernet_port_interface_0_avalon_slave_1_reg_firsttransfer;

  //ethernet_port_interface_0_avalon_slave_1_unreg_firsttransfer first transaction, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_unreg_firsttransfer = ~(ethernet_port_interface_0_avalon_slave_1_slavearbiterlockenable & ethernet_port_interface_0_avalon_slave_1_any_continuerequest);

  //ethernet_port_interface_0_avalon_slave_1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_slave_1_reg_firsttransfer <= 1'b1;
      else if (ethernet_port_interface_0_avalon_slave_1_begins_xfer)
          ethernet_port_interface_0_avalon_slave_1_reg_firsttransfer <= ethernet_port_interface_0_avalon_slave_1_unreg_firsttransfer;
    end


  //ethernet_port_interface_0_avalon_slave_1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_beginbursttransfer_internal = ethernet_port_interface_0_avalon_slave_1_begins_xfer;

  //ethernet_port_interface_0_avalon_slave_1_read assignment, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_read = DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1 & DE4_SOPC_burst_1_downstream_read;

  //ethernet_port_interface_0_avalon_slave_1_write assignment, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_write = DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1 & DE4_SOPC_burst_1_downstream_write;

  assign shifted_address_to_ethernet_port_interface_0_avalon_slave_1_from_DE4_SOPC_burst_1_downstream = DE4_SOPC_burst_1_downstream_address_to_slave;
  //ethernet_port_interface_0_avalon_slave_1_address mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_address = shifted_address_to_ethernet_port_interface_0_avalon_slave_1_from_DE4_SOPC_burst_1_downstream >> 2;

  //d1_ethernet_port_interface_0_avalon_slave_1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_ethernet_port_interface_0_avalon_slave_1_end_xfer <= 1;
      else 
        d1_ethernet_port_interface_0_avalon_slave_1_end_xfer <= ethernet_port_interface_0_avalon_slave_1_end_xfer;
    end


  //ethernet_port_interface_0_avalon_slave_1_waits_for_read in a cycle, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_waits_for_read = ethernet_port_interface_0_avalon_slave_1_in_a_read_cycle & ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa;

  //ethernet_port_interface_0_avalon_slave_1_in_a_read_cycle assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_in_a_read_cycle = DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1 & DE4_SOPC_burst_1_downstream_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = ethernet_port_interface_0_avalon_slave_1_in_a_read_cycle;

  //ethernet_port_interface_0_avalon_slave_1_waits_for_write in a cycle, which is an e_mux
  assign ethernet_port_interface_0_avalon_slave_1_waits_for_write = ethernet_port_interface_0_avalon_slave_1_in_a_write_cycle & ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa;

  //ethernet_port_interface_0_avalon_slave_1_in_a_write_cycle assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_slave_1_in_a_write_cycle = DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1 & DE4_SOPC_burst_1_downstream_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = ethernet_port_interface_0_avalon_slave_1_in_a_write_cycle;

  assign wait_for_ethernet_port_interface_0_avalon_slave_1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //ethernet_port_interface_0/avalon_slave_1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //DE4_SOPC_burst_1/downstream non-zero arbitrationshare assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1 && (DE4_SOPC_burst_1_downstream_arbitrationshare == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_1/downstream drove 0 on its 'arbitrationshare' port while accessing slave ethernet_port_interface_0/avalon_slave_1", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_1/downstream non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1 && (DE4_SOPC_burst_1_downstream_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_1/downstream drove 0 on its 'burstcount' port while accessing slave ethernet_port_interface_0/avalon_slave_1", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_sink_arbitrator (
                                                                    // inputs:
                                                                     clk,
                                                                     ethernet_port_interface_0_avalon_streaming_sink_ready,
                                                                     reset_n,
                                                                     tse_mac_receive_data,
                                                                     tse_mac_receive_endofpacket,
                                                                     tse_mac_receive_error,
                                                                     tse_mac_receive_startofpacket,
                                                                     tse_mac_receive_valid,

                                                                    // outputs:
                                                                     ethernet_port_interface_0_avalon_streaming_sink_data,
                                                                     ethernet_port_interface_0_avalon_streaming_sink_endofpacket,
                                                                     ethernet_port_interface_0_avalon_streaming_sink_error,
                                                                     ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa,
                                                                     ethernet_port_interface_0_avalon_streaming_sink_startofpacket,
                                                                     ethernet_port_interface_0_avalon_streaming_sink_valid
                                                                  )
;

  output  [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_data;
  output           ethernet_port_interface_0_avalon_streaming_sink_endofpacket;
  output  [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_error;
  output           ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa;
  output           ethernet_port_interface_0_avalon_streaming_sink_startofpacket;
  output           ethernet_port_interface_0_avalon_streaming_sink_valid;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_ready;
  input            reset_n;
  input   [  7: 0] tse_mac_receive_data;
  input            tse_mac_receive_endofpacket;
  input   [  5: 0] tse_mac_receive_error;
  input            tse_mac_receive_startofpacket;
  input            tse_mac_receive_valid;

  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_valid;
  //mux ethernet_port_interface_0_avalon_streaming_sink_data, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_data = tse_mac_receive_data;

  //mux ethernet_port_interface_0_avalon_streaming_sink_endofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_endofpacket = tse_mac_receive_endofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_error, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_error = tse_mac_receive_error;

  //assign ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_ready;

  //mux ethernet_port_interface_0_avalon_streaming_sink_startofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_startofpacket = tse_mac_receive_startofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_valid, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_valid = tse_mac_receive_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_sink_1_arbitrator (
                                                                      // inputs:
                                                                       clk,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_ready,
                                                                       reset_n,
                                                                       tse_mac1_receive_data,
                                                                       tse_mac1_receive_endofpacket,
                                                                       tse_mac1_receive_error,
                                                                       tse_mac1_receive_startofpacket,
                                                                       tse_mac1_receive_valid,

                                                                      // outputs:
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_data,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_error,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_1_valid
                                                                    )
;

  output  [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_1_data;
  output           ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket;
  output  [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_1_error;
  output           ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa;
  output           ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket;
  output           ethernet_port_interface_0_avalon_streaming_sink_1_valid;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_1_ready;
  input            reset_n;
  input   [  7: 0] tse_mac1_receive_data;
  input            tse_mac1_receive_endofpacket;
  input   [  5: 0] tse_mac1_receive_error;
  input            tse_mac1_receive_startofpacket;
  input            tse_mac1_receive_valid;

  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_1_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_1_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_valid;
  //mux ethernet_port_interface_0_avalon_streaming_sink_1_data, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_1_data = tse_mac1_receive_data;

  //mux ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket = tse_mac1_receive_endofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_1_error, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_1_error = tse_mac1_receive_error;

  //assign ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_1_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_1_ready;

  //mux ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket = tse_mac1_receive_startofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_1_valid, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_1_valid = tse_mac1_receive_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_sink_2_arbitrator (
                                                                      // inputs:
                                                                       clk,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_ready,
                                                                       reset_n,
                                                                       tse_mac2_receive_data,
                                                                       tse_mac2_receive_endofpacket,
                                                                       tse_mac2_receive_error,
                                                                       tse_mac2_receive_startofpacket,
                                                                       tse_mac2_receive_valid,

                                                                      // outputs:
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_data,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_error,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_2_valid
                                                                    )
;

  output  [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_2_data;
  output           ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket;
  output  [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_2_error;
  output           ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa;
  output           ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket;
  output           ethernet_port_interface_0_avalon_streaming_sink_2_valid;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_2_ready;
  input            reset_n;
  input   [  7: 0] tse_mac2_receive_data;
  input            tse_mac2_receive_endofpacket;
  input   [  5: 0] tse_mac2_receive_error;
  input            tse_mac2_receive_startofpacket;
  input            tse_mac2_receive_valid;

  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_2_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_2_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_valid;
  //mux ethernet_port_interface_0_avalon_streaming_sink_2_data, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_2_data = tse_mac2_receive_data;

  //mux ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket = tse_mac2_receive_endofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_2_error, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_2_error = tse_mac2_receive_error;

  //assign ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_2_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_2_ready;

  //mux ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket = tse_mac2_receive_startofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_2_valid, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_2_valid = tse_mac2_receive_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_sink_3_arbitrator (
                                                                      // inputs:
                                                                       clk,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_ready,
                                                                       reset_n,
                                                                       tse_mac3_receive_data,
                                                                       tse_mac3_receive_endofpacket,
                                                                       tse_mac3_receive_error,
                                                                       tse_mac3_receive_startofpacket,
                                                                       tse_mac3_receive_valid,

                                                                      // outputs:
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_data,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_error,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_sink_3_valid
                                                                    )
;

  output  [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_3_data;
  output           ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket;
  output  [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_3_error;
  output           ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa;
  output           ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket;
  output           ethernet_port_interface_0_avalon_streaming_sink_3_valid;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_3_ready;
  input            reset_n;
  input   [  7: 0] tse_mac3_receive_data;
  input            tse_mac3_receive_endofpacket;
  input   [  5: 0] tse_mac3_receive_error;
  input            tse_mac3_receive_startofpacket;
  input            tse_mac3_receive_valid;

  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_3_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_3_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_valid;
  //mux ethernet_port_interface_0_avalon_streaming_sink_3_data, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_3_data = tse_mac3_receive_data;

  //mux ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket = tse_mac3_receive_endofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_3_error, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_3_error = tse_mac3_receive_error;

  //assign ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_3_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa = ethernet_port_interface_0_avalon_streaming_sink_3_ready;

  //mux ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket = tse_mac3_receive_startofpacket;

  //mux ethernet_port_interface_0_avalon_streaming_sink_3_valid, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_sink_3_valid = tse_mac3_receive_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_control_port_arbitrator (
                                                           // inputs:
                                                            clk,
                                                            ethernet_port_interface_0_control_port_readdata,
                                                            ethernet_port_interface_0_control_port_waitrequest,
                                                            master_0_latency_counter,
                                                            master_0_master_address_to_slave,
                                                            master_0_master_read,
                                                            master_0_master_write,
                                                            master_0_master_writedata,
                                                            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                                            reset_n,

                                                           // outputs:
                                                            d1_ethernet_port_interface_0_control_port_end_xfer,
                                                            ethernet_port_interface_0_control_port_address,
                                                            ethernet_port_interface_0_control_port_read,
                                                            ethernet_port_interface_0_control_port_readdata_from_sa,
                                                            ethernet_port_interface_0_control_port_reset,
                                                            ethernet_port_interface_0_control_port_waitrequest_from_sa,
                                                            ethernet_port_interface_0_control_port_write,
                                                            ethernet_port_interface_0_control_port_writedata,
                                                            master_0_granted_ethernet_port_interface_0_control_port,
                                                            master_0_qualified_request_ethernet_port_interface_0_control_port,
                                                            master_0_read_data_valid_ethernet_port_interface_0_control_port,
                                                            master_0_requests_ethernet_port_interface_0_control_port
                                                         )
;

  output           d1_ethernet_port_interface_0_control_port_end_xfer;
  output  [ 26: 0] ethernet_port_interface_0_control_port_address;
  output           ethernet_port_interface_0_control_port_read;
  output  [ 31: 0] ethernet_port_interface_0_control_port_readdata_from_sa;
  output           ethernet_port_interface_0_control_port_reset;
  output           ethernet_port_interface_0_control_port_waitrequest_from_sa;
  output           ethernet_port_interface_0_control_port_write;
  output  [ 31: 0] ethernet_port_interface_0_control_port_writedata;
  output           master_0_granted_ethernet_port_interface_0_control_port;
  output           master_0_qualified_request_ethernet_port_interface_0_control_port;
  output           master_0_read_data_valid_ethernet_port_interface_0_control_port;
  output           master_0_requests_ethernet_port_interface_0_control_port;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_control_port_readdata;
  input            ethernet_port_interface_0_control_port_waitrequest;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;

  reg              d1_ethernet_port_interface_0_control_port_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port;
  wire    [ 26: 0] ethernet_port_interface_0_control_port_address;
  wire             ethernet_port_interface_0_control_port_allgrants;
  wire             ethernet_port_interface_0_control_port_allow_new_arb_cycle;
  wire             ethernet_port_interface_0_control_port_any_bursting_master_saved_grant;
  wire             ethernet_port_interface_0_control_port_any_continuerequest;
  wire             ethernet_port_interface_0_control_port_arb_counter_enable;
  reg              ethernet_port_interface_0_control_port_arb_share_counter;
  wire             ethernet_port_interface_0_control_port_arb_share_counter_next_value;
  wire             ethernet_port_interface_0_control_port_arb_share_set_values;
  wire             ethernet_port_interface_0_control_port_beginbursttransfer_internal;
  wire             ethernet_port_interface_0_control_port_begins_xfer;
  wire             ethernet_port_interface_0_control_port_end_xfer;
  wire             ethernet_port_interface_0_control_port_firsttransfer;
  wire             ethernet_port_interface_0_control_port_grant_vector;
  wire             ethernet_port_interface_0_control_port_in_a_read_cycle;
  wire             ethernet_port_interface_0_control_port_in_a_write_cycle;
  wire             ethernet_port_interface_0_control_port_master_qreq_vector;
  wire             ethernet_port_interface_0_control_port_non_bursting_master_requests;
  wire             ethernet_port_interface_0_control_port_read;
  wire    [ 31: 0] ethernet_port_interface_0_control_port_readdata_from_sa;
  reg              ethernet_port_interface_0_control_port_reg_firsttransfer;
  wire             ethernet_port_interface_0_control_port_reset;
  reg              ethernet_port_interface_0_control_port_slavearbiterlockenable;
  wire             ethernet_port_interface_0_control_port_slavearbiterlockenable2;
  wire             ethernet_port_interface_0_control_port_unreg_firsttransfer;
  wire             ethernet_port_interface_0_control_port_waitrequest_from_sa;
  wire             ethernet_port_interface_0_control_port_waits_for_read;
  wire             ethernet_port_interface_0_control_port_waits_for_write;
  wire             ethernet_port_interface_0_control_port_write;
  wire    [ 31: 0] ethernet_port_interface_0_control_port_writedata;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             master_0_granted_ethernet_port_interface_0_control_port;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_ethernet_port_interface_0_control_port;
  wire             master_0_read_data_valid_ethernet_port_interface_0_control_port;
  wire             master_0_requests_ethernet_port_interface_0_control_port;
  wire             master_0_saved_grant_ethernet_port_interface_0_control_port;
  wire    [ 31: 0] shifted_address_to_ethernet_port_interface_0_control_port_from_master_0_master;
  wire             wait_for_ethernet_port_interface_0_control_port_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~ethernet_port_interface_0_control_port_end_xfer;
    end


  assign ethernet_port_interface_0_control_port_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_ethernet_port_interface_0_control_port));
  //assign ethernet_port_interface_0_control_port_readdata_from_sa = ethernet_port_interface_0_control_port_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_control_port_readdata_from_sa = ethernet_port_interface_0_control_port_readdata;

  assign master_0_requests_ethernet_port_interface_0_control_port = ({master_0_master_address_to_slave[31 : 29] , 29'b0} == 32'h0) & (master_0_master_read | master_0_master_write);
  //assign ethernet_port_interface_0_control_port_waitrequest_from_sa = ethernet_port_interface_0_control_port_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign ethernet_port_interface_0_control_port_waitrequest_from_sa = ethernet_port_interface_0_control_port_waitrequest;

  //ethernet_port_interface_0_control_port_arb_share_counter set values, which is an e_mux
  assign ethernet_port_interface_0_control_port_arb_share_set_values = 1;

  //ethernet_port_interface_0_control_port_non_bursting_master_requests mux, which is an e_mux
  assign ethernet_port_interface_0_control_port_non_bursting_master_requests = master_0_requests_ethernet_port_interface_0_control_port;

  //ethernet_port_interface_0_control_port_any_bursting_master_saved_grant mux, which is an e_mux
  assign ethernet_port_interface_0_control_port_any_bursting_master_saved_grant = 0;

  //ethernet_port_interface_0_control_port_arb_share_counter_next_value assignment, which is an e_assign
  assign ethernet_port_interface_0_control_port_arb_share_counter_next_value = ethernet_port_interface_0_control_port_firsttransfer ? (ethernet_port_interface_0_control_port_arb_share_set_values - 1) : |ethernet_port_interface_0_control_port_arb_share_counter ? (ethernet_port_interface_0_control_port_arb_share_counter - 1) : 0;

  //ethernet_port_interface_0_control_port_allgrants all slave grants, which is an e_mux
  assign ethernet_port_interface_0_control_port_allgrants = |ethernet_port_interface_0_control_port_grant_vector;

  //ethernet_port_interface_0_control_port_end_xfer assignment, which is an e_assign
  assign ethernet_port_interface_0_control_port_end_xfer = ~(ethernet_port_interface_0_control_port_waits_for_read | ethernet_port_interface_0_control_port_waits_for_write);

  //end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port = ethernet_port_interface_0_control_port_end_xfer & (~ethernet_port_interface_0_control_port_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //ethernet_port_interface_0_control_port_arb_share_counter arbitration counter enable, which is an e_assign
  assign ethernet_port_interface_0_control_port_arb_counter_enable = (end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port & ethernet_port_interface_0_control_port_allgrants) | (end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port & ~ethernet_port_interface_0_control_port_non_bursting_master_requests);

  //ethernet_port_interface_0_control_port_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_control_port_arb_share_counter <= 0;
      else if (ethernet_port_interface_0_control_port_arb_counter_enable)
          ethernet_port_interface_0_control_port_arb_share_counter <= ethernet_port_interface_0_control_port_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0_control_port_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_control_port_slavearbiterlockenable <= 0;
      else if ((|ethernet_port_interface_0_control_port_master_qreq_vector & end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port) | (end_xfer_arb_share_counter_term_ethernet_port_interface_0_control_port & ~ethernet_port_interface_0_control_port_non_bursting_master_requests))
          ethernet_port_interface_0_control_port_slavearbiterlockenable <= |ethernet_port_interface_0_control_port_arb_share_counter_next_value;
    end


  //master_0/master ethernet_port_interface_0/control_port arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = ethernet_port_interface_0_control_port_slavearbiterlockenable & master_0_master_continuerequest;

  //ethernet_port_interface_0_control_port_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_control_port_slavearbiterlockenable2 = |ethernet_port_interface_0_control_port_arb_share_counter_next_value;

  //master_0/master ethernet_port_interface_0/control_port arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = ethernet_port_interface_0_control_port_slavearbiterlockenable2 & master_0_master_continuerequest;

  //ethernet_port_interface_0_control_port_any_continuerequest at least one master continues requesting, which is an e_assign
  assign ethernet_port_interface_0_control_port_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_ethernet_port_interface_0_control_port = master_0_requests_ethernet_port_interface_0_control_port & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))));
  //local readdatavalid master_0_read_data_valid_ethernet_port_interface_0_control_port, which is an e_mux
  assign master_0_read_data_valid_ethernet_port_interface_0_control_port = master_0_granted_ethernet_port_interface_0_control_port & master_0_master_read & ~ethernet_port_interface_0_control_port_waits_for_read;

  //ethernet_port_interface_0_control_port_writedata mux, which is an e_mux
  assign ethernet_port_interface_0_control_port_writedata = master_0_master_writedata;

  //master is always granted when requested
  assign master_0_granted_ethernet_port_interface_0_control_port = master_0_qualified_request_ethernet_port_interface_0_control_port;

  //master_0/master saved-grant ethernet_port_interface_0/control_port, which is an e_assign
  assign master_0_saved_grant_ethernet_port_interface_0_control_port = master_0_requests_ethernet_port_interface_0_control_port;

  //allow new arb cycle for ethernet_port_interface_0/control_port, which is an e_assign
  assign ethernet_port_interface_0_control_port_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign ethernet_port_interface_0_control_port_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign ethernet_port_interface_0_control_port_master_qreq_vector = 1;

  //~ethernet_port_interface_0_control_port_reset assignment, which is an e_assign
  assign ethernet_port_interface_0_control_port_reset = ~reset_n;

  //ethernet_port_interface_0_control_port_firsttransfer first transaction, which is an e_assign
  assign ethernet_port_interface_0_control_port_firsttransfer = ethernet_port_interface_0_control_port_begins_xfer ? ethernet_port_interface_0_control_port_unreg_firsttransfer : ethernet_port_interface_0_control_port_reg_firsttransfer;

  //ethernet_port_interface_0_control_port_unreg_firsttransfer first transaction, which is an e_assign
  assign ethernet_port_interface_0_control_port_unreg_firsttransfer = ~(ethernet_port_interface_0_control_port_slavearbiterlockenable & ethernet_port_interface_0_control_port_any_continuerequest);

  //ethernet_port_interface_0_control_port_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_control_port_reg_firsttransfer <= 1'b1;
      else if (ethernet_port_interface_0_control_port_begins_xfer)
          ethernet_port_interface_0_control_port_reg_firsttransfer <= ethernet_port_interface_0_control_port_unreg_firsttransfer;
    end


  //ethernet_port_interface_0_control_port_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign ethernet_port_interface_0_control_port_beginbursttransfer_internal = ethernet_port_interface_0_control_port_begins_xfer;

  //ethernet_port_interface_0_control_port_read assignment, which is an e_mux
  assign ethernet_port_interface_0_control_port_read = master_0_granted_ethernet_port_interface_0_control_port & master_0_master_read;

  //ethernet_port_interface_0_control_port_write assignment, which is an e_mux
  assign ethernet_port_interface_0_control_port_write = master_0_granted_ethernet_port_interface_0_control_port & master_0_master_write;

  assign shifted_address_to_ethernet_port_interface_0_control_port_from_master_0_master = master_0_master_address_to_slave;
  //ethernet_port_interface_0_control_port_address mux, which is an e_mux
  assign ethernet_port_interface_0_control_port_address = shifted_address_to_ethernet_port_interface_0_control_port_from_master_0_master >> 2;

  //d1_ethernet_port_interface_0_control_port_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_ethernet_port_interface_0_control_port_end_xfer <= 1;
      else 
        d1_ethernet_port_interface_0_control_port_end_xfer <= ethernet_port_interface_0_control_port_end_xfer;
    end


  //ethernet_port_interface_0_control_port_waits_for_read in a cycle, which is an e_mux
  assign ethernet_port_interface_0_control_port_waits_for_read = ethernet_port_interface_0_control_port_in_a_read_cycle & ethernet_port_interface_0_control_port_waitrequest_from_sa;

  //ethernet_port_interface_0_control_port_in_a_read_cycle assignment, which is an e_assign
  assign ethernet_port_interface_0_control_port_in_a_read_cycle = master_0_granted_ethernet_port_interface_0_control_port & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = ethernet_port_interface_0_control_port_in_a_read_cycle;

  //ethernet_port_interface_0_control_port_waits_for_write in a cycle, which is an e_mux
  assign ethernet_port_interface_0_control_port_waits_for_write = ethernet_port_interface_0_control_port_in_a_write_cycle & ethernet_port_interface_0_control_port_waitrequest_from_sa;

  //ethernet_port_interface_0_control_port_in_a_write_cycle assignment, which is an e_assign
  assign ethernet_port_interface_0_control_port_in_a_write_cycle = master_0_granted_ethernet_port_interface_0_control_port & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = ethernet_port_interface_0_control_port_in_a_write_cycle;

  assign wait_for_ethernet_port_interface_0_control_port_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //ethernet_port_interface_0/control_port enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_module (
                                                                                                      // inputs:
                                                                                                       clear_fifo,
                                                                                                       clk,
                                                                                                       data_in,
                                                                                                       read,
                                                                                                       reset_n,
                                                                                                       sync_reset,
                                                                                                       write,

                                                                                                      // outputs:
                                                                                                       data_out,
                                                                                                       empty,
                                                                                                       fifo_contains_ones_n,
                                                                                                       full
                                                                                                    )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_10;
  reg              full_11;
  reg              full_12;
  reg              full_13;
  reg              full_14;
  reg              full_15;
  reg              full_16;
  reg              full_17;
  reg              full_18;
  reg              full_19;
  reg              full_2;
  reg              full_20;
  reg              full_21;
  reg              full_22;
  reg              full_23;
  reg              full_24;
  reg              full_25;
  reg              full_26;
  reg              full_27;
  reg              full_28;
  reg              full_29;
  reg              full_3;
  reg              full_30;
  reg              full_31;
  reg              full_32;
  reg              full_33;
  wire             full_34;
  reg              full_4;
  reg              full_5;
  reg              full_6;
  reg              full_7;
  reg              full_8;
  reg              full_9;
  reg     [  6: 0] how_many_ones;
  wire    [  6: 0] one_count_minus_one;
  wire    [  6: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p10_full_10;
  wire             p10_stage_10;
  wire             p11_full_11;
  wire             p11_stage_11;
  wire             p12_full_12;
  wire             p12_stage_12;
  wire             p13_full_13;
  wire             p13_stage_13;
  wire             p14_full_14;
  wire             p14_stage_14;
  wire             p15_full_15;
  wire             p15_stage_15;
  wire             p16_full_16;
  wire             p16_stage_16;
  wire             p17_full_17;
  wire             p17_stage_17;
  wire             p18_full_18;
  wire             p18_stage_18;
  wire             p19_full_19;
  wire             p19_stage_19;
  wire             p1_full_1;
  wire             p1_stage_1;
  wire             p20_full_20;
  wire             p20_stage_20;
  wire             p21_full_21;
  wire             p21_stage_21;
  wire             p22_full_22;
  wire             p22_stage_22;
  wire             p23_full_23;
  wire             p23_stage_23;
  wire             p24_full_24;
  wire             p24_stage_24;
  wire             p25_full_25;
  wire             p25_stage_25;
  wire             p26_full_26;
  wire             p26_stage_26;
  wire             p27_full_27;
  wire             p27_stage_27;
  wire             p28_full_28;
  wire             p28_stage_28;
  wire             p29_full_29;
  wire             p29_stage_29;
  wire             p2_full_2;
  wire             p2_stage_2;
  wire             p30_full_30;
  wire             p30_stage_30;
  wire             p31_full_31;
  wire             p31_stage_31;
  wire             p32_full_32;
  wire             p32_stage_32;
  wire             p33_full_33;
  wire             p33_stage_33;
  wire             p3_full_3;
  wire             p3_stage_3;
  wire             p4_full_4;
  wire             p4_stage_4;
  wire             p5_full_5;
  wire             p5_stage_5;
  wire             p6_full_6;
  wire             p6_stage_6;
  wire             p7_full_7;
  wire             p7_stage_7;
  wire             p8_full_8;
  wire             p8_stage_8;
  wire             p9_full_9;
  wire             p9_stage_9;
  reg              stage_0;
  reg              stage_1;
  reg              stage_10;
  reg              stage_11;
  reg              stage_12;
  reg              stage_13;
  reg              stage_14;
  reg              stage_15;
  reg              stage_16;
  reg              stage_17;
  reg              stage_18;
  reg              stage_19;
  reg              stage_2;
  reg              stage_20;
  reg              stage_21;
  reg              stage_22;
  reg              stage_23;
  reg              stage_24;
  reg              stage_25;
  reg              stage_26;
  reg              stage_27;
  reg              stage_28;
  reg              stage_29;
  reg              stage_3;
  reg              stage_30;
  reg              stage_31;
  reg              stage_32;
  reg              stage_33;
  reg              stage_4;
  reg              stage_5;
  reg              stage_6;
  reg              stage_7;
  reg              stage_8;
  reg              stage_9;
  wire    [  6: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_33;
  assign empty = !full_0;
  assign full_34 = 0;
  //data_33, which is an e_mux
  assign p33_stage_33 = ((full_34 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_33, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_33 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_33))
          if (sync_reset & full_33 & !((full_34 == 0) & read & write))
              stage_33 <= 0;
          else 
            stage_33 <= p33_stage_33;
    end


  //control_33, which is an e_mux
  assign p33_full_33 = ((read & !write) == 0)? full_32 :
    0;

  //control_reg_33, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_33 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_33 <= 0;
          else 
            full_33 <= p33_full_33;
    end


  //data_32, which is an e_mux
  assign p32_stage_32 = ((full_33 & ~clear_fifo) == 0)? data_in :
    stage_33;

  //data_reg_32, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_32 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_32))
          if (sync_reset & full_32 & !((full_33 == 0) & read & write))
              stage_32 <= 0;
          else 
            stage_32 <= p32_stage_32;
    end


  //control_32, which is an e_mux
  assign p32_full_32 = ((read & !write) == 0)? full_31 :
    full_33;

  //control_reg_32, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_32 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_32 <= 0;
          else 
            full_32 <= p32_full_32;
    end


  //data_31, which is an e_mux
  assign p31_stage_31 = ((full_32 & ~clear_fifo) == 0)? data_in :
    stage_32;

  //data_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_31 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_31))
          if (sync_reset & full_31 & !((full_32 == 0) & read & write))
              stage_31 <= 0;
          else 
            stage_31 <= p31_stage_31;
    end


  //control_31, which is an e_mux
  assign p31_full_31 = ((read & !write) == 0)? full_30 :
    full_32;

  //control_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_31 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_31 <= 0;
          else 
            full_31 <= p31_full_31;
    end


  //data_30, which is an e_mux
  assign p30_stage_30 = ((full_31 & ~clear_fifo) == 0)? data_in :
    stage_31;

  //data_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_30 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_30))
          if (sync_reset & full_30 & !((full_31 == 0) & read & write))
              stage_30 <= 0;
          else 
            stage_30 <= p30_stage_30;
    end


  //control_30, which is an e_mux
  assign p30_full_30 = ((read & !write) == 0)? full_29 :
    full_31;

  //control_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_30 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_30 <= 0;
          else 
            full_30 <= p30_full_30;
    end


  //data_29, which is an e_mux
  assign p29_stage_29 = ((full_30 & ~clear_fifo) == 0)? data_in :
    stage_30;

  //data_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_29 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_29))
          if (sync_reset & full_29 & !((full_30 == 0) & read & write))
              stage_29 <= 0;
          else 
            stage_29 <= p29_stage_29;
    end


  //control_29, which is an e_mux
  assign p29_full_29 = ((read & !write) == 0)? full_28 :
    full_30;

  //control_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_29 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_29 <= 0;
          else 
            full_29 <= p29_full_29;
    end


  //data_28, which is an e_mux
  assign p28_stage_28 = ((full_29 & ~clear_fifo) == 0)? data_in :
    stage_29;

  //data_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_28 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_28))
          if (sync_reset & full_28 & !((full_29 == 0) & read & write))
              stage_28 <= 0;
          else 
            stage_28 <= p28_stage_28;
    end


  //control_28, which is an e_mux
  assign p28_full_28 = ((read & !write) == 0)? full_27 :
    full_29;

  //control_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_28 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_28 <= 0;
          else 
            full_28 <= p28_full_28;
    end


  //data_27, which is an e_mux
  assign p27_stage_27 = ((full_28 & ~clear_fifo) == 0)? data_in :
    stage_28;

  //data_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_27 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_27))
          if (sync_reset & full_27 & !((full_28 == 0) & read & write))
              stage_27 <= 0;
          else 
            stage_27 <= p27_stage_27;
    end


  //control_27, which is an e_mux
  assign p27_full_27 = ((read & !write) == 0)? full_26 :
    full_28;

  //control_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_27 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_27 <= 0;
          else 
            full_27 <= p27_full_27;
    end


  //data_26, which is an e_mux
  assign p26_stage_26 = ((full_27 & ~clear_fifo) == 0)? data_in :
    stage_27;

  //data_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_26 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_26))
          if (sync_reset & full_26 & !((full_27 == 0) & read & write))
              stage_26 <= 0;
          else 
            stage_26 <= p26_stage_26;
    end


  //control_26, which is an e_mux
  assign p26_full_26 = ((read & !write) == 0)? full_25 :
    full_27;

  //control_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_26 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_26 <= 0;
          else 
            full_26 <= p26_full_26;
    end


  //data_25, which is an e_mux
  assign p25_stage_25 = ((full_26 & ~clear_fifo) == 0)? data_in :
    stage_26;

  //data_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_25 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_25))
          if (sync_reset & full_25 & !((full_26 == 0) & read & write))
              stage_25 <= 0;
          else 
            stage_25 <= p25_stage_25;
    end


  //control_25, which is an e_mux
  assign p25_full_25 = ((read & !write) == 0)? full_24 :
    full_26;

  //control_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_25 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_25 <= 0;
          else 
            full_25 <= p25_full_25;
    end


  //data_24, which is an e_mux
  assign p24_stage_24 = ((full_25 & ~clear_fifo) == 0)? data_in :
    stage_25;

  //data_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_24 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_24))
          if (sync_reset & full_24 & !((full_25 == 0) & read & write))
              stage_24 <= 0;
          else 
            stage_24 <= p24_stage_24;
    end


  //control_24, which is an e_mux
  assign p24_full_24 = ((read & !write) == 0)? full_23 :
    full_25;

  //control_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_24 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_24 <= 0;
          else 
            full_24 <= p24_full_24;
    end


  //data_23, which is an e_mux
  assign p23_stage_23 = ((full_24 & ~clear_fifo) == 0)? data_in :
    stage_24;

  //data_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_23 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_23))
          if (sync_reset & full_23 & !((full_24 == 0) & read & write))
              stage_23 <= 0;
          else 
            stage_23 <= p23_stage_23;
    end


  //control_23, which is an e_mux
  assign p23_full_23 = ((read & !write) == 0)? full_22 :
    full_24;

  //control_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_23 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_23 <= 0;
          else 
            full_23 <= p23_full_23;
    end


  //data_22, which is an e_mux
  assign p22_stage_22 = ((full_23 & ~clear_fifo) == 0)? data_in :
    stage_23;

  //data_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_22 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_22))
          if (sync_reset & full_22 & !((full_23 == 0) & read & write))
              stage_22 <= 0;
          else 
            stage_22 <= p22_stage_22;
    end


  //control_22, which is an e_mux
  assign p22_full_22 = ((read & !write) == 0)? full_21 :
    full_23;

  //control_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_22 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_22 <= 0;
          else 
            full_22 <= p22_full_22;
    end


  //data_21, which is an e_mux
  assign p21_stage_21 = ((full_22 & ~clear_fifo) == 0)? data_in :
    stage_22;

  //data_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_21 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_21))
          if (sync_reset & full_21 & !((full_22 == 0) & read & write))
              stage_21 <= 0;
          else 
            stage_21 <= p21_stage_21;
    end


  //control_21, which is an e_mux
  assign p21_full_21 = ((read & !write) == 0)? full_20 :
    full_22;

  //control_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_21 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_21 <= 0;
          else 
            full_21 <= p21_full_21;
    end


  //data_20, which is an e_mux
  assign p20_stage_20 = ((full_21 & ~clear_fifo) == 0)? data_in :
    stage_21;

  //data_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_20 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_20))
          if (sync_reset & full_20 & !((full_21 == 0) & read & write))
              stage_20 <= 0;
          else 
            stage_20 <= p20_stage_20;
    end


  //control_20, which is an e_mux
  assign p20_full_20 = ((read & !write) == 0)? full_19 :
    full_21;

  //control_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_20 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_20 <= 0;
          else 
            full_20 <= p20_full_20;
    end


  //data_19, which is an e_mux
  assign p19_stage_19 = ((full_20 & ~clear_fifo) == 0)? data_in :
    stage_20;

  //data_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_19 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_19))
          if (sync_reset & full_19 & !((full_20 == 0) & read & write))
              stage_19 <= 0;
          else 
            stage_19 <= p19_stage_19;
    end


  //control_19, which is an e_mux
  assign p19_full_19 = ((read & !write) == 0)? full_18 :
    full_20;

  //control_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_19 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_19 <= 0;
          else 
            full_19 <= p19_full_19;
    end


  //data_18, which is an e_mux
  assign p18_stage_18 = ((full_19 & ~clear_fifo) == 0)? data_in :
    stage_19;

  //data_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_18 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_18))
          if (sync_reset & full_18 & !((full_19 == 0) & read & write))
              stage_18 <= 0;
          else 
            stage_18 <= p18_stage_18;
    end


  //control_18, which is an e_mux
  assign p18_full_18 = ((read & !write) == 0)? full_17 :
    full_19;

  //control_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_18 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_18 <= 0;
          else 
            full_18 <= p18_full_18;
    end


  //data_17, which is an e_mux
  assign p17_stage_17 = ((full_18 & ~clear_fifo) == 0)? data_in :
    stage_18;

  //data_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_17 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_17))
          if (sync_reset & full_17 & !((full_18 == 0) & read & write))
              stage_17 <= 0;
          else 
            stage_17 <= p17_stage_17;
    end


  //control_17, which is an e_mux
  assign p17_full_17 = ((read & !write) == 0)? full_16 :
    full_18;

  //control_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_17 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_17 <= 0;
          else 
            full_17 <= p17_full_17;
    end


  //data_16, which is an e_mux
  assign p16_stage_16 = ((full_17 & ~clear_fifo) == 0)? data_in :
    stage_17;

  //data_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_16 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_16))
          if (sync_reset & full_16 & !((full_17 == 0) & read & write))
              stage_16 <= 0;
          else 
            stage_16 <= p16_stage_16;
    end


  //control_16, which is an e_mux
  assign p16_full_16 = ((read & !write) == 0)? full_15 :
    full_17;

  //control_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_16 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_16 <= 0;
          else 
            full_16 <= p16_full_16;
    end


  //data_15, which is an e_mux
  assign p15_stage_15 = ((full_16 & ~clear_fifo) == 0)? data_in :
    stage_16;

  //data_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_15 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_15))
          if (sync_reset & full_15 & !((full_16 == 0) & read & write))
              stage_15 <= 0;
          else 
            stage_15 <= p15_stage_15;
    end


  //control_15, which is an e_mux
  assign p15_full_15 = ((read & !write) == 0)? full_14 :
    full_16;

  //control_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_15 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_15 <= 0;
          else 
            full_15 <= p15_full_15;
    end


  //data_14, which is an e_mux
  assign p14_stage_14 = ((full_15 & ~clear_fifo) == 0)? data_in :
    stage_15;

  //data_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_14 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_14))
          if (sync_reset & full_14 & !((full_15 == 0) & read & write))
              stage_14 <= 0;
          else 
            stage_14 <= p14_stage_14;
    end


  //control_14, which is an e_mux
  assign p14_full_14 = ((read & !write) == 0)? full_13 :
    full_15;

  //control_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_14 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_14 <= 0;
          else 
            full_14 <= p14_full_14;
    end


  //data_13, which is an e_mux
  assign p13_stage_13 = ((full_14 & ~clear_fifo) == 0)? data_in :
    stage_14;

  //data_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_13 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_13))
          if (sync_reset & full_13 & !((full_14 == 0) & read & write))
              stage_13 <= 0;
          else 
            stage_13 <= p13_stage_13;
    end


  //control_13, which is an e_mux
  assign p13_full_13 = ((read & !write) == 0)? full_12 :
    full_14;

  //control_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_13 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_13 <= 0;
          else 
            full_13 <= p13_full_13;
    end


  //data_12, which is an e_mux
  assign p12_stage_12 = ((full_13 & ~clear_fifo) == 0)? data_in :
    stage_13;

  //data_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_12 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_12))
          if (sync_reset & full_12 & !((full_13 == 0) & read & write))
              stage_12 <= 0;
          else 
            stage_12 <= p12_stage_12;
    end


  //control_12, which is an e_mux
  assign p12_full_12 = ((read & !write) == 0)? full_11 :
    full_13;

  //control_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_12 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_12 <= 0;
          else 
            full_12 <= p12_full_12;
    end


  //data_11, which is an e_mux
  assign p11_stage_11 = ((full_12 & ~clear_fifo) == 0)? data_in :
    stage_12;

  //data_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_11 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_11))
          if (sync_reset & full_11 & !((full_12 == 0) & read & write))
              stage_11 <= 0;
          else 
            stage_11 <= p11_stage_11;
    end


  //control_11, which is an e_mux
  assign p11_full_11 = ((read & !write) == 0)? full_10 :
    full_12;

  //control_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_11 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_11 <= 0;
          else 
            full_11 <= p11_full_11;
    end


  //data_10, which is an e_mux
  assign p10_stage_10 = ((full_11 & ~clear_fifo) == 0)? data_in :
    stage_11;

  //data_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_10 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_10))
          if (sync_reset & full_10 & !((full_11 == 0) & read & write))
              stage_10 <= 0;
          else 
            stage_10 <= p10_stage_10;
    end


  //control_10, which is an e_mux
  assign p10_full_10 = ((read & !write) == 0)? full_9 :
    full_11;

  //control_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_10 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_10 <= 0;
          else 
            full_10 <= p10_full_10;
    end


  //data_9, which is an e_mux
  assign p9_stage_9 = ((full_10 & ~clear_fifo) == 0)? data_in :
    stage_10;

  //data_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_9 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_9))
          if (sync_reset & full_9 & !((full_10 == 0) & read & write))
              stage_9 <= 0;
          else 
            stage_9 <= p9_stage_9;
    end


  //control_9, which is an e_mux
  assign p9_full_9 = ((read & !write) == 0)? full_8 :
    full_10;

  //control_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_9 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_9 <= 0;
          else 
            full_9 <= p9_full_9;
    end


  //data_8, which is an e_mux
  assign p8_stage_8 = ((full_9 & ~clear_fifo) == 0)? data_in :
    stage_9;

  //data_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_8 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_8))
          if (sync_reset & full_8 & !((full_9 == 0) & read & write))
              stage_8 <= 0;
          else 
            stage_8 <= p8_stage_8;
    end


  //control_8, which is an e_mux
  assign p8_full_8 = ((read & !write) == 0)? full_7 :
    full_9;

  //control_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_8 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_8 <= 0;
          else 
            full_8 <= p8_full_8;
    end


  //data_7, which is an e_mux
  assign p7_stage_7 = ((full_8 & ~clear_fifo) == 0)? data_in :
    stage_8;

  //data_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_7 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_7))
          if (sync_reset & full_7 & !((full_8 == 0) & read & write))
              stage_7 <= 0;
          else 
            stage_7 <= p7_stage_7;
    end


  //control_7, which is an e_mux
  assign p7_full_7 = ((read & !write) == 0)? full_6 :
    full_8;

  //control_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_7 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_7 <= 0;
          else 
            full_7 <= p7_full_7;
    end


  //data_6, which is an e_mux
  assign p6_stage_6 = ((full_7 & ~clear_fifo) == 0)? data_in :
    stage_7;

  //data_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_6 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_6))
          if (sync_reset & full_6 & !((full_7 == 0) & read & write))
              stage_6 <= 0;
          else 
            stage_6 <= p6_stage_6;
    end


  //control_6, which is an e_mux
  assign p6_full_6 = ((read & !write) == 0)? full_5 :
    full_7;

  //control_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_6 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_6 <= 0;
          else 
            full_6 <= p6_full_6;
    end


  //data_5, which is an e_mux
  assign p5_stage_5 = ((full_6 & ~clear_fifo) == 0)? data_in :
    stage_6;

  //data_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_5 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_5))
          if (sync_reset & full_5 & !((full_6 == 0) & read & write))
              stage_5 <= 0;
          else 
            stage_5 <= p5_stage_5;
    end


  //control_5, which is an e_mux
  assign p5_full_5 = ((read & !write) == 0)? full_4 :
    full_6;

  //control_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_5 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_5 <= 0;
          else 
            full_5 <= p5_full_5;
    end


  //data_4, which is an e_mux
  assign p4_stage_4 = ((full_5 & ~clear_fifo) == 0)? data_in :
    stage_5;

  //data_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_4 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_4))
          if (sync_reset & full_4 & !((full_5 == 0) & read & write))
              stage_4 <= 0;
          else 
            stage_4 <= p4_stage_4;
    end


  //control_4, which is an e_mux
  assign p4_full_4 = ((read & !write) == 0)? full_3 :
    full_5;

  //control_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_4 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_4 <= 0;
          else 
            full_4 <= p4_full_4;
    end


  //data_3, which is an e_mux
  assign p3_stage_3 = ((full_4 & ~clear_fifo) == 0)? data_in :
    stage_4;

  //data_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_3 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_3))
          if (sync_reset & full_3 & !((full_4 == 0) & read & write))
              stage_3 <= 0;
          else 
            stage_3 <= p3_stage_3;
    end


  //control_3, which is an e_mux
  assign p3_full_3 = ((read & !write) == 0)? full_2 :
    full_4;

  //control_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_3 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_3 <= 0;
          else 
            full_3 <= p3_full_3;
    end


  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    stage_3;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    full_3;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_master_arbitrator (
                                                            // inputs:
                                                             DE4_SOPC_burst_2_upstream_readdata_from_sa,
                                                             DE4_SOPC_burst_2_upstream_waitrequest_from_sa,
                                                             clk,
                                                             d1_DE4_SOPC_burst_2_upstream_end_xfer,
                                                             ethernet_port_interface_0_avalon_master_address,
                                                             ethernet_port_interface_0_avalon_master_burstcount,
                                                             ethernet_port_interface_0_avalon_master_byteenable,
                                                             ethernet_port_interface_0_avalon_master_chipselect,
                                                             ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream,
                                                             ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream,
                                                             ethernet_port_interface_0_avalon_master_read,
                                                             ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream,
                                                             ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register,
                                                             ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream,
                                                             ethernet_port_interface_0_avalon_master_write,
                                                             ethernet_port_interface_0_avalon_master_writedata,
                                                             reset_n,

                                                            // outputs:
                                                             ethernet_port_interface_0_avalon_master_address_to_slave,
                                                             ethernet_port_interface_0_avalon_master_latency_counter,
                                                             ethernet_port_interface_0_avalon_master_readdata,
                                                             ethernet_port_interface_0_avalon_master_readdatavalid,
                                                             ethernet_port_interface_0_avalon_master_waitrequest
                                                          )
;

  output  [ 31: 0] ethernet_port_interface_0_avalon_master_address_to_slave;
  output           ethernet_port_interface_0_avalon_master_latency_counter;
  output  [ 31: 0] ethernet_port_interface_0_avalon_master_readdata;
  output           ethernet_port_interface_0_avalon_master_readdatavalid;
  output           ethernet_port_interface_0_avalon_master_waitrequest;
  input   [ 63: 0] DE4_SOPC_burst_2_upstream_readdata_from_sa;
  input            DE4_SOPC_burst_2_upstream_waitrequest_from_sa;
  input            clk;
  input            d1_DE4_SOPC_burst_2_upstream_end_xfer;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_address;
  input   [  9: 0] ethernet_port_interface_0_avalon_master_burstcount;
  input   [  3: 0] ethernet_port_interface_0_avalon_master_byteenable;
  input            ethernet_port_interface_0_avalon_master_chipselect;
  input            ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream;
  input            ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream;
  input            ethernet_port_interface_0_avalon_master_read;
  input            ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream;
  input            ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register;
  input            ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream;
  input            ethernet_port_interface_0_avalon_master_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_writedata;
  input            reset_n;

  wire    [ 31: 0] DE4_SOPC_burst_2_upstream_readdata_from_sa_part_selected_by_negative_dbs;
  reg              active_and_waiting_last_time;
  wire             empty_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo;
  reg     [ 31: 0] ethernet_port_interface_0_avalon_master_address_last_time;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_address_to_slave;
  reg     [  9: 0] ethernet_port_interface_0_avalon_master_burstcount_last_time;
  reg     [  3: 0] ethernet_port_interface_0_avalon_master_byteenable_last_time;
  reg              ethernet_port_interface_0_avalon_master_chipselect_last_time;
  wire             ethernet_port_interface_0_avalon_master_latency_counter;
  reg              ethernet_port_interface_0_avalon_master_read_last_time;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_readdata;
  wire             ethernet_port_interface_0_avalon_master_readdatavalid;
  wire             ethernet_port_interface_0_avalon_master_run;
  wire             ethernet_port_interface_0_avalon_master_waitrequest;
  reg              ethernet_port_interface_0_avalon_master_write_last_time;
  reg     [ 31: 0] ethernet_port_interface_0_avalon_master_writedata_last_time;
  wire             full_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo;
  wire             pre_flush_ethernet_port_interface_0_avalon_master_readdatavalid;
  wire             r_0;
  wire             read_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo;
  wire             selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_output;
  wire             selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_output_DE4_SOPC_burst_2_upstream;
  wire             write_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream | ~ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream) & ((~ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream | ~ethernet_port_interface_0_avalon_master_chipselect | (1 & ~DE4_SOPC_burst_2_upstream_waitrequest_from_sa & ethernet_port_interface_0_avalon_master_chipselect))) & ((~ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream | ~ethernet_port_interface_0_avalon_master_chipselect | (1 & ~DE4_SOPC_burst_2_upstream_waitrequest_from_sa & ethernet_port_interface_0_avalon_master_chipselect)));

  //cascaded wait assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_run = r_0;

  //optimize select-logic by passing only those address bits which matter.
  assign ethernet_port_interface_0_avalon_master_address_to_slave = {7'b0,
    ethernet_port_interface_0_avalon_master_address[24 : 0]};

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_ethernet_port_interface_0_avalon_master_readdatavalid = ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_readdatavalid = 0 |
    pre_flush_ethernet_port_interface_0_avalon_master_readdatavalid;

  //Negative Dynamic Bus-sizing mux.
  //this mux selects the correct half of the 
  //wide data coming from the slave DE4_SOPC_burst_2/upstream 
  assign DE4_SOPC_burst_2_upstream_readdata_from_sa_part_selected_by_negative_dbs = ((selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_output_DE4_SOPC_burst_2_upstream == 0))? DE4_SOPC_burst_2_upstream_readdata_from_sa[31 : 0] :
    DE4_SOPC_burst_2_upstream_readdata_from_sa[63 : 32];

  //read_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo fifo read, which is an e_mux
  assign read_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo = ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream;

  //write_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo fifo write, which is an e_mux
  assign write_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo = (ethernet_port_interface_0_avalon_master_read & ethernet_port_interface_0_avalon_master_chipselect) & ethernet_port_interface_0_avalon_master_run & ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream;

  assign selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_output_DE4_SOPC_burst_2_upstream = 1'b0;
  //selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo, which is an e_fifo_with_registered_outputs
  selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_module selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo
    (
      .clear_fifo           (1'b1),
      .clk                  (clk),
      .data_in              (ethernet_port_interface_0_avalon_master_address_to_slave[2]),
      .data_out             (selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo_output),
      .empty                (empty_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo),
      .fifo_contains_ones_n (),
      .full                 (full_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo),
      .read                 (1'b0),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (1'b0)
    );

  //ethernet_port_interface_0/avalon_master readdata mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_readdata = DE4_SOPC_burst_2_upstream_readdata_from_sa_part_selected_by_negative_dbs;

  //actual waitrequest port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_waitrequest = ~ethernet_port_interface_0_avalon_master_run;

  //latent max counter, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_latency_counter = 0;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //ethernet_port_interface_0_avalon_master_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_address_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_address_last_time <= ethernet_port_interface_0_avalon_master_address;
    end


  //ethernet_port_interface_0/avalon_master waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= ethernet_port_interface_0_avalon_master_waitrequest & ethernet_port_interface_0_avalon_master_chipselect;
    end


  //ethernet_port_interface_0_avalon_master_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_address != ethernet_port_interface_0_avalon_master_address_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_chipselect check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_chipselect_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_chipselect_last_time <= ethernet_port_interface_0_avalon_master_chipselect;
    end


  //ethernet_port_interface_0_avalon_master_chipselect matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_chipselect != ethernet_port_interface_0_avalon_master_chipselect_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_chipselect did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_burstcount check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_burstcount_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_burstcount_last_time <= ethernet_port_interface_0_avalon_master_burstcount;
    end


  //ethernet_port_interface_0_avalon_master_burstcount matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_burstcount != ethernet_port_interface_0_avalon_master_burstcount_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_burstcount did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_byteenable_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_byteenable_last_time <= ethernet_port_interface_0_avalon_master_byteenable;
    end


  //ethernet_port_interface_0_avalon_master_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_byteenable != ethernet_port_interface_0_avalon_master_byteenable_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_read_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_read_last_time <= ethernet_port_interface_0_avalon_master_read;
    end


  //ethernet_port_interface_0_avalon_master_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_read != ethernet_port_interface_0_avalon_master_read_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_write_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_write_last_time <= ethernet_port_interface_0_avalon_master_write;
    end


  //ethernet_port_interface_0_avalon_master_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_write != ethernet_port_interface_0_avalon_master_write_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_writedata_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_writedata_last_time <= ethernet_port_interface_0_avalon_master_writedata;
    end


  //ethernet_port_interface_0_avalon_master_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_writedata != ethernet_port_interface_0_avalon_master_writedata_last_time) & (ethernet_port_interface_0_avalon_master_write & ethernet_port_interface_0_avalon_master_chipselect))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_writedata did not heed wait!!!", $time);
          $stop;
        end
    end


  //selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo read when empty, which is an e_process
  always @(posedge clk)
    begin
      if (empty_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo & 1'b0)
        begin
          $write("%0d ns: ethernet_port_interface_0/avalon_master negative rdv fifo selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo: read AND empty.\n", $time);
          $stop;
        end
    end


  //selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo write when full, which is an e_process
  always @(posedge clk)
    begin
      if (full_selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo & 1'b0 & ~1'b0)
        begin
          $write("%0d ns: ethernet_port_interface_0/avalon_master negative rdv fifo selecto_nrdv_ethernet_port_interface_0_avalon_master_1_DE4_SOPC_burst_2_upstream_fifo: write AND full.\n", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_master_1_arbitrator (
                                                              // inputs:
                                                               clk,
                                                               d1_tse_mac1_control_port_end_xfer,
                                                               d1_tse_mac2_control_port_end_xfer,
                                                               d1_tse_mac3_control_port_end_xfer,
                                                               d1_tse_mac_control_port_end_xfer,
                                                               ethernet_port_interface_0_avalon_master_1_address,
                                                               ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_read,
                                                               ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port,
                                                               ethernet_port_interface_0_avalon_master_1_write,
                                                               ethernet_port_interface_0_avalon_master_1_writedata,
                                                               reset_n,
                                                               tse_mac1_control_port_readdata_from_sa,
                                                               tse_mac1_control_port_waitrequest_from_sa,
                                                               tse_mac2_control_port_readdata_from_sa,
                                                               tse_mac2_control_port_waitrequest_from_sa,
                                                               tse_mac3_control_port_readdata_from_sa,
                                                               tse_mac3_control_port_waitrequest_from_sa,
                                                               tse_mac_control_port_readdata_from_sa,
                                                               tse_mac_control_port_waitrequest_from_sa,

                                                              // outputs:
                                                               ethernet_port_interface_0_avalon_master_1_address_to_slave,
                                                               ethernet_port_interface_0_avalon_master_1_latency_counter,
                                                               ethernet_port_interface_0_avalon_master_1_readdata,
                                                               ethernet_port_interface_0_avalon_master_1_readdatavalid,
                                                               ethernet_port_interface_0_avalon_master_1_waitrequest
                                                            )
;

  output  [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  output           ethernet_port_interface_0_avalon_master_1_latency_counter;
  output  [ 31: 0] ethernet_port_interface_0_avalon_master_1_readdata;
  output           ethernet_port_interface_0_avalon_master_1_readdatavalid;
  output           ethernet_port_interface_0_avalon_master_1_waitrequest;
  input            clk;
  input            d1_tse_mac1_control_port_end_xfer;
  input            d1_tse_mac2_control_port_end_xfer;
  input            d1_tse_mac3_control_port_end_xfer;
  input            d1_tse_mac_control_port_end_xfer;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_address;
  input            ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port;
  input            ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port;
  input            ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port;
  input            ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port;
  input            ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port;
  input            ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port;
  input            ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port;
  input            ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port;
  input            ethernet_port_interface_0_avalon_master_1_read;
  input            ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port;
  input            ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port;
  input            ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port;
  input            ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port;
  input            ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port;
  input            ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port;
  input            ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port;
  input            ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port;
  input            ethernet_port_interface_0_avalon_master_1_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata;
  input            reset_n;
  input   [ 31: 0] tse_mac1_control_port_readdata_from_sa;
  input            tse_mac1_control_port_waitrequest_from_sa;
  input   [ 31: 0] tse_mac2_control_port_readdata_from_sa;
  input            tse_mac2_control_port_waitrequest_from_sa;
  input   [ 31: 0] tse_mac3_control_port_readdata_from_sa;
  input            tse_mac3_control_port_waitrequest_from_sa;
  input   [ 31: 0] tse_mac_control_port_readdata_from_sa;
  input            tse_mac_control_port_waitrequest_from_sa;

  reg              active_and_waiting_last_time;
  reg     [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_last_time;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  wire             ethernet_port_interface_0_avalon_master_1_is_granted_some_slave;
  reg              ethernet_port_interface_0_avalon_master_1_latency_counter;
  reg              ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected;
  reg              ethernet_port_interface_0_avalon_master_1_read_last_time;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_1_readdata;
  wire             ethernet_port_interface_0_avalon_master_1_readdatavalid;
  wire             ethernet_port_interface_0_avalon_master_1_run;
  wire             ethernet_port_interface_0_avalon_master_1_waitrequest;
  reg              ethernet_port_interface_0_avalon_master_1_write_last_time;
  reg     [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata_last_time;
  wire             latency_load_value;
  wire             p1_ethernet_port_interface_0_avalon_master_1_latency_counter;
  wire             pre_flush_ethernet_port_interface_0_avalon_master_1_readdatavalid;
  wire             r_1;
  wire             r_2;
  //r_1 master_run cascaded wait assignment, which is an e_assign
  assign r_1 = 1 & (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port) & (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port | ~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & 1 & (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port) & (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port | ~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac1_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac1_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & 1 & (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port);

  //cascaded wait assignment, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_run = r_1 & r_2;

  //r_2 master_run cascaded wait assignment, which is an e_assign
  assign r_2 = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port | ~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac2_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac2_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & 1 & (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port) & (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port | ~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac3_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write)))) & ((~ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port | ~(ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write) | (1 & ~tse_mac3_control_port_waitrequest_from_sa & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write))));

  //optimize select-logic by passing only those address bits which matter.
  assign ethernet_port_interface_0_avalon_master_1_address_to_slave = {20'b100000000000000000,
    ethernet_port_interface_0_avalon_master_1_address[11 : 0]};

  //ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected assignment, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected <= 0;
      else 
        ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected <= ethernet_port_interface_0_avalon_master_1_read & ethernet_port_interface_0_avalon_master_1_run & ~ethernet_port_interface_0_avalon_master_1_is_granted_some_slave;
    end


  //some slave is getting selected, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_is_granted_some_slave = ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port |
    ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port |
    ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port |
    ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_ethernet_port_interface_0_avalon_master_1_readdatavalid = 0;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_readdatavalid = ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected |
    pre_flush_ethernet_port_interface_0_avalon_master_1_readdatavalid |
    ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port |
    ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected |
    pre_flush_ethernet_port_interface_0_avalon_master_1_readdatavalid |
    ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port |
    ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected |
    pre_flush_ethernet_port_interface_0_avalon_master_1_readdatavalid |
    ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port |
    ethernet_port_interface_0_avalon_master_1_read_but_no_slave_selected |
    pre_flush_ethernet_port_interface_0_avalon_master_1_readdatavalid |
    ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port;

  //ethernet_port_interface_0/avalon_master_1 readdata mux, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_readdata = ({32 {~(ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_read)}} | tse_mac_control_port_readdata_from_sa) &
    ({32 {~(ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_read)}} | tse_mac1_control_port_readdata_from_sa) &
    ({32 {~(ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_read)}} | tse_mac2_control_port_readdata_from_sa) &
    ({32 {~(ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_read)}} | tse_mac3_control_port_readdata_from_sa);

  //actual waitrequest port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_waitrequest = ~ethernet_port_interface_0_avalon_master_1_run;

  //latent max counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_1_latency_counter <= 0;
      else 
        ethernet_port_interface_0_avalon_master_1_latency_counter <= p1_ethernet_port_interface_0_avalon_master_1_latency_counter;
    end


  //latency counter load mux, which is an e_mux
  assign p1_ethernet_port_interface_0_avalon_master_1_latency_counter = ((ethernet_port_interface_0_avalon_master_1_run & ethernet_port_interface_0_avalon_master_1_read))? latency_load_value :
    (ethernet_port_interface_0_avalon_master_1_latency_counter)? ethernet_port_interface_0_avalon_master_1_latency_counter - 1 :
    0;

  //read latency load values, which is an e_mux
  assign latency_load_value = 0;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //ethernet_port_interface_0_avalon_master_1_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_1_address_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_1_address_last_time <= ethernet_port_interface_0_avalon_master_1_address;
    end


  //ethernet_port_interface_0/avalon_master_1 waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= ethernet_port_interface_0_avalon_master_1_waitrequest & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write);
    end


  //ethernet_port_interface_0_avalon_master_1_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_1_address != ethernet_port_interface_0_avalon_master_1_address_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_1_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_1_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_1_read_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_1_read_last_time <= ethernet_port_interface_0_avalon_master_1_read;
    end


  //ethernet_port_interface_0_avalon_master_1_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_1_read != ethernet_port_interface_0_avalon_master_1_read_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_1_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_1_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_1_write_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_1_write_last_time <= ethernet_port_interface_0_avalon_master_1_write;
    end


  //ethernet_port_interface_0_avalon_master_1_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_1_write != ethernet_port_interface_0_avalon_master_1_write_last_time))
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_1_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //ethernet_port_interface_0_avalon_master_1_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          ethernet_port_interface_0_avalon_master_1_writedata_last_time <= 0;
      else 
        ethernet_port_interface_0_avalon_master_1_writedata_last_time <= ethernet_port_interface_0_avalon_master_1_writedata;
    end


  //ethernet_port_interface_0_avalon_master_1_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (ethernet_port_interface_0_avalon_master_1_writedata != ethernet_port_interface_0_avalon_master_1_writedata_last_time) & ethernet_port_interface_0_avalon_master_1_write)
        begin
          $write("%0d ns: ethernet_port_interface_0_avalon_master_1_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_source_arbitrator (
                                                                      // inputs:
                                                                       clk,
                                                                       ethernet_port_interface_0_avalon_streaming_source_data,
                                                                       ethernet_port_interface_0_avalon_streaming_source_endofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_source_error,
                                                                       ethernet_port_interface_0_avalon_streaming_source_startofpacket,
                                                                       ethernet_port_interface_0_avalon_streaming_source_valid,
                                                                       reset_n,
                                                                       tse_mac_transmit_ready_from_sa,

                                                                      // outputs:
                                                                       ethernet_port_interface_0_avalon_streaming_source_ready
                                                                    )
;

  output           ethernet_port_interface_0_avalon_streaming_source_ready;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_data;
  input            ethernet_port_interface_0_avalon_streaming_source_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_error;
  input            ethernet_port_interface_0_avalon_streaming_source_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_valid;
  input            reset_n;
  input            tse_mac_transmit_ready_from_sa;

  wire             ethernet_port_interface_0_avalon_streaming_source_ready;
  //mux ethernet_port_interface_0_avalon_streaming_source_ready, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_source_ready = tse_mac_transmit_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_source_1_arbitrator (
                                                                        // inputs:
                                                                         clk,
                                                                         ethernet_port_interface_0_avalon_streaming_source_1_data,
                                                                         ethernet_port_interface_0_avalon_streaming_source_1_endofpacket,
                                                                         ethernet_port_interface_0_avalon_streaming_source_1_error,
                                                                         ethernet_port_interface_0_avalon_streaming_source_1_startofpacket,
                                                                         ethernet_port_interface_0_avalon_streaming_source_1_valid,
                                                                         reset_n,
                                                                         tse_mac1_transmit_ready_from_sa,

                                                                        // outputs:
                                                                         ethernet_port_interface_0_avalon_streaming_source_1_ready
                                                                      )
;

  output           ethernet_port_interface_0_avalon_streaming_source_1_ready;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_1_data;
  input            ethernet_port_interface_0_avalon_streaming_source_1_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_1_error;
  input            ethernet_port_interface_0_avalon_streaming_source_1_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_1_valid;
  input            reset_n;
  input            tse_mac1_transmit_ready_from_sa;

  wire             ethernet_port_interface_0_avalon_streaming_source_1_ready;
  //mux ethernet_port_interface_0_avalon_streaming_source_1_ready, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_source_1_ready = tse_mac1_transmit_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_source_2_arbitrator (
                                                                        // inputs:
                                                                         clk,
                                                                         ethernet_port_interface_0_avalon_streaming_source_2_data,
                                                                         ethernet_port_interface_0_avalon_streaming_source_2_endofpacket,
                                                                         ethernet_port_interface_0_avalon_streaming_source_2_error,
                                                                         ethernet_port_interface_0_avalon_streaming_source_2_startofpacket,
                                                                         ethernet_port_interface_0_avalon_streaming_source_2_valid,
                                                                         reset_n,
                                                                         tse_mac2_transmit_ready_from_sa,

                                                                        // outputs:
                                                                         ethernet_port_interface_0_avalon_streaming_source_2_ready
                                                                      )
;

  output           ethernet_port_interface_0_avalon_streaming_source_2_ready;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_2_data;
  input            ethernet_port_interface_0_avalon_streaming_source_2_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_2_error;
  input            ethernet_port_interface_0_avalon_streaming_source_2_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_2_valid;
  input            reset_n;
  input            tse_mac2_transmit_ready_from_sa;

  wire             ethernet_port_interface_0_avalon_streaming_source_2_ready;
  //mux ethernet_port_interface_0_avalon_streaming_source_2_ready, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_source_2_ready = tse_mac2_transmit_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module ethernet_port_interface_0_avalon_streaming_source_3_arbitrator (
                                                                        // inputs:
                                                                         clk,
                                                                         ethernet_port_interface_0_avalon_streaming_source_3_data,
                                                                         ethernet_port_interface_0_avalon_streaming_source_3_endofpacket,
                                                                         ethernet_port_interface_0_avalon_streaming_source_3_error,
                                                                         ethernet_port_interface_0_avalon_streaming_source_3_startofpacket,
                                                                         ethernet_port_interface_0_avalon_streaming_source_3_valid,
                                                                         reset_n,
                                                                         tse_mac3_transmit_ready_from_sa,

                                                                        // outputs:
                                                                         ethernet_port_interface_0_avalon_streaming_source_3_ready
                                                                      )
;

  output           ethernet_port_interface_0_avalon_streaming_source_3_ready;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_3_data;
  input            ethernet_port_interface_0_avalon_streaming_source_3_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_3_error;
  input            ethernet_port_interface_0_avalon_streaming_source_3_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_3_valid;
  input            reset_n;
  input            tse_mac3_transmit_ready_from_sa;

  wire             ethernet_port_interface_0_avalon_streaming_source_3_ready;
  //mux ethernet_port_interface_0_avalon_streaming_source_3_ready, which is an e_mux
  assign ethernet_port_interface_0_avalon_streaming_source_3_ready = tse_mac3_transmit_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module high_res_timer_s1_arbitrator (
                                      // inputs:
                                       clk,
                                       high_res_timer_s1_readdata,
                                       master_0_latency_counter,
                                       master_0_master_address_to_slave,
                                       master_0_master_read,
                                       master_0_master_write,
                                       master_0_master_writedata,
                                       master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                       reset_n,

                                      // outputs:
                                       d1_high_res_timer_s1_end_xfer,
                                       high_res_timer_s1_address,
                                       high_res_timer_s1_chipselect,
                                       high_res_timer_s1_readdata_from_sa,
                                       high_res_timer_s1_reset_n,
                                       high_res_timer_s1_write_n,
                                       high_res_timer_s1_writedata,
                                       master_0_granted_high_res_timer_s1,
                                       master_0_qualified_request_high_res_timer_s1,
                                       master_0_read_data_valid_high_res_timer_s1,
                                       master_0_requests_high_res_timer_s1
                                    )
;

  output           d1_high_res_timer_s1_end_xfer;
  output  [  2: 0] high_res_timer_s1_address;
  output           high_res_timer_s1_chipselect;
  output  [ 15: 0] high_res_timer_s1_readdata_from_sa;
  output           high_res_timer_s1_reset_n;
  output           high_res_timer_s1_write_n;
  output  [ 15: 0] high_res_timer_s1_writedata;
  output           master_0_granted_high_res_timer_s1;
  output           master_0_qualified_request_high_res_timer_s1;
  output           master_0_read_data_valid_high_res_timer_s1;
  output           master_0_requests_high_res_timer_s1;
  input            clk;
  input   [ 15: 0] high_res_timer_s1_readdata;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;

  reg              d1_high_res_timer_s1_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_high_res_timer_s1;
  wire    [  2: 0] high_res_timer_s1_address;
  wire             high_res_timer_s1_allgrants;
  wire             high_res_timer_s1_allow_new_arb_cycle;
  wire             high_res_timer_s1_any_bursting_master_saved_grant;
  wire             high_res_timer_s1_any_continuerequest;
  wire             high_res_timer_s1_arb_counter_enable;
  reg              high_res_timer_s1_arb_share_counter;
  wire             high_res_timer_s1_arb_share_counter_next_value;
  wire             high_res_timer_s1_arb_share_set_values;
  wire             high_res_timer_s1_beginbursttransfer_internal;
  wire             high_res_timer_s1_begins_xfer;
  wire             high_res_timer_s1_chipselect;
  wire             high_res_timer_s1_end_xfer;
  wire             high_res_timer_s1_firsttransfer;
  wire             high_res_timer_s1_grant_vector;
  wire             high_res_timer_s1_in_a_read_cycle;
  wire             high_res_timer_s1_in_a_write_cycle;
  wire             high_res_timer_s1_master_qreq_vector;
  wire             high_res_timer_s1_non_bursting_master_requests;
  wire    [ 15: 0] high_res_timer_s1_readdata_from_sa;
  reg              high_res_timer_s1_reg_firsttransfer;
  wire             high_res_timer_s1_reset_n;
  reg              high_res_timer_s1_slavearbiterlockenable;
  wire             high_res_timer_s1_slavearbiterlockenable2;
  wire             high_res_timer_s1_unreg_firsttransfer;
  wire             high_res_timer_s1_waits_for_read;
  wire             high_res_timer_s1_waits_for_write;
  wire             high_res_timer_s1_write_n;
  wire    [ 15: 0] high_res_timer_s1_writedata;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             master_0_granted_high_res_timer_s1;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_high_res_timer_s1;
  wire             master_0_read_data_valid_high_res_timer_s1;
  wire             master_0_requests_high_res_timer_s1;
  wire             master_0_saved_grant_high_res_timer_s1;
  wire    [ 31: 0] shifted_address_to_high_res_timer_s1_from_master_0_master;
  wire             wait_for_high_res_timer_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~high_res_timer_s1_end_xfer;
    end


  assign high_res_timer_s1_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_high_res_timer_s1));
  //assign high_res_timer_s1_readdata_from_sa = high_res_timer_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign high_res_timer_s1_readdata_from_sa = high_res_timer_s1_readdata;

  assign master_0_requests_high_res_timer_s1 = ({master_0_master_address_to_slave[31 : 5] , 5'b0} == 32'h21001040) & (master_0_master_read | master_0_master_write);
  //high_res_timer_s1_arb_share_counter set values, which is an e_mux
  assign high_res_timer_s1_arb_share_set_values = 1;

  //high_res_timer_s1_non_bursting_master_requests mux, which is an e_mux
  assign high_res_timer_s1_non_bursting_master_requests = master_0_requests_high_res_timer_s1;

  //high_res_timer_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign high_res_timer_s1_any_bursting_master_saved_grant = 0;

  //high_res_timer_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign high_res_timer_s1_arb_share_counter_next_value = high_res_timer_s1_firsttransfer ? (high_res_timer_s1_arb_share_set_values - 1) : |high_res_timer_s1_arb_share_counter ? (high_res_timer_s1_arb_share_counter - 1) : 0;

  //high_res_timer_s1_allgrants all slave grants, which is an e_mux
  assign high_res_timer_s1_allgrants = |high_res_timer_s1_grant_vector;

  //high_res_timer_s1_end_xfer assignment, which is an e_assign
  assign high_res_timer_s1_end_xfer = ~(high_res_timer_s1_waits_for_read | high_res_timer_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_high_res_timer_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_high_res_timer_s1 = high_res_timer_s1_end_xfer & (~high_res_timer_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //high_res_timer_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign high_res_timer_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_high_res_timer_s1 & high_res_timer_s1_allgrants) | (end_xfer_arb_share_counter_term_high_res_timer_s1 & ~high_res_timer_s1_non_bursting_master_requests);

  //high_res_timer_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          high_res_timer_s1_arb_share_counter <= 0;
      else if (high_res_timer_s1_arb_counter_enable)
          high_res_timer_s1_arb_share_counter <= high_res_timer_s1_arb_share_counter_next_value;
    end


  //high_res_timer_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          high_res_timer_s1_slavearbiterlockenable <= 0;
      else if ((|high_res_timer_s1_master_qreq_vector & end_xfer_arb_share_counter_term_high_res_timer_s1) | (end_xfer_arb_share_counter_term_high_res_timer_s1 & ~high_res_timer_s1_non_bursting_master_requests))
          high_res_timer_s1_slavearbiterlockenable <= |high_res_timer_s1_arb_share_counter_next_value;
    end


  //master_0/master high_res_timer/s1 arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = high_res_timer_s1_slavearbiterlockenable & master_0_master_continuerequest;

  //high_res_timer_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign high_res_timer_s1_slavearbiterlockenable2 = |high_res_timer_s1_arb_share_counter_next_value;

  //master_0/master high_res_timer/s1 arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = high_res_timer_s1_slavearbiterlockenable2 & master_0_master_continuerequest;

  //high_res_timer_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign high_res_timer_s1_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_high_res_timer_s1 = master_0_requests_high_res_timer_s1 & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))));
  //local readdatavalid master_0_read_data_valid_high_res_timer_s1, which is an e_mux
  assign master_0_read_data_valid_high_res_timer_s1 = master_0_granted_high_res_timer_s1 & master_0_master_read & ~high_res_timer_s1_waits_for_read;

  //high_res_timer_s1_writedata mux, which is an e_mux
  assign high_res_timer_s1_writedata = master_0_master_writedata;

  //master is always granted when requested
  assign master_0_granted_high_res_timer_s1 = master_0_qualified_request_high_res_timer_s1;

  //master_0/master saved-grant high_res_timer/s1, which is an e_assign
  assign master_0_saved_grant_high_res_timer_s1 = master_0_requests_high_res_timer_s1;

  //allow new arb cycle for high_res_timer/s1, which is an e_assign
  assign high_res_timer_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign high_res_timer_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign high_res_timer_s1_master_qreq_vector = 1;

  //high_res_timer_s1_reset_n assignment, which is an e_assign
  assign high_res_timer_s1_reset_n = reset_n;

  assign high_res_timer_s1_chipselect = master_0_granted_high_res_timer_s1;
  //high_res_timer_s1_firsttransfer first transaction, which is an e_assign
  assign high_res_timer_s1_firsttransfer = high_res_timer_s1_begins_xfer ? high_res_timer_s1_unreg_firsttransfer : high_res_timer_s1_reg_firsttransfer;

  //high_res_timer_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign high_res_timer_s1_unreg_firsttransfer = ~(high_res_timer_s1_slavearbiterlockenable & high_res_timer_s1_any_continuerequest);

  //high_res_timer_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          high_res_timer_s1_reg_firsttransfer <= 1'b1;
      else if (high_res_timer_s1_begins_xfer)
          high_res_timer_s1_reg_firsttransfer <= high_res_timer_s1_unreg_firsttransfer;
    end


  //high_res_timer_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign high_res_timer_s1_beginbursttransfer_internal = high_res_timer_s1_begins_xfer;

  //~high_res_timer_s1_write_n assignment, which is an e_mux
  assign high_res_timer_s1_write_n = ~(master_0_granted_high_res_timer_s1 & master_0_master_write);

  assign shifted_address_to_high_res_timer_s1_from_master_0_master = master_0_master_address_to_slave;
  //high_res_timer_s1_address mux, which is an e_mux
  assign high_res_timer_s1_address = shifted_address_to_high_res_timer_s1_from_master_0_master >> 2;

  //d1_high_res_timer_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_high_res_timer_s1_end_xfer <= 1;
      else 
        d1_high_res_timer_s1_end_xfer <= high_res_timer_s1_end_xfer;
    end


  //high_res_timer_s1_waits_for_read in a cycle, which is an e_mux
  assign high_res_timer_s1_waits_for_read = high_res_timer_s1_in_a_read_cycle & high_res_timer_s1_begins_xfer;

  //high_res_timer_s1_in_a_read_cycle assignment, which is an e_assign
  assign high_res_timer_s1_in_a_read_cycle = master_0_granted_high_res_timer_s1 & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = high_res_timer_s1_in_a_read_cycle;

  //high_res_timer_s1_waits_for_write in a cycle, which is an e_mux
  assign high_res_timer_s1_waits_for_write = high_res_timer_s1_in_a_write_cycle & 0;

  //high_res_timer_s1_in_a_write_cycle assignment, which is an e_assign
  assign high_res_timer_s1_in_a_write_cycle = master_0_granted_high_res_timer_s1 & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = high_res_timer_s1_in_a_write_cycle;

  assign wait_for_high_res_timer_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //high_res_timer/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module jtag_uart_avalon_jtag_slave_arbitrator (
                                                // inputs:
                                                 clk,
                                                 jtag_uart_avalon_jtag_slave_dataavailable,
                                                 jtag_uart_avalon_jtag_slave_readdata,
                                                 jtag_uart_avalon_jtag_slave_readyfordata,
                                                 jtag_uart_avalon_jtag_slave_waitrequest,
                                                 master_0_latency_counter,
                                                 master_0_master_address_to_slave,
                                                 master_0_master_read,
                                                 master_0_master_write,
                                                 master_0_master_writedata,
                                                 master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                                 reset_n,

                                                // outputs:
                                                 d1_jtag_uart_avalon_jtag_slave_end_xfer,
                                                 jtag_uart_avalon_jtag_slave_address,
                                                 jtag_uart_avalon_jtag_slave_chipselect,
                                                 jtag_uart_avalon_jtag_slave_dataavailable_from_sa,
                                                 jtag_uart_avalon_jtag_slave_read_n,
                                                 jtag_uart_avalon_jtag_slave_readdata_from_sa,
                                                 jtag_uart_avalon_jtag_slave_readyfordata_from_sa,
                                                 jtag_uart_avalon_jtag_slave_reset_n,
                                                 jtag_uart_avalon_jtag_slave_waitrequest_from_sa,
                                                 jtag_uart_avalon_jtag_slave_write_n,
                                                 jtag_uart_avalon_jtag_slave_writedata,
                                                 master_0_granted_jtag_uart_avalon_jtag_slave,
                                                 master_0_qualified_request_jtag_uart_avalon_jtag_slave,
                                                 master_0_read_data_valid_jtag_uart_avalon_jtag_slave,
                                                 master_0_requests_jtag_uart_avalon_jtag_slave
                                              )
;

  output           d1_jtag_uart_avalon_jtag_slave_end_xfer;
  output           jtag_uart_avalon_jtag_slave_address;
  output           jtag_uart_avalon_jtag_slave_chipselect;
  output           jtag_uart_avalon_jtag_slave_dataavailable_from_sa;
  output           jtag_uart_avalon_jtag_slave_read_n;
  output  [ 31: 0] jtag_uart_avalon_jtag_slave_readdata_from_sa;
  output           jtag_uart_avalon_jtag_slave_readyfordata_from_sa;
  output           jtag_uart_avalon_jtag_slave_reset_n;
  output           jtag_uart_avalon_jtag_slave_waitrequest_from_sa;
  output           jtag_uart_avalon_jtag_slave_write_n;
  output  [ 31: 0] jtag_uart_avalon_jtag_slave_writedata;
  output           master_0_granted_jtag_uart_avalon_jtag_slave;
  output           master_0_qualified_request_jtag_uart_avalon_jtag_slave;
  output           master_0_read_data_valid_jtag_uart_avalon_jtag_slave;
  output           master_0_requests_jtag_uart_avalon_jtag_slave;
  input            clk;
  input            jtag_uart_avalon_jtag_slave_dataavailable;
  input   [ 31: 0] jtag_uart_avalon_jtag_slave_readdata;
  input            jtag_uart_avalon_jtag_slave_readyfordata;
  input            jtag_uart_avalon_jtag_slave_waitrequest;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;

  reg              d1_jtag_uart_avalon_jtag_slave_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             jtag_uart_avalon_jtag_slave_address;
  wire             jtag_uart_avalon_jtag_slave_allgrants;
  wire             jtag_uart_avalon_jtag_slave_allow_new_arb_cycle;
  wire             jtag_uart_avalon_jtag_slave_any_bursting_master_saved_grant;
  wire             jtag_uart_avalon_jtag_slave_any_continuerequest;
  wire             jtag_uart_avalon_jtag_slave_arb_counter_enable;
  reg              jtag_uart_avalon_jtag_slave_arb_share_counter;
  wire             jtag_uart_avalon_jtag_slave_arb_share_counter_next_value;
  wire             jtag_uart_avalon_jtag_slave_arb_share_set_values;
  wire             jtag_uart_avalon_jtag_slave_beginbursttransfer_internal;
  wire             jtag_uart_avalon_jtag_slave_begins_xfer;
  wire             jtag_uart_avalon_jtag_slave_chipselect;
  wire             jtag_uart_avalon_jtag_slave_dataavailable_from_sa;
  wire             jtag_uart_avalon_jtag_slave_end_xfer;
  wire             jtag_uart_avalon_jtag_slave_firsttransfer;
  wire             jtag_uart_avalon_jtag_slave_grant_vector;
  wire             jtag_uart_avalon_jtag_slave_in_a_read_cycle;
  wire             jtag_uart_avalon_jtag_slave_in_a_write_cycle;
  wire             jtag_uart_avalon_jtag_slave_master_qreq_vector;
  wire             jtag_uart_avalon_jtag_slave_non_bursting_master_requests;
  wire             jtag_uart_avalon_jtag_slave_read_n;
  wire    [ 31: 0] jtag_uart_avalon_jtag_slave_readdata_from_sa;
  wire             jtag_uart_avalon_jtag_slave_readyfordata_from_sa;
  reg              jtag_uart_avalon_jtag_slave_reg_firsttransfer;
  wire             jtag_uart_avalon_jtag_slave_reset_n;
  reg              jtag_uart_avalon_jtag_slave_slavearbiterlockenable;
  wire             jtag_uart_avalon_jtag_slave_slavearbiterlockenable2;
  wire             jtag_uart_avalon_jtag_slave_unreg_firsttransfer;
  wire             jtag_uart_avalon_jtag_slave_waitrequest_from_sa;
  wire             jtag_uart_avalon_jtag_slave_waits_for_read;
  wire             jtag_uart_avalon_jtag_slave_waits_for_write;
  wire             jtag_uart_avalon_jtag_slave_write_n;
  wire    [ 31: 0] jtag_uart_avalon_jtag_slave_writedata;
  wire             master_0_granted_jtag_uart_avalon_jtag_slave;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_jtag_uart_avalon_jtag_slave;
  wire             master_0_read_data_valid_jtag_uart_avalon_jtag_slave;
  wire             master_0_requests_jtag_uart_avalon_jtag_slave;
  wire             master_0_saved_grant_jtag_uart_avalon_jtag_slave;
  wire    [ 31: 0] shifted_address_to_jtag_uart_avalon_jtag_slave_from_master_0_master;
  wire             wait_for_jtag_uart_avalon_jtag_slave_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~jtag_uart_avalon_jtag_slave_end_xfer;
    end


  assign jtag_uart_avalon_jtag_slave_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_jtag_uart_avalon_jtag_slave));
  //assign jtag_uart_avalon_jtag_slave_readdata_from_sa = jtag_uart_avalon_jtag_slave_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_readdata_from_sa = jtag_uart_avalon_jtag_slave_readdata;

  assign master_0_requests_jtag_uart_avalon_jtag_slave = ({master_0_master_address_to_slave[31 : 3] , 3'b0} == 32'h21001080) & (master_0_master_read | master_0_master_write);
  //assign jtag_uart_avalon_jtag_slave_dataavailable_from_sa = jtag_uart_avalon_jtag_slave_dataavailable so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_dataavailable_from_sa = jtag_uart_avalon_jtag_slave_dataavailable;

  //assign jtag_uart_avalon_jtag_slave_readyfordata_from_sa = jtag_uart_avalon_jtag_slave_readyfordata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_readyfordata_from_sa = jtag_uart_avalon_jtag_slave_readyfordata;

  //assign jtag_uart_avalon_jtag_slave_waitrequest_from_sa = jtag_uart_avalon_jtag_slave_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_waitrequest_from_sa = jtag_uart_avalon_jtag_slave_waitrequest;

  //jtag_uart_avalon_jtag_slave_arb_share_counter set values, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_arb_share_set_values = 1;

  //jtag_uart_avalon_jtag_slave_non_bursting_master_requests mux, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_non_bursting_master_requests = master_0_requests_jtag_uart_avalon_jtag_slave;

  //jtag_uart_avalon_jtag_slave_any_bursting_master_saved_grant mux, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_any_bursting_master_saved_grant = 0;

  //jtag_uart_avalon_jtag_slave_arb_share_counter_next_value assignment, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_arb_share_counter_next_value = jtag_uart_avalon_jtag_slave_firsttransfer ? (jtag_uart_avalon_jtag_slave_arb_share_set_values - 1) : |jtag_uart_avalon_jtag_slave_arb_share_counter ? (jtag_uart_avalon_jtag_slave_arb_share_counter - 1) : 0;

  //jtag_uart_avalon_jtag_slave_allgrants all slave grants, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_allgrants = |jtag_uart_avalon_jtag_slave_grant_vector;

  //jtag_uart_avalon_jtag_slave_end_xfer assignment, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_end_xfer = ~(jtag_uart_avalon_jtag_slave_waits_for_read | jtag_uart_avalon_jtag_slave_waits_for_write);

  //end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave = jtag_uart_avalon_jtag_slave_end_xfer & (~jtag_uart_avalon_jtag_slave_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //jtag_uart_avalon_jtag_slave_arb_share_counter arbitration counter enable, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_arb_counter_enable = (end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave & jtag_uart_avalon_jtag_slave_allgrants) | (end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave & ~jtag_uart_avalon_jtag_slave_non_bursting_master_requests);

  //jtag_uart_avalon_jtag_slave_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          jtag_uart_avalon_jtag_slave_arb_share_counter <= 0;
      else if (jtag_uart_avalon_jtag_slave_arb_counter_enable)
          jtag_uart_avalon_jtag_slave_arb_share_counter <= jtag_uart_avalon_jtag_slave_arb_share_counter_next_value;
    end


  //jtag_uart_avalon_jtag_slave_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          jtag_uart_avalon_jtag_slave_slavearbiterlockenable <= 0;
      else if ((|jtag_uart_avalon_jtag_slave_master_qreq_vector & end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave) | (end_xfer_arb_share_counter_term_jtag_uart_avalon_jtag_slave & ~jtag_uart_avalon_jtag_slave_non_bursting_master_requests))
          jtag_uart_avalon_jtag_slave_slavearbiterlockenable <= |jtag_uart_avalon_jtag_slave_arb_share_counter_next_value;
    end


  //master_0/master jtag_uart/avalon_jtag_slave arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = jtag_uart_avalon_jtag_slave_slavearbiterlockenable & master_0_master_continuerequest;

  //jtag_uart_avalon_jtag_slave_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_slavearbiterlockenable2 = |jtag_uart_avalon_jtag_slave_arb_share_counter_next_value;

  //master_0/master jtag_uart/avalon_jtag_slave arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = jtag_uart_avalon_jtag_slave_slavearbiterlockenable2 & master_0_master_continuerequest;

  //jtag_uart_avalon_jtag_slave_any_continuerequest at least one master continues requesting, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_jtag_uart_avalon_jtag_slave = master_0_requests_jtag_uart_avalon_jtag_slave & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))));
  //local readdatavalid master_0_read_data_valid_jtag_uart_avalon_jtag_slave, which is an e_mux
  assign master_0_read_data_valid_jtag_uart_avalon_jtag_slave = master_0_granted_jtag_uart_avalon_jtag_slave & master_0_master_read & ~jtag_uart_avalon_jtag_slave_waits_for_read;

  //jtag_uart_avalon_jtag_slave_writedata mux, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_writedata = master_0_master_writedata;

  //master is always granted when requested
  assign master_0_granted_jtag_uart_avalon_jtag_slave = master_0_qualified_request_jtag_uart_avalon_jtag_slave;

  //master_0/master saved-grant jtag_uart/avalon_jtag_slave, which is an e_assign
  assign master_0_saved_grant_jtag_uart_avalon_jtag_slave = master_0_requests_jtag_uart_avalon_jtag_slave;

  //allow new arb cycle for jtag_uart/avalon_jtag_slave, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign jtag_uart_avalon_jtag_slave_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign jtag_uart_avalon_jtag_slave_master_qreq_vector = 1;

  //jtag_uart_avalon_jtag_slave_reset_n assignment, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_reset_n = reset_n;

  assign jtag_uart_avalon_jtag_slave_chipselect = master_0_granted_jtag_uart_avalon_jtag_slave;
  //jtag_uart_avalon_jtag_slave_firsttransfer first transaction, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_firsttransfer = jtag_uart_avalon_jtag_slave_begins_xfer ? jtag_uart_avalon_jtag_slave_unreg_firsttransfer : jtag_uart_avalon_jtag_slave_reg_firsttransfer;

  //jtag_uart_avalon_jtag_slave_unreg_firsttransfer first transaction, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_unreg_firsttransfer = ~(jtag_uart_avalon_jtag_slave_slavearbiterlockenable & jtag_uart_avalon_jtag_slave_any_continuerequest);

  //jtag_uart_avalon_jtag_slave_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          jtag_uart_avalon_jtag_slave_reg_firsttransfer <= 1'b1;
      else if (jtag_uart_avalon_jtag_slave_begins_xfer)
          jtag_uart_avalon_jtag_slave_reg_firsttransfer <= jtag_uart_avalon_jtag_slave_unreg_firsttransfer;
    end


  //jtag_uart_avalon_jtag_slave_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_beginbursttransfer_internal = jtag_uart_avalon_jtag_slave_begins_xfer;

  //~jtag_uart_avalon_jtag_slave_read_n assignment, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_read_n = ~(master_0_granted_jtag_uart_avalon_jtag_slave & master_0_master_read);

  //~jtag_uart_avalon_jtag_slave_write_n assignment, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_write_n = ~(master_0_granted_jtag_uart_avalon_jtag_slave & master_0_master_write);

  assign shifted_address_to_jtag_uart_avalon_jtag_slave_from_master_0_master = master_0_master_address_to_slave;
  //jtag_uart_avalon_jtag_slave_address mux, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_address = shifted_address_to_jtag_uart_avalon_jtag_slave_from_master_0_master >> 2;

  //d1_jtag_uart_avalon_jtag_slave_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_jtag_uart_avalon_jtag_slave_end_xfer <= 1;
      else 
        d1_jtag_uart_avalon_jtag_slave_end_xfer <= jtag_uart_avalon_jtag_slave_end_xfer;
    end


  //jtag_uart_avalon_jtag_slave_waits_for_read in a cycle, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_waits_for_read = jtag_uart_avalon_jtag_slave_in_a_read_cycle & jtag_uart_avalon_jtag_slave_waitrequest_from_sa;

  //jtag_uart_avalon_jtag_slave_in_a_read_cycle assignment, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_in_a_read_cycle = master_0_granted_jtag_uart_avalon_jtag_slave & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = jtag_uart_avalon_jtag_slave_in_a_read_cycle;

  //jtag_uart_avalon_jtag_slave_waits_for_write in a cycle, which is an e_mux
  assign jtag_uart_avalon_jtag_slave_waits_for_write = jtag_uart_avalon_jtag_slave_in_a_write_cycle & jtag_uart_avalon_jtag_slave_waitrequest_from_sa;

  //jtag_uart_avalon_jtag_slave_in_a_write_cycle assignment, which is an e_assign
  assign jtag_uart_avalon_jtag_slave_in_a_write_cycle = master_0_granted_jtag_uart_avalon_jtag_slave & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = jtag_uart_avalon_jtag_slave_in_a_write_cycle;

  assign wait_for_jtag_uart_avalon_jtag_slave_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //jtag_uart/avalon_jtag_slave enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module led_pio_s1_arbitrator (
                               // inputs:
                                clk,
                                led_pio_s1_readdata,
                                peripheral_clock_crossing_m1_address_to_slave,
                                peripheral_clock_crossing_m1_latency_counter,
                                peripheral_clock_crossing_m1_nativeaddress,
                                peripheral_clock_crossing_m1_read,
                                peripheral_clock_crossing_m1_write,
                                peripheral_clock_crossing_m1_writedata,
                                reset_n,

                               // outputs:
                                d1_led_pio_s1_end_xfer,
                                led_pio_s1_address,
                                led_pio_s1_chipselect,
                                led_pio_s1_readdata_from_sa,
                                led_pio_s1_reset_n,
                                led_pio_s1_write_n,
                                led_pio_s1_writedata,
                                peripheral_clock_crossing_m1_granted_led_pio_s1,
                                peripheral_clock_crossing_m1_qualified_request_led_pio_s1,
                                peripheral_clock_crossing_m1_read_data_valid_led_pio_s1,
                                peripheral_clock_crossing_m1_requests_led_pio_s1
                             )
;

  output           d1_led_pio_s1_end_xfer;
  output  [  1: 0] led_pio_s1_address;
  output           led_pio_s1_chipselect;
  output  [ 31: 0] led_pio_s1_readdata_from_sa;
  output           led_pio_s1_reset_n;
  output           led_pio_s1_write_n;
  output  [ 31: 0] led_pio_s1_writedata;
  output           peripheral_clock_crossing_m1_granted_led_pio_s1;
  output           peripheral_clock_crossing_m1_qualified_request_led_pio_s1;
  output           peripheral_clock_crossing_m1_read_data_valid_led_pio_s1;
  output           peripheral_clock_crossing_m1_requests_led_pio_s1;
  input            clk;
  input   [ 31: 0] led_pio_s1_readdata;
  input   [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  input            peripheral_clock_crossing_m1_latency_counter;
  input   [ 27: 0] peripheral_clock_crossing_m1_nativeaddress;
  input            peripheral_clock_crossing_m1_read;
  input            peripheral_clock_crossing_m1_write;
  input   [ 31: 0] peripheral_clock_crossing_m1_writedata;
  input            reset_n;

  reg              d1_led_pio_s1_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_led_pio_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire    [  1: 0] led_pio_s1_address;
  wire             led_pio_s1_allgrants;
  wire             led_pio_s1_allow_new_arb_cycle;
  wire             led_pio_s1_any_bursting_master_saved_grant;
  wire             led_pio_s1_any_continuerequest;
  wire             led_pio_s1_arb_counter_enable;
  reg              led_pio_s1_arb_share_counter;
  wire             led_pio_s1_arb_share_counter_next_value;
  wire             led_pio_s1_arb_share_set_values;
  wire             led_pio_s1_beginbursttransfer_internal;
  wire             led_pio_s1_begins_xfer;
  wire             led_pio_s1_chipselect;
  wire             led_pio_s1_end_xfer;
  wire             led_pio_s1_firsttransfer;
  wire             led_pio_s1_grant_vector;
  wire             led_pio_s1_in_a_read_cycle;
  wire             led_pio_s1_in_a_write_cycle;
  wire             led_pio_s1_master_qreq_vector;
  wire             led_pio_s1_non_bursting_master_requests;
  wire    [ 31: 0] led_pio_s1_readdata_from_sa;
  reg              led_pio_s1_reg_firsttransfer;
  wire             led_pio_s1_reset_n;
  reg              led_pio_s1_slavearbiterlockenable;
  wire             led_pio_s1_slavearbiterlockenable2;
  wire             led_pio_s1_unreg_firsttransfer;
  wire             led_pio_s1_waits_for_read;
  wire             led_pio_s1_waits_for_write;
  wire             led_pio_s1_write_n;
  wire    [ 31: 0] led_pio_s1_writedata;
  wire             peripheral_clock_crossing_m1_arbiterlock;
  wire             peripheral_clock_crossing_m1_arbiterlock2;
  wire             peripheral_clock_crossing_m1_continuerequest;
  wire             peripheral_clock_crossing_m1_granted_led_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_led_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_led_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_led_pio_s1;
  wire             peripheral_clock_crossing_m1_saved_grant_led_pio_s1;
  wire             wait_for_led_pio_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~led_pio_s1_end_xfer;
    end


  assign led_pio_s1_begins_xfer = ~d1_reasons_to_wait & ((peripheral_clock_crossing_m1_qualified_request_led_pio_s1));
  //assign led_pio_s1_readdata_from_sa = led_pio_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign led_pio_s1_readdata_from_sa = led_pio_s1_readdata;

  assign peripheral_clock_crossing_m1_requests_led_pio_s1 = ({peripheral_clock_crossing_m1_address_to_slave[29 : 4] , 4'b0} == 30'h30000000) & (peripheral_clock_crossing_m1_read | peripheral_clock_crossing_m1_write);
  //led_pio_s1_arb_share_counter set values, which is an e_mux
  assign led_pio_s1_arb_share_set_values = 1;

  //led_pio_s1_non_bursting_master_requests mux, which is an e_mux
  assign led_pio_s1_non_bursting_master_requests = peripheral_clock_crossing_m1_requests_led_pio_s1;

  //led_pio_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign led_pio_s1_any_bursting_master_saved_grant = 0;

  //led_pio_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign led_pio_s1_arb_share_counter_next_value = led_pio_s1_firsttransfer ? (led_pio_s1_arb_share_set_values - 1) : |led_pio_s1_arb_share_counter ? (led_pio_s1_arb_share_counter - 1) : 0;

  //led_pio_s1_allgrants all slave grants, which is an e_mux
  assign led_pio_s1_allgrants = |led_pio_s1_grant_vector;

  //led_pio_s1_end_xfer assignment, which is an e_assign
  assign led_pio_s1_end_xfer = ~(led_pio_s1_waits_for_read | led_pio_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_led_pio_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_led_pio_s1 = led_pio_s1_end_xfer & (~led_pio_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //led_pio_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign led_pio_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_led_pio_s1 & led_pio_s1_allgrants) | (end_xfer_arb_share_counter_term_led_pio_s1 & ~led_pio_s1_non_bursting_master_requests);

  //led_pio_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          led_pio_s1_arb_share_counter <= 0;
      else if (led_pio_s1_arb_counter_enable)
          led_pio_s1_arb_share_counter <= led_pio_s1_arb_share_counter_next_value;
    end


  //led_pio_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          led_pio_s1_slavearbiterlockenable <= 0;
      else if ((|led_pio_s1_master_qreq_vector & end_xfer_arb_share_counter_term_led_pio_s1) | (end_xfer_arb_share_counter_term_led_pio_s1 & ~led_pio_s1_non_bursting_master_requests))
          led_pio_s1_slavearbiterlockenable <= |led_pio_s1_arb_share_counter_next_value;
    end


  //peripheral_clock_crossing/m1 led_pio/s1 arbiterlock, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock = led_pio_s1_slavearbiterlockenable & peripheral_clock_crossing_m1_continuerequest;

  //led_pio_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign led_pio_s1_slavearbiterlockenable2 = |led_pio_s1_arb_share_counter_next_value;

  //peripheral_clock_crossing/m1 led_pio/s1 arbiterlock2, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock2 = led_pio_s1_slavearbiterlockenable2 & peripheral_clock_crossing_m1_continuerequest;

  //led_pio_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign led_pio_s1_any_continuerequest = 1;

  //peripheral_clock_crossing_m1_continuerequest continued request, which is an e_assign
  assign peripheral_clock_crossing_m1_continuerequest = 1;

  assign peripheral_clock_crossing_m1_qualified_request_led_pio_s1 = peripheral_clock_crossing_m1_requests_led_pio_s1 & ~((peripheral_clock_crossing_m1_read & ((peripheral_clock_crossing_m1_latency_counter != 0))));
  //local readdatavalid peripheral_clock_crossing_m1_read_data_valid_led_pio_s1, which is an e_mux
  assign peripheral_clock_crossing_m1_read_data_valid_led_pio_s1 = peripheral_clock_crossing_m1_granted_led_pio_s1 & peripheral_clock_crossing_m1_read & ~led_pio_s1_waits_for_read;

  //led_pio_s1_writedata mux, which is an e_mux
  assign led_pio_s1_writedata = peripheral_clock_crossing_m1_writedata;

  //master is always granted when requested
  assign peripheral_clock_crossing_m1_granted_led_pio_s1 = peripheral_clock_crossing_m1_qualified_request_led_pio_s1;

  //peripheral_clock_crossing/m1 saved-grant led_pio/s1, which is an e_assign
  assign peripheral_clock_crossing_m1_saved_grant_led_pio_s1 = peripheral_clock_crossing_m1_requests_led_pio_s1;

  //allow new arb cycle for led_pio/s1, which is an e_assign
  assign led_pio_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign led_pio_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign led_pio_s1_master_qreq_vector = 1;

  //led_pio_s1_reset_n assignment, which is an e_assign
  assign led_pio_s1_reset_n = reset_n;

  assign led_pio_s1_chipselect = peripheral_clock_crossing_m1_granted_led_pio_s1;
  //led_pio_s1_firsttransfer first transaction, which is an e_assign
  assign led_pio_s1_firsttransfer = led_pio_s1_begins_xfer ? led_pio_s1_unreg_firsttransfer : led_pio_s1_reg_firsttransfer;

  //led_pio_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign led_pio_s1_unreg_firsttransfer = ~(led_pio_s1_slavearbiterlockenable & led_pio_s1_any_continuerequest);

  //led_pio_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          led_pio_s1_reg_firsttransfer <= 1'b1;
      else if (led_pio_s1_begins_xfer)
          led_pio_s1_reg_firsttransfer <= led_pio_s1_unreg_firsttransfer;
    end


  //led_pio_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign led_pio_s1_beginbursttransfer_internal = led_pio_s1_begins_xfer;

  //~led_pio_s1_write_n assignment, which is an e_mux
  assign led_pio_s1_write_n = ~(peripheral_clock_crossing_m1_granted_led_pio_s1 & peripheral_clock_crossing_m1_write);

  //led_pio_s1_address mux, which is an e_mux
  assign led_pio_s1_address = peripheral_clock_crossing_m1_nativeaddress;

  //d1_led_pio_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_led_pio_s1_end_xfer <= 1;
      else 
        d1_led_pio_s1_end_xfer <= led_pio_s1_end_xfer;
    end


  //led_pio_s1_waits_for_read in a cycle, which is an e_mux
  assign led_pio_s1_waits_for_read = led_pio_s1_in_a_read_cycle & led_pio_s1_begins_xfer;

  //led_pio_s1_in_a_read_cycle assignment, which is an e_assign
  assign led_pio_s1_in_a_read_cycle = peripheral_clock_crossing_m1_granted_led_pio_s1 & peripheral_clock_crossing_m1_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = led_pio_s1_in_a_read_cycle;

  //led_pio_s1_waits_for_write in a cycle, which is an e_mux
  assign led_pio_s1_waits_for_write = led_pio_s1_in_a_write_cycle & 0;

  //led_pio_s1_in_a_write_cycle assignment, which is an e_assign
  assign led_pio_s1_in_a_write_cycle = peripheral_clock_crossing_m1_granted_led_pio_s1 & peripheral_clock_crossing_m1_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = led_pio_s1_in_a_write_cycle;

  assign wait_for_led_pio_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //led_pio/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module master_0_master_arbitrator (
                                    // inputs:
                                     DE4_SOPC_clock_0_in_readdata_from_sa,
                                     DE4_SOPC_clock_0_in_waitrequest_from_sa,
                                     clk,
                                     d1_DE4_SOPC_clock_0_in_end_xfer,
                                     d1_ethernet_port_interface_0_control_port_end_xfer,
                                     d1_high_res_timer_s1_end_xfer,
                                     d1_jtag_uart_avalon_jtag_slave_end_xfer,
                                     d1_peripheral_clock_crossing_s1_end_xfer,
                                     d1_sys_timer_s1_end_xfer,
                                     d1_sysid_control_slave_end_xfer,
                                     d1_tse_mac1_control_port_end_xfer,
                                     d1_tse_mac2_control_port_end_xfer,
                                     d1_tse_mac3_control_port_end_xfer,
                                     d1_tse_mac_control_port_end_xfer,
                                     ethernet_port_interface_0_control_port_readdata_from_sa,
                                     ethernet_port_interface_0_control_port_waitrequest_from_sa,
                                     high_res_timer_s1_readdata_from_sa,
                                     jtag_uart_avalon_jtag_slave_readdata_from_sa,
                                     jtag_uart_avalon_jtag_slave_waitrequest_from_sa,
                                     master_0_granted_DE4_SOPC_clock_0_in,
                                     master_0_granted_ethernet_port_interface_0_control_port,
                                     master_0_granted_high_res_timer_s1,
                                     master_0_granted_jtag_uart_avalon_jtag_slave,
                                     master_0_granted_peripheral_clock_crossing_s1,
                                     master_0_granted_sys_timer_s1,
                                     master_0_granted_sysid_control_slave,
                                     master_0_granted_tse_mac1_control_port,
                                     master_0_granted_tse_mac2_control_port,
                                     master_0_granted_tse_mac3_control_port,
                                     master_0_granted_tse_mac_control_port,
                                     master_0_master_address,
                                     master_0_master_byteenable,
                                     master_0_master_read,
                                     master_0_master_write,
                                     master_0_master_writedata,
                                     master_0_qualified_request_DE4_SOPC_clock_0_in,
                                     master_0_qualified_request_ethernet_port_interface_0_control_port,
                                     master_0_qualified_request_high_res_timer_s1,
                                     master_0_qualified_request_jtag_uart_avalon_jtag_slave,
                                     master_0_qualified_request_peripheral_clock_crossing_s1,
                                     master_0_qualified_request_sys_timer_s1,
                                     master_0_qualified_request_sysid_control_slave,
                                     master_0_qualified_request_tse_mac1_control_port,
                                     master_0_qualified_request_tse_mac2_control_port,
                                     master_0_qualified_request_tse_mac3_control_port,
                                     master_0_qualified_request_tse_mac_control_port,
                                     master_0_read_data_valid_DE4_SOPC_clock_0_in,
                                     master_0_read_data_valid_ethernet_port_interface_0_control_port,
                                     master_0_read_data_valid_high_res_timer_s1,
                                     master_0_read_data_valid_jtag_uart_avalon_jtag_slave,
                                     master_0_read_data_valid_peripheral_clock_crossing_s1,
                                     master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                     master_0_read_data_valid_sys_timer_s1,
                                     master_0_read_data_valid_sysid_control_slave,
                                     master_0_read_data_valid_tse_mac1_control_port,
                                     master_0_read_data_valid_tse_mac2_control_port,
                                     master_0_read_data_valid_tse_mac3_control_port,
                                     master_0_read_data_valid_tse_mac_control_port,
                                     master_0_requests_DE4_SOPC_clock_0_in,
                                     master_0_requests_ethernet_port_interface_0_control_port,
                                     master_0_requests_high_res_timer_s1,
                                     master_0_requests_jtag_uart_avalon_jtag_slave,
                                     master_0_requests_peripheral_clock_crossing_s1,
                                     master_0_requests_sys_timer_s1,
                                     master_0_requests_sysid_control_slave,
                                     master_0_requests_tse_mac1_control_port,
                                     master_0_requests_tse_mac2_control_port,
                                     master_0_requests_tse_mac3_control_port,
                                     master_0_requests_tse_mac_control_port,
                                     peripheral_clock_crossing_s1_readdata_from_sa,
                                     peripheral_clock_crossing_s1_waitrequest_from_sa,
                                     reset_n,
                                     sys_timer_s1_readdata_from_sa,
                                     sysid_control_slave_readdata_from_sa,
                                     tse_mac1_control_port_readdata_from_sa,
                                     tse_mac1_control_port_waitrequest_from_sa,
                                     tse_mac2_control_port_readdata_from_sa,
                                     tse_mac2_control_port_waitrequest_from_sa,
                                     tse_mac3_control_port_readdata_from_sa,
                                     tse_mac3_control_port_waitrequest_from_sa,
                                     tse_mac_control_port_readdata_from_sa,
                                     tse_mac_control_port_waitrequest_from_sa,

                                    // outputs:
                                     master_0_latency_counter,
                                     master_0_master_address_to_slave,
                                     master_0_master_readdata,
                                     master_0_master_readdatavalid,
                                     master_0_master_reset,
                                     master_0_master_waitrequest
                                  )
;

  output           master_0_latency_counter;
  output  [ 31: 0] master_0_master_address_to_slave;
  output  [ 31: 0] master_0_master_readdata;
  output           master_0_master_readdatavalid;
  output           master_0_master_reset;
  output           master_0_master_waitrequest;
  input   [ 15: 0] DE4_SOPC_clock_0_in_readdata_from_sa;
  input            DE4_SOPC_clock_0_in_waitrequest_from_sa;
  input            clk;
  input            d1_DE4_SOPC_clock_0_in_end_xfer;
  input            d1_ethernet_port_interface_0_control_port_end_xfer;
  input            d1_high_res_timer_s1_end_xfer;
  input            d1_jtag_uart_avalon_jtag_slave_end_xfer;
  input            d1_peripheral_clock_crossing_s1_end_xfer;
  input            d1_sys_timer_s1_end_xfer;
  input            d1_sysid_control_slave_end_xfer;
  input            d1_tse_mac1_control_port_end_xfer;
  input            d1_tse_mac2_control_port_end_xfer;
  input            d1_tse_mac3_control_port_end_xfer;
  input            d1_tse_mac_control_port_end_xfer;
  input   [ 31: 0] ethernet_port_interface_0_control_port_readdata_from_sa;
  input            ethernet_port_interface_0_control_port_waitrequest_from_sa;
  input   [ 15: 0] high_res_timer_s1_readdata_from_sa;
  input   [ 31: 0] jtag_uart_avalon_jtag_slave_readdata_from_sa;
  input            jtag_uart_avalon_jtag_slave_waitrequest_from_sa;
  input            master_0_granted_DE4_SOPC_clock_0_in;
  input            master_0_granted_ethernet_port_interface_0_control_port;
  input            master_0_granted_high_res_timer_s1;
  input            master_0_granted_jtag_uart_avalon_jtag_slave;
  input            master_0_granted_peripheral_clock_crossing_s1;
  input            master_0_granted_sys_timer_s1;
  input            master_0_granted_sysid_control_slave;
  input            master_0_granted_tse_mac1_control_port;
  input            master_0_granted_tse_mac2_control_port;
  input            master_0_granted_tse_mac3_control_port;
  input            master_0_granted_tse_mac_control_port;
  input   [ 31: 0] master_0_master_address;
  input   [  3: 0] master_0_master_byteenable;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_qualified_request_DE4_SOPC_clock_0_in;
  input            master_0_qualified_request_ethernet_port_interface_0_control_port;
  input            master_0_qualified_request_high_res_timer_s1;
  input            master_0_qualified_request_jtag_uart_avalon_jtag_slave;
  input            master_0_qualified_request_peripheral_clock_crossing_s1;
  input            master_0_qualified_request_sys_timer_s1;
  input            master_0_qualified_request_sysid_control_slave;
  input            master_0_qualified_request_tse_mac1_control_port;
  input            master_0_qualified_request_tse_mac2_control_port;
  input            master_0_qualified_request_tse_mac3_control_port;
  input            master_0_qualified_request_tse_mac_control_port;
  input            master_0_read_data_valid_DE4_SOPC_clock_0_in;
  input            master_0_read_data_valid_ethernet_port_interface_0_control_port;
  input            master_0_read_data_valid_high_res_timer_s1;
  input            master_0_read_data_valid_jtag_uart_avalon_jtag_slave;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            master_0_read_data_valid_sys_timer_s1;
  input            master_0_read_data_valid_sysid_control_slave;
  input            master_0_read_data_valid_tse_mac1_control_port;
  input            master_0_read_data_valid_tse_mac2_control_port;
  input            master_0_read_data_valid_tse_mac3_control_port;
  input            master_0_read_data_valid_tse_mac_control_port;
  input            master_0_requests_DE4_SOPC_clock_0_in;
  input            master_0_requests_ethernet_port_interface_0_control_port;
  input            master_0_requests_high_res_timer_s1;
  input            master_0_requests_jtag_uart_avalon_jtag_slave;
  input            master_0_requests_peripheral_clock_crossing_s1;
  input            master_0_requests_sys_timer_s1;
  input            master_0_requests_sysid_control_slave;
  input            master_0_requests_tse_mac1_control_port;
  input            master_0_requests_tse_mac2_control_port;
  input            master_0_requests_tse_mac3_control_port;
  input            master_0_requests_tse_mac_control_port;
  input   [ 31: 0] peripheral_clock_crossing_s1_readdata_from_sa;
  input            peripheral_clock_crossing_s1_waitrequest_from_sa;
  input            reset_n;
  input   [ 15: 0] sys_timer_s1_readdata_from_sa;
  input   [ 31: 0] sysid_control_slave_readdata_from_sa;
  input   [ 31: 0] tse_mac1_control_port_readdata_from_sa;
  input            tse_mac1_control_port_waitrequest_from_sa;
  input   [ 31: 0] tse_mac2_control_port_readdata_from_sa;
  input            tse_mac2_control_port_waitrequest_from_sa;
  input   [ 31: 0] tse_mac3_control_port_readdata_from_sa;
  input            tse_mac3_control_port_waitrequest_from_sa;
  input   [ 31: 0] tse_mac_control_port_readdata_from_sa;
  input            tse_mac_control_port_waitrequest_from_sa;

  reg              active_and_waiting_last_time;
  wire             latency_load_value;
  reg              master_0_latency_counter;
  reg     [ 31: 0] master_0_master_address_last_time;
  wire    [ 31: 0] master_0_master_address_to_slave;
  reg     [  3: 0] master_0_master_byteenable_last_time;
  wire             master_0_master_is_granted_some_slave;
  reg              master_0_master_read_but_no_slave_selected;
  reg              master_0_master_read_last_time;
  wire    [ 31: 0] master_0_master_readdata;
  wire             master_0_master_readdatavalid;
  wire             master_0_master_reset;
  wire             master_0_master_run;
  wire             master_0_master_waitrequest;
  reg              master_0_master_write_last_time;
  reg     [ 31: 0] master_0_master_writedata_last_time;
  wire             p1_master_0_latency_counter;
  wire             pre_flush_master_0_master_readdatavalid;
  wire             r_0;
  wire             r_1;
  wire             r_2;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (master_0_qualified_request_DE4_SOPC_clock_0_in | ~master_0_requests_DE4_SOPC_clock_0_in) & ((~master_0_qualified_request_DE4_SOPC_clock_0_in | ~(master_0_master_read | master_0_master_write) | (1 & ~DE4_SOPC_clock_0_in_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_DE4_SOPC_clock_0_in | ~(master_0_master_read | master_0_master_write) | (1 & ~DE4_SOPC_clock_0_in_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & 1 & (master_0_qualified_request_ethernet_port_interface_0_control_port | ~master_0_requests_ethernet_port_interface_0_control_port) & ((~master_0_qualified_request_ethernet_port_interface_0_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~ethernet_port_interface_0_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_ethernet_port_interface_0_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~ethernet_port_interface_0_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & 1 & (master_0_qualified_request_high_res_timer_s1 | ~master_0_requests_high_res_timer_s1) & ((~master_0_qualified_request_high_res_timer_s1 | ~master_0_master_read | (1 & ~d1_high_res_timer_s1_end_xfer & master_0_master_read))) & ((~master_0_qualified_request_high_res_timer_s1 | ~master_0_master_write | (1 & master_0_master_write))) & 1 & (master_0_qualified_request_jtag_uart_avalon_jtag_slave | ~master_0_requests_jtag_uart_avalon_jtag_slave) & ((~master_0_qualified_request_jtag_uart_avalon_jtag_slave | ~(master_0_master_read | master_0_master_write) | (1 & ~jtag_uart_avalon_jtag_slave_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_jtag_uart_avalon_jtag_slave | ~(master_0_master_read | master_0_master_write) | (1 & ~jtag_uart_avalon_jtag_slave_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & 1 & (master_0_qualified_request_peripheral_clock_crossing_s1 | ~master_0_requests_peripheral_clock_crossing_s1) & ((~master_0_qualified_request_peripheral_clock_crossing_s1 | ~(master_0_master_read | master_0_master_write) | (1 & ~peripheral_clock_crossing_s1_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_peripheral_clock_crossing_s1 | ~(master_0_master_read | master_0_master_write) | (1 & ~peripheral_clock_crossing_s1_waitrequest_from_sa & (master_0_master_read | master_0_master_write))));

  //cascaded wait assignment, which is an e_assign
  assign master_0_master_run = r_0 & r_1 & r_2;

  //r_1 master_run cascaded wait assignment, which is an e_assign
  assign r_1 = 1 & (master_0_qualified_request_sys_timer_s1 | ~master_0_requests_sys_timer_s1) & ((~master_0_qualified_request_sys_timer_s1 | ~master_0_master_read | (1 & ~d1_sys_timer_s1_end_xfer & master_0_master_read))) & ((~master_0_qualified_request_sys_timer_s1 | ~master_0_master_write | (1 & master_0_master_write))) & 1 & (master_0_qualified_request_sysid_control_slave | ~master_0_requests_sysid_control_slave) & ((~master_0_qualified_request_sysid_control_slave | ~master_0_master_read | (1 & ~d1_sysid_control_slave_end_xfer & master_0_master_read))) & ((~master_0_qualified_request_sysid_control_slave | ~master_0_master_write | (1 & master_0_master_write))) & 1 & (master_0_qualified_request_tse_mac_control_port | ~master_0_requests_tse_mac_control_port) & (master_0_granted_tse_mac_control_port | ~master_0_qualified_request_tse_mac_control_port) & ((~master_0_qualified_request_tse_mac_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_tse_mac_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & 1 & (master_0_qualified_request_tse_mac1_control_port | ~master_0_requests_tse_mac1_control_port) & (master_0_granted_tse_mac1_control_port | ~master_0_qualified_request_tse_mac1_control_port) & ((~master_0_qualified_request_tse_mac1_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac1_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_tse_mac1_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac1_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & 1 & (master_0_qualified_request_tse_mac2_control_port | ~master_0_requests_tse_mac2_control_port);

  //r_2 master_run cascaded wait assignment, which is an e_assign
  assign r_2 = (master_0_granted_tse_mac2_control_port | ~master_0_qualified_request_tse_mac2_control_port) & ((~master_0_qualified_request_tse_mac2_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac2_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_tse_mac2_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac2_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & 1 & (master_0_qualified_request_tse_mac3_control_port | ~master_0_requests_tse_mac3_control_port) & (master_0_granted_tse_mac3_control_port | ~master_0_qualified_request_tse_mac3_control_port) & ((~master_0_qualified_request_tse_mac3_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac3_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write)))) & ((~master_0_qualified_request_tse_mac3_control_port | ~(master_0_master_read | master_0_master_write) | (1 & ~tse_mac3_control_port_waitrequest_from_sa & (master_0_master_read | master_0_master_write))));

  //optimize select-logic by passing only those address bits which matter.
  assign master_0_master_address_to_slave = {1'b0,
    master_0_master_address[30 : 0]};

  //master_0_master_read_but_no_slave_selected assignment, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_master_read_but_no_slave_selected <= 0;
      else 
        master_0_master_read_but_no_slave_selected <= master_0_master_read & master_0_master_run & ~master_0_master_is_granted_some_slave;
    end


  //some slave is getting selected, which is an e_mux
  assign master_0_master_is_granted_some_slave = master_0_granted_DE4_SOPC_clock_0_in |
    master_0_granted_ethernet_port_interface_0_control_port |
    master_0_granted_high_res_timer_s1 |
    master_0_granted_jtag_uart_avalon_jtag_slave |
    master_0_granted_peripheral_clock_crossing_s1 |
    master_0_granted_sys_timer_s1 |
    master_0_granted_sysid_control_slave |
    master_0_granted_tse_mac_control_port |
    master_0_granted_tse_mac1_control_port |
    master_0_granted_tse_mac2_control_port |
    master_0_granted_tse_mac3_control_port;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_master_0_master_readdatavalid = master_0_read_data_valid_peripheral_clock_crossing_s1;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign master_0_master_readdatavalid = master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_DE4_SOPC_clock_0_in |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_ethernet_port_interface_0_control_port |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_high_res_timer_s1 |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_jtag_uart_avalon_jtag_slave |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_sys_timer_s1 |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_sysid_control_slave |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_tse_mac_control_port |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_tse_mac1_control_port |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_tse_mac2_control_port |
    master_0_master_read_but_no_slave_selected |
    pre_flush_master_0_master_readdatavalid |
    master_0_read_data_valid_tse_mac3_control_port;

  //master_0/master readdata mux, which is an e_mux
  assign master_0_master_readdata = ({32 {~(master_0_qualified_request_DE4_SOPC_clock_0_in & master_0_master_read)}} | DE4_SOPC_clock_0_in_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_ethernet_port_interface_0_control_port & master_0_master_read)}} | ethernet_port_interface_0_control_port_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_high_res_timer_s1 & master_0_master_read)}} | high_res_timer_s1_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_jtag_uart_avalon_jtag_slave & master_0_master_read)}} | jtag_uart_avalon_jtag_slave_readdata_from_sa) &
    ({32 {~master_0_read_data_valid_peripheral_clock_crossing_s1}} | peripheral_clock_crossing_s1_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_sys_timer_s1 & master_0_master_read)}} | sys_timer_s1_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_sysid_control_slave & master_0_master_read)}} | sysid_control_slave_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_tse_mac_control_port & master_0_master_read)}} | tse_mac_control_port_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_tse_mac1_control_port & master_0_master_read)}} | tse_mac1_control_port_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_tse_mac2_control_port & master_0_master_read)}} | tse_mac2_control_port_readdata_from_sa) &
    ({32 {~(master_0_qualified_request_tse_mac3_control_port & master_0_master_read)}} | tse_mac3_control_port_readdata_from_sa);

  //actual waitrequest port, which is an e_assign
  assign master_0_master_waitrequest = ~master_0_master_run;

  //latent max counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_latency_counter <= 0;
      else 
        master_0_latency_counter <= p1_master_0_latency_counter;
    end


  //latency counter load mux, which is an e_mux
  assign p1_master_0_latency_counter = ((master_0_master_run & master_0_master_read))? latency_load_value :
    (master_0_latency_counter)? master_0_latency_counter - 1 :
    0;

  //read latency load values, which is an e_mux
  assign latency_load_value = 0;

  //~master_0_master_reset assignment, which is an e_assign
  assign master_0_master_reset = ~reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //master_0_master_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_master_address_last_time <= 0;
      else 
        master_0_master_address_last_time <= master_0_master_address;
    end


  //master_0/master waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= master_0_master_waitrequest & (master_0_master_read | master_0_master_write);
    end


  //master_0_master_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (master_0_master_address != master_0_master_address_last_time))
        begin
          $write("%0d ns: master_0_master_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //master_0_master_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_master_byteenable_last_time <= 0;
      else 
        master_0_master_byteenable_last_time <= master_0_master_byteenable;
    end


  //master_0_master_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (master_0_master_byteenable != master_0_master_byteenable_last_time))
        begin
          $write("%0d ns: master_0_master_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //master_0_master_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_master_read_last_time <= 0;
      else 
        master_0_master_read_last_time <= master_0_master_read;
    end


  //master_0_master_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (master_0_master_read != master_0_master_read_last_time))
        begin
          $write("%0d ns: master_0_master_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //master_0_master_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_master_write_last_time <= 0;
      else 
        master_0_master_write_last_time <= master_0_master_write;
    end


  //master_0_master_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (master_0_master_write != master_0_master_write_last_time))
        begin
          $write("%0d ns: master_0_master_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //master_0_master_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          master_0_master_writedata_last_time <= 0;
      else 
        master_0_master_writedata_last_time <= master_0_master_writedata;
    end


  //master_0_master_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (master_0_master_writedata != master_0_master_writedata_last_time) & master_0_master_write)
        begin
          $write("%0d ns: master_0_master_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module pb_pio_s1_arbitrator (
                              // inputs:
                               clk,
                               pb_pio_s1_readdata,
                               peripheral_clock_crossing_m1_address_to_slave,
                               peripheral_clock_crossing_m1_latency_counter,
                               peripheral_clock_crossing_m1_nativeaddress,
                               peripheral_clock_crossing_m1_read,
                               peripheral_clock_crossing_m1_write,
                               reset_n,

                              // outputs:
                               d1_pb_pio_s1_end_xfer,
                               pb_pio_s1_address,
                               pb_pio_s1_readdata_from_sa,
                               pb_pio_s1_reset_n,
                               peripheral_clock_crossing_m1_granted_pb_pio_s1,
                               peripheral_clock_crossing_m1_qualified_request_pb_pio_s1,
                               peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1,
                               peripheral_clock_crossing_m1_requests_pb_pio_s1
                            )
;

  output           d1_pb_pio_s1_end_xfer;
  output  [  1: 0] pb_pio_s1_address;
  output  [ 31: 0] pb_pio_s1_readdata_from_sa;
  output           pb_pio_s1_reset_n;
  output           peripheral_clock_crossing_m1_granted_pb_pio_s1;
  output           peripheral_clock_crossing_m1_qualified_request_pb_pio_s1;
  output           peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1;
  output           peripheral_clock_crossing_m1_requests_pb_pio_s1;
  input            clk;
  input   [ 31: 0] pb_pio_s1_readdata;
  input   [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  input            peripheral_clock_crossing_m1_latency_counter;
  input   [ 27: 0] peripheral_clock_crossing_m1_nativeaddress;
  input            peripheral_clock_crossing_m1_read;
  input            peripheral_clock_crossing_m1_write;
  input            reset_n;

  reg              d1_pb_pio_s1_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_pb_pio_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire    [  1: 0] pb_pio_s1_address;
  wire             pb_pio_s1_allgrants;
  wire             pb_pio_s1_allow_new_arb_cycle;
  wire             pb_pio_s1_any_bursting_master_saved_grant;
  wire             pb_pio_s1_any_continuerequest;
  wire             pb_pio_s1_arb_counter_enable;
  reg              pb_pio_s1_arb_share_counter;
  wire             pb_pio_s1_arb_share_counter_next_value;
  wire             pb_pio_s1_arb_share_set_values;
  wire             pb_pio_s1_beginbursttransfer_internal;
  wire             pb_pio_s1_begins_xfer;
  wire             pb_pio_s1_end_xfer;
  wire             pb_pio_s1_firsttransfer;
  wire             pb_pio_s1_grant_vector;
  wire             pb_pio_s1_in_a_read_cycle;
  wire             pb_pio_s1_in_a_write_cycle;
  wire             pb_pio_s1_master_qreq_vector;
  wire             pb_pio_s1_non_bursting_master_requests;
  wire    [ 31: 0] pb_pio_s1_readdata_from_sa;
  reg              pb_pio_s1_reg_firsttransfer;
  wire             pb_pio_s1_reset_n;
  reg              pb_pio_s1_slavearbiterlockenable;
  wire             pb_pio_s1_slavearbiterlockenable2;
  wire             pb_pio_s1_unreg_firsttransfer;
  wire             pb_pio_s1_waits_for_read;
  wire             pb_pio_s1_waits_for_write;
  wire             peripheral_clock_crossing_m1_arbiterlock;
  wire             peripheral_clock_crossing_m1_arbiterlock2;
  wire             peripheral_clock_crossing_m1_continuerequest;
  wire             peripheral_clock_crossing_m1_granted_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_saved_grant_pb_pio_s1;
  wire             wait_for_pb_pio_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~pb_pio_s1_end_xfer;
    end


  assign pb_pio_s1_begins_xfer = ~d1_reasons_to_wait & ((peripheral_clock_crossing_m1_qualified_request_pb_pio_s1));
  //assign pb_pio_s1_readdata_from_sa = pb_pio_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pb_pio_s1_readdata_from_sa = pb_pio_s1_readdata;

  assign peripheral_clock_crossing_m1_requests_pb_pio_s1 = (({peripheral_clock_crossing_m1_address_to_slave[29 : 4] , 4'b0} == 30'h30000040) & (peripheral_clock_crossing_m1_read | peripheral_clock_crossing_m1_write)) & peripheral_clock_crossing_m1_read;
  //pb_pio_s1_arb_share_counter set values, which is an e_mux
  assign pb_pio_s1_arb_share_set_values = 1;

  //pb_pio_s1_non_bursting_master_requests mux, which is an e_mux
  assign pb_pio_s1_non_bursting_master_requests = peripheral_clock_crossing_m1_requests_pb_pio_s1;

  //pb_pio_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign pb_pio_s1_any_bursting_master_saved_grant = 0;

  //pb_pio_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign pb_pio_s1_arb_share_counter_next_value = pb_pio_s1_firsttransfer ? (pb_pio_s1_arb_share_set_values - 1) : |pb_pio_s1_arb_share_counter ? (pb_pio_s1_arb_share_counter - 1) : 0;

  //pb_pio_s1_allgrants all slave grants, which is an e_mux
  assign pb_pio_s1_allgrants = |pb_pio_s1_grant_vector;

  //pb_pio_s1_end_xfer assignment, which is an e_assign
  assign pb_pio_s1_end_xfer = ~(pb_pio_s1_waits_for_read | pb_pio_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_pb_pio_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_pb_pio_s1 = pb_pio_s1_end_xfer & (~pb_pio_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //pb_pio_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign pb_pio_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_pb_pio_s1 & pb_pio_s1_allgrants) | (end_xfer_arb_share_counter_term_pb_pio_s1 & ~pb_pio_s1_non_bursting_master_requests);

  //pb_pio_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pb_pio_s1_arb_share_counter <= 0;
      else if (pb_pio_s1_arb_counter_enable)
          pb_pio_s1_arb_share_counter <= pb_pio_s1_arb_share_counter_next_value;
    end


  //pb_pio_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pb_pio_s1_slavearbiterlockenable <= 0;
      else if ((|pb_pio_s1_master_qreq_vector & end_xfer_arb_share_counter_term_pb_pio_s1) | (end_xfer_arb_share_counter_term_pb_pio_s1 & ~pb_pio_s1_non_bursting_master_requests))
          pb_pio_s1_slavearbiterlockenable <= |pb_pio_s1_arb_share_counter_next_value;
    end


  //peripheral_clock_crossing/m1 pb_pio/s1 arbiterlock, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock = pb_pio_s1_slavearbiterlockenable & peripheral_clock_crossing_m1_continuerequest;

  //pb_pio_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign pb_pio_s1_slavearbiterlockenable2 = |pb_pio_s1_arb_share_counter_next_value;

  //peripheral_clock_crossing/m1 pb_pio/s1 arbiterlock2, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock2 = pb_pio_s1_slavearbiterlockenable2 & peripheral_clock_crossing_m1_continuerequest;

  //pb_pio_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign pb_pio_s1_any_continuerequest = 1;

  //peripheral_clock_crossing_m1_continuerequest continued request, which is an e_assign
  assign peripheral_clock_crossing_m1_continuerequest = 1;

  assign peripheral_clock_crossing_m1_qualified_request_pb_pio_s1 = peripheral_clock_crossing_m1_requests_pb_pio_s1 & ~((peripheral_clock_crossing_m1_read & ((peripheral_clock_crossing_m1_latency_counter != 0))));
  //local readdatavalid peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1, which is an e_mux
  assign peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1 = peripheral_clock_crossing_m1_granted_pb_pio_s1 & peripheral_clock_crossing_m1_read & ~pb_pio_s1_waits_for_read;

  //master is always granted when requested
  assign peripheral_clock_crossing_m1_granted_pb_pio_s1 = peripheral_clock_crossing_m1_qualified_request_pb_pio_s1;

  //peripheral_clock_crossing/m1 saved-grant pb_pio/s1, which is an e_assign
  assign peripheral_clock_crossing_m1_saved_grant_pb_pio_s1 = peripheral_clock_crossing_m1_requests_pb_pio_s1;

  //allow new arb cycle for pb_pio/s1, which is an e_assign
  assign pb_pio_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign pb_pio_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign pb_pio_s1_master_qreq_vector = 1;

  //pb_pio_s1_reset_n assignment, which is an e_assign
  assign pb_pio_s1_reset_n = reset_n;

  //pb_pio_s1_firsttransfer first transaction, which is an e_assign
  assign pb_pio_s1_firsttransfer = pb_pio_s1_begins_xfer ? pb_pio_s1_unreg_firsttransfer : pb_pio_s1_reg_firsttransfer;

  //pb_pio_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign pb_pio_s1_unreg_firsttransfer = ~(pb_pio_s1_slavearbiterlockenable & pb_pio_s1_any_continuerequest);

  //pb_pio_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pb_pio_s1_reg_firsttransfer <= 1'b1;
      else if (pb_pio_s1_begins_xfer)
          pb_pio_s1_reg_firsttransfer <= pb_pio_s1_unreg_firsttransfer;
    end


  //pb_pio_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign pb_pio_s1_beginbursttransfer_internal = pb_pio_s1_begins_xfer;

  //pb_pio_s1_address mux, which is an e_mux
  assign pb_pio_s1_address = peripheral_clock_crossing_m1_nativeaddress;

  //d1_pb_pio_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_pb_pio_s1_end_xfer <= 1;
      else 
        d1_pb_pio_s1_end_xfer <= pb_pio_s1_end_xfer;
    end


  //pb_pio_s1_waits_for_read in a cycle, which is an e_mux
  assign pb_pio_s1_waits_for_read = pb_pio_s1_in_a_read_cycle & pb_pio_s1_begins_xfer;

  //pb_pio_s1_in_a_read_cycle assignment, which is an e_assign
  assign pb_pio_s1_in_a_read_cycle = peripheral_clock_crossing_m1_granted_pb_pio_s1 & peripheral_clock_crossing_m1_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = pb_pio_s1_in_a_read_cycle;

  //pb_pio_s1_waits_for_write in a cycle, which is an e_mux
  assign pb_pio_s1_waits_for_write = pb_pio_s1_in_a_write_cycle & 0;

  //pb_pio_s1_in_a_write_cycle assignment, which is an e_assign
  assign pb_pio_s1_in_a_write_cycle = peripheral_clock_crossing_m1_granted_pb_pio_s1 & peripheral_clock_crossing_m1_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = pb_pio_s1_in_a_write_cycle;

  assign wait_for_pb_pio_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //pb_pio/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module pcie_compiler_0_Control_Register_Access_arbitrator (
                                                            // inputs:
                                                             DE4_SOPC_burst_3_downstream_address_to_slave,
                                                             DE4_SOPC_burst_3_downstream_arbitrationshare,
                                                             DE4_SOPC_burst_3_downstream_burstcount,
                                                             DE4_SOPC_burst_3_downstream_byteenable,
                                                             DE4_SOPC_burst_3_downstream_latency_counter,
                                                             DE4_SOPC_burst_3_downstream_read,
                                                             DE4_SOPC_burst_3_downstream_write,
                                                             DE4_SOPC_burst_3_downstream_writedata,
                                                             clk,
                                                             pcie_compiler_0_Control_Register_Access_readdata,
                                                             pcie_compiler_0_Control_Register_Access_waitrequest,
                                                             reset_n,

                                                            // outputs:
                                                             DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access,
                                                             DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access,
                                                             DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access,
                                                             DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access,
                                                             d1_pcie_compiler_0_Control_Register_Access_end_xfer,
                                                             pcie_compiler_0_Control_Register_Access_address,
                                                             pcie_compiler_0_Control_Register_Access_byteenable,
                                                             pcie_compiler_0_Control_Register_Access_chipselect,
                                                             pcie_compiler_0_Control_Register_Access_read,
                                                             pcie_compiler_0_Control_Register_Access_readdata_from_sa,
                                                             pcie_compiler_0_Control_Register_Access_waitrequest_from_sa,
                                                             pcie_compiler_0_Control_Register_Access_write,
                                                             pcie_compiler_0_Control_Register_Access_writedata
                                                          )
;

  output           DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access;
  output           DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access;
  output           DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access;
  output           DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access;
  output           d1_pcie_compiler_0_Control_Register_Access_end_xfer;
  output  [ 11: 0] pcie_compiler_0_Control_Register_Access_address;
  output  [  3: 0] pcie_compiler_0_Control_Register_Access_byteenable;
  output           pcie_compiler_0_Control_Register_Access_chipselect;
  output           pcie_compiler_0_Control_Register_Access_read;
  output  [ 31: 0] pcie_compiler_0_Control_Register_Access_readdata_from_sa;
  output           pcie_compiler_0_Control_Register_Access_waitrequest_from_sa;
  output           pcie_compiler_0_Control_Register_Access_write;
  output  [ 31: 0] pcie_compiler_0_Control_Register_Access_writedata;
  input   [ 13: 0] DE4_SOPC_burst_3_downstream_address_to_slave;
  input   [ 10: 0] DE4_SOPC_burst_3_downstream_arbitrationshare;
  input            DE4_SOPC_burst_3_downstream_burstcount;
  input   [  3: 0] DE4_SOPC_burst_3_downstream_byteenable;
  input            DE4_SOPC_burst_3_downstream_latency_counter;
  input            DE4_SOPC_burst_3_downstream_read;
  input            DE4_SOPC_burst_3_downstream_write;
  input   [ 31: 0] DE4_SOPC_burst_3_downstream_writedata;
  input            clk;
  input   [ 31: 0] pcie_compiler_0_Control_Register_Access_readdata;
  input            pcie_compiler_0_Control_Register_Access_waitrequest;
  input            reset_n;

  wire             DE4_SOPC_burst_3_downstream_arbiterlock;
  wire             DE4_SOPC_burst_3_downstream_arbiterlock2;
  wire             DE4_SOPC_burst_3_downstream_continuerequest;
  wire             DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_saved_grant_pcie_compiler_0_Control_Register_Access;
  reg              d1_pcie_compiler_0_Control_Register_Access_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire    [ 11: 0] pcie_compiler_0_Control_Register_Access_address;
  wire             pcie_compiler_0_Control_Register_Access_allgrants;
  wire             pcie_compiler_0_Control_Register_Access_allow_new_arb_cycle;
  wire             pcie_compiler_0_Control_Register_Access_any_bursting_master_saved_grant;
  wire             pcie_compiler_0_Control_Register_Access_any_continuerequest;
  wire             pcie_compiler_0_Control_Register_Access_arb_counter_enable;
  reg     [ 10: 0] pcie_compiler_0_Control_Register_Access_arb_share_counter;
  wire    [ 10: 0] pcie_compiler_0_Control_Register_Access_arb_share_counter_next_value;
  wire    [ 10: 0] pcie_compiler_0_Control_Register_Access_arb_share_set_values;
  wire             pcie_compiler_0_Control_Register_Access_beginbursttransfer_internal;
  wire             pcie_compiler_0_Control_Register_Access_begins_xfer;
  wire    [  3: 0] pcie_compiler_0_Control_Register_Access_byteenable;
  wire             pcie_compiler_0_Control_Register_Access_chipselect;
  wire             pcie_compiler_0_Control_Register_Access_end_xfer;
  wire             pcie_compiler_0_Control_Register_Access_firsttransfer;
  wire             pcie_compiler_0_Control_Register_Access_grant_vector;
  wire             pcie_compiler_0_Control_Register_Access_in_a_read_cycle;
  wire             pcie_compiler_0_Control_Register_Access_in_a_write_cycle;
  wire             pcie_compiler_0_Control_Register_Access_master_qreq_vector;
  wire             pcie_compiler_0_Control_Register_Access_non_bursting_master_requests;
  wire             pcie_compiler_0_Control_Register_Access_read;
  wire    [ 31: 0] pcie_compiler_0_Control_Register_Access_readdata_from_sa;
  reg              pcie_compiler_0_Control_Register_Access_reg_firsttransfer;
  reg              pcie_compiler_0_Control_Register_Access_slavearbiterlockenable;
  wire             pcie_compiler_0_Control_Register_Access_slavearbiterlockenable2;
  wire             pcie_compiler_0_Control_Register_Access_unreg_firsttransfer;
  wire             pcie_compiler_0_Control_Register_Access_waitrequest_from_sa;
  wire             pcie_compiler_0_Control_Register_Access_waits_for_read;
  wire             pcie_compiler_0_Control_Register_Access_waits_for_write;
  wire             pcie_compiler_0_Control_Register_Access_write;
  wire    [ 31: 0] pcie_compiler_0_Control_Register_Access_writedata;
  wire    [ 13: 0] shifted_address_to_pcie_compiler_0_Control_Register_Access_from_DE4_SOPC_burst_3_downstream;
  wire             wait_for_pcie_compiler_0_Control_Register_Access_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~pcie_compiler_0_Control_Register_Access_end_xfer;
    end


  assign pcie_compiler_0_Control_Register_Access_begins_xfer = ~d1_reasons_to_wait & ((DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access));
  //assign pcie_compiler_0_Control_Register_Access_readdata_from_sa = pcie_compiler_0_Control_Register_Access_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_readdata_from_sa = pcie_compiler_0_Control_Register_Access_readdata;

  assign DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access = (1) & (DE4_SOPC_burst_3_downstream_read | DE4_SOPC_burst_3_downstream_write);
  //assign pcie_compiler_0_Control_Register_Access_waitrequest_from_sa = pcie_compiler_0_Control_Register_Access_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_waitrequest_from_sa = pcie_compiler_0_Control_Register_Access_waitrequest;

  //pcie_compiler_0_Control_Register_Access_arb_share_counter set values, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_arb_share_set_values = (DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access)? DE4_SOPC_burst_3_downstream_arbitrationshare :
    1;

  //pcie_compiler_0_Control_Register_Access_non_bursting_master_requests mux, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_non_bursting_master_requests = 0;

  //pcie_compiler_0_Control_Register_Access_any_bursting_master_saved_grant mux, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_any_bursting_master_saved_grant = DE4_SOPC_burst_3_downstream_saved_grant_pcie_compiler_0_Control_Register_Access;

  //pcie_compiler_0_Control_Register_Access_arb_share_counter_next_value assignment, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_arb_share_counter_next_value = pcie_compiler_0_Control_Register_Access_firsttransfer ? (pcie_compiler_0_Control_Register_Access_arb_share_set_values - 1) : |pcie_compiler_0_Control_Register_Access_arb_share_counter ? (pcie_compiler_0_Control_Register_Access_arb_share_counter - 1) : 0;

  //pcie_compiler_0_Control_Register_Access_allgrants all slave grants, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_allgrants = |pcie_compiler_0_Control_Register_Access_grant_vector;

  //pcie_compiler_0_Control_Register_Access_end_xfer assignment, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_end_xfer = ~(pcie_compiler_0_Control_Register_Access_waits_for_read | pcie_compiler_0_Control_Register_Access_waits_for_write);

  //end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access = pcie_compiler_0_Control_Register_Access_end_xfer & (~pcie_compiler_0_Control_Register_Access_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //pcie_compiler_0_Control_Register_Access_arb_share_counter arbitration counter enable, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_arb_counter_enable = (end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access & pcie_compiler_0_Control_Register_Access_allgrants) | (end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access & ~pcie_compiler_0_Control_Register_Access_non_bursting_master_requests);

  //pcie_compiler_0_Control_Register_Access_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Control_Register_Access_arb_share_counter <= 0;
      else if (pcie_compiler_0_Control_Register_Access_arb_counter_enable)
          pcie_compiler_0_Control_Register_Access_arb_share_counter <= pcie_compiler_0_Control_Register_Access_arb_share_counter_next_value;
    end


  //pcie_compiler_0_Control_Register_Access_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Control_Register_Access_slavearbiterlockenable <= 0;
      else if ((|pcie_compiler_0_Control_Register_Access_master_qreq_vector & end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access) | (end_xfer_arb_share_counter_term_pcie_compiler_0_Control_Register_Access & ~pcie_compiler_0_Control_Register_Access_non_bursting_master_requests))
          pcie_compiler_0_Control_Register_Access_slavearbiterlockenable <= |pcie_compiler_0_Control_Register_Access_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_3/downstream pcie_compiler_0/Control_Register_Access arbiterlock, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_arbiterlock = pcie_compiler_0_Control_Register_Access_slavearbiterlockenable & DE4_SOPC_burst_3_downstream_continuerequest;

  //pcie_compiler_0_Control_Register_Access_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_slavearbiterlockenable2 = |pcie_compiler_0_Control_Register_Access_arb_share_counter_next_value;

  //DE4_SOPC_burst_3/downstream pcie_compiler_0/Control_Register_Access arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_arbiterlock2 = pcie_compiler_0_Control_Register_Access_slavearbiterlockenable2 & DE4_SOPC_burst_3_downstream_continuerequest;

  //pcie_compiler_0_Control_Register_Access_any_continuerequest at least one master continues requesting, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_any_continuerequest = 1;

  //DE4_SOPC_burst_3_downstream_continuerequest continued request, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_continuerequest = 1;

  assign DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access = DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access & ~((DE4_SOPC_burst_3_downstream_read & ((DE4_SOPC_burst_3_downstream_latency_counter != 0))));
  //local readdatavalid DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access, which is an e_mux
  assign DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access = DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access & DE4_SOPC_burst_3_downstream_read & ~pcie_compiler_0_Control_Register_Access_waits_for_read;

  //pcie_compiler_0_Control_Register_Access_writedata mux, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_writedata = DE4_SOPC_burst_3_downstream_writedata;

  //master is always granted when requested
  assign DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access = DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access;

  //DE4_SOPC_burst_3/downstream saved-grant pcie_compiler_0/Control_Register_Access, which is an e_assign
  assign DE4_SOPC_burst_3_downstream_saved_grant_pcie_compiler_0_Control_Register_Access = DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access;

  //allow new arb cycle for pcie_compiler_0/Control_Register_Access, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign pcie_compiler_0_Control_Register_Access_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign pcie_compiler_0_Control_Register_Access_master_qreq_vector = 1;

  assign pcie_compiler_0_Control_Register_Access_chipselect = DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access;
  //pcie_compiler_0_Control_Register_Access_firsttransfer first transaction, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_firsttransfer = pcie_compiler_0_Control_Register_Access_begins_xfer ? pcie_compiler_0_Control_Register_Access_unreg_firsttransfer : pcie_compiler_0_Control_Register_Access_reg_firsttransfer;

  //pcie_compiler_0_Control_Register_Access_unreg_firsttransfer first transaction, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_unreg_firsttransfer = ~(pcie_compiler_0_Control_Register_Access_slavearbiterlockenable & pcie_compiler_0_Control_Register_Access_any_continuerequest);

  //pcie_compiler_0_Control_Register_Access_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Control_Register_Access_reg_firsttransfer <= 1'b1;
      else if (pcie_compiler_0_Control_Register_Access_begins_xfer)
          pcie_compiler_0_Control_Register_Access_reg_firsttransfer <= pcie_compiler_0_Control_Register_Access_unreg_firsttransfer;
    end


  //pcie_compiler_0_Control_Register_Access_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_beginbursttransfer_internal = pcie_compiler_0_Control_Register_Access_begins_xfer;

  //pcie_compiler_0_Control_Register_Access_read assignment, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_read = DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access & DE4_SOPC_burst_3_downstream_read;

  //pcie_compiler_0_Control_Register_Access_write assignment, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_write = DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access & DE4_SOPC_burst_3_downstream_write;

  assign shifted_address_to_pcie_compiler_0_Control_Register_Access_from_DE4_SOPC_burst_3_downstream = DE4_SOPC_burst_3_downstream_address_to_slave;
  //pcie_compiler_0_Control_Register_Access_address mux, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_address = shifted_address_to_pcie_compiler_0_Control_Register_Access_from_DE4_SOPC_burst_3_downstream >> 2;

  //d1_pcie_compiler_0_Control_Register_Access_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_pcie_compiler_0_Control_Register_Access_end_xfer <= 1;
      else 
        d1_pcie_compiler_0_Control_Register_Access_end_xfer <= pcie_compiler_0_Control_Register_Access_end_xfer;
    end


  //pcie_compiler_0_Control_Register_Access_waits_for_read in a cycle, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_waits_for_read = pcie_compiler_0_Control_Register_Access_in_a_read_cycle & pcie_compiler_0_Control_Register_Access_waitrequest_from_sa;

  //pcie_compiler_0_Control_Register_Access_in_a_read_cycle assignment, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_in_a_read_cycle = DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access & DE4_SOPC_burst_3_downstream_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = pcie_compiler_0_Control_Register_Access_in_a_read_cycle;

  //pcie_compiler_0_Control_Register_Access_waits_for_write in a cycle, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_waits_for_write = pcie_compiler_0_Control_Register_Access_in_a_write_cycle & pcie_compiler_0_Control_Register_Access_waitrequest_from_sa;

  //pcie_compiler_0_Control_Register_Access_in_a_write_cycle assignment, which is an e_assign
  assign pcie_compiler_0_Control_Register_Access_in_a_write_cycle = DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access & DE4_SOPC_burst_3_downstream_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = pcie_compiler_0_Control_Register_Access_in_a_write_cycle;

  assign wait_for_pcie_compiler_0_Control_Register_Access_counter = 0;
  //pcie_compiler_0_Control_Register_Access_byteenable byte enable port mux, which is an e_mux
  assign pcie_compiler_0_Control_Register_Access_byteenable = (DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access)? DE4_SOPC_burst_3_downstream_byteenable :
    -1;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //pcie_compiler_0/Control_Register_Access enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //DE4_SOPC_burst_3/downstream non-zero arbitrationshare assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access && (DE4_SOPC_burst_3_downstream_arbitrationshare == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_3/downstream drove 0 on its 'arbitrationshare' port while accessing slave pcie_compiler_0/Control_Register_Access", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_3/downstream non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access && (DE4_SOPC_burst_3_downstream_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_3/downstream drove 0 on its 'burstcount' port while accessing slave pcie_compiler_0/Control_Register_Access", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module burstcount_fifo_for_pcie_compiler_0_Tx_Interface_module (
                                                                 // inputs:
                                                                  clear_fifo,
                                                                  clk,
                                                                  data_in,
                                                                  read,
                                                                  reset_n,
                                                                  sync_reset,
                                                                  write,

                                                                 // outputs:
                                                                  data_out,
                                                                  empty,
                                                                  fifo_contains_ones_n,
                                                                  full
                                                               )
;

  output  [  9: 0] data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input   [  9: 0] data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire    [  9: 0] data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_10;
  reg              full_11;
  reg              full_12;
  reg              full_13;
  reg              full_14;
  reg              full_15;
  reg              full_16;
  reg              full_17;
  reg              full_18;
  reg              full_19;
  reg              full_2;
  reg              full_20;
  reg              full_21;
  reg              full_22;
  reg              full_23;
  reg              full_24;
  reg              full_25;
  reg              full_26;
  reg              full_27;
  reg              full_28;
  reg              full_29;
  reg              full_3;
  reg              full_30;
  reg              full_31;
  wire             full_32;
  reg              full_4;
  reg              full_5;
  reg              full_6;
  reg              full_7;
  reg              full_8;
  reg              full_9;
  reg     [  6: 0] how_many_ones;
  wire    [  6: 0] one_count_minus_one;
  wire    [  6: 0] one_count_plus_one;
  wire             p0_full_0;
  wire    [  9: 0] p0_stage_0;
  wire             p10_full_10;
  wire    [  9: 0] p10_stage_10;
  wire             p11_full_11;
  wire    [  9: 0] p11_stage_11;
  wire             p12_full_12;
  wire    [  9: 0] p12_stage_12;
  wire             p13_full_13;
  wire    [  9: 0] p13_stage_13;
  wire             p14_full_14;
  wire    [  9: 0] p14_stage_14;
  wire             p15_full_15;
  wire    [  9: 0] p15_stage_15;
  wire             p16_full_16;
  wire    [  9: 0] p16_stage_16;
  wire             p17_full_17;
  wire    [  9: 0] p17_stage_17;
  wire             p18_full_18;
  wire    [  9: 0] p18_stage_18;
  wire             p19_full_19;
  wire    [  9: 0] p19_stage_19;
  wire             p1_full_1;
  wire    [  9: 0] p1_stage_1;
  wire             p20_full_20;
  wire    [  9: 0] p20_stage_20;
  wire             p21_full_21;
  wire    [  9: 0] p21_stage_21;
  wire             p22_full_22;
  wire    [  9: 0] p22_stage_22;
  wire             p23_full_23;
  wire    [  9: 0] p23_stage_23;
  wire             p24_full_24;
  wire    [  9: 0] p24_stage_24;
  wire             p25_full_25;
  wire    [  9: 0] p25_stage_25;
  wire             p26_full_26;
  wire    [  9: 0] p26_stage_26;
  wire             p27_full_27;
  wire    [  9: 0] p27_stage_27;
  wire             p28_full_28;
  wire    [  9: 0] p28_stage_28;
  wire             p29_full_29;
  wire    [  9: 0] p29_stage_29;
  wire             p2_full_2;
  wire    [  9: 0] p2_stage_2;
  wire             p30_full_30;
  wire    [  9: 0] p30_stage_30;
  wire             p31_full_31;
  wire    [  9: 0] p31_stage_31;
  wire             p3_full_3;
  wire    [  9: 0] p3_stage_3;
  wire             p4_full_4;
  wire    [  9: 0] p4_stage_4;
  wire             p5_full_5;
  wire    [  9: 0] p5_stage_5;
  wire             p6_full_6;
  wire    [  9: 0] p6_stage_6;
  wire             p7_full_7;
  wire    [  9: 0] p7_stage_7;
  wire             p8_full_8;
  wire    [  9: 0] p8_stage_8;
  wire             p9_full_9;
  wire    [  9: 0] p9_stage_9;
  reg     [  9: 0] stage_0;
  reg     [  9: 0] stage_1;
  reg     [  9: 0] stage_10;
  reg     [  9: 0] stage_11;
  reg     [  9: 0] stage_12;
  reg     [  9: 0] stage_13;
  reg     [  9: 0] stage_14;
  reg     [  9: 0] stage_15;
  reg     [  9: 0] stage_16;
  reg     [  9: 0] stage_17;
  reg     [  9: 0] stage_18;
  reg     [  9: 0] stage_19;
  reg     [  9: 0] stage_2;
  reg     [  9: 0] stage_20;
  reg     [  9: 0] stage_21;
  reg     [  9: 0] stage_22;
  reg     [  9: 0] stage_23;
  reg     [  9: 0] stage_24;
  reg     [  9: 0] stage_25;
  reg     [  9: 0] stage_26;
  reg     [  9: 0] stage_27;
  reg     [  9: 0] stage_28;
  reg     [  9: 0] stage_29;
  reg     [  9: 0] stage_3;
  reg     [  9: 0] stage_30;
  reg     [  9: 0] stage_31;
  reg     [  9: 0] stage_4;
  reg     [  9: 0] stage_5;
  reg     [  9: 0] stage_6;
  reg     [  9: 0] stage_7;
  reg     [  9: 0] stage_8;
  reg     [  9: 0] stage_9;
  wire    [  6: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_31;
  assign empty = !full_0;
  assign full_32 = 0;
  //data_31, which is an e_mux
  assign p31_stage_31 = ((full_32 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_31 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_31))
          if (sync_reset & full_31 & !((full_32 == 0) & read & write))
              stage_31 <= 0;
          else 
            stage_31 <= p31_stage_31;
    end


  //control_31, which is an e_mux
  assign p31_full_31 = ((read & !write) == 0)? full_30 :
    0;

  //control_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_31 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_31 <= 0;
          else 
            full_31 <= p31_full_31;
    end


  //data_30, which is an e_mux
  assign p30_stage_30 = ((full_31 & ~clear_fifo) == 0)? data_in :
    stage_31;

  //data_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_30 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_30))
          if (sync_reset & full_30 & !((full_31 == 0) & read & write))
              stage_30 <= 0;
          else 
            stage_30 <= p30_stage_30;
    end


  //control_30, which is an e_mux
  assign p30_full_30 = ((read & !write) == 0)? full_29 :
    full_31;

  //control_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_30 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_30 <= 0;
          else 
            full_30 <= p30_full_30;
    end


  //data_29, which is an e_mux
  assign p29_stage_29 = ((full_30 & ~clear_fifo) == 0)? data_in :
    stage_30;

  //data_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_29 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_29))
          if (sync_reset & full_29 & !((full_30 == 0) & read & write))
              stage_29 <= 0;
          else 
            stage_29 <= p29_stage_29;
    end


  //control_29, which is an e_mux
  assign p29_full_29 = ((read & !write) == 0)? full_28 :
    full_30;

  //control_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_29 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_29 <= 0;
          else 
            full_29 <= p29_full_29;
    end


  //data_28, which is an e_mux
  assign p28_stage_28 = ((full_29 & ~clear_fifo) == 0)? data_in :
    stage_29;

  //data_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_28 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_28))
          if (sync_reset & full_28 & !((full_29 == 0) & read & write))
              stage_28 <= 0;
          else 
            stage_28 <= p28_stage_28;
    end


  //control_28, which is an e_mux
  assign p28_full_28 = ((read & !write) == 0)? full_27 :
    full_29;

  //control_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_28 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_28 <= 0;
          else 
            full_28 <= p28_full_28;
    end


  //data_27, which is an e_mux
  assign p27_stage_27 = ((full_28 & ~clear_fifo) == 0)? data_in :
    stage_28;

  //data_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_27 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_27))
          if (sync_reset & full_27 & !((full_28 == 0) & read & write))
              stage_27 <= 0;
          else 
            stage_27 <= p27_stage_27;
    end


  //control_27, which is an e_mux
  assign p27_full_27 = ((read & !write) == 0)? full_26 :
    full_28;

  //control_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_27 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_27 <= 0;
          else 
            full_27 <= p27_full_27;
    end


  //data_26, which is an e_mux
  assign p26_stage_26 = ((full_27 & ~clear_fifo) == 0)? data_in :
    stage_27;

  //data_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_26 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_26))
          if (sync_reset & full_26 & !((full_27 == 0) & read & write))
              stage_26 <= 0;
          else 
            stage_26 <= p26_stage_26;
    end


  //control_26, which is an e_mux
  assign p26_full_26 = ((read & !write) == 0)? full_25 :
    full_27;

  //control_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_26 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_26 <= 0;
          else 
            full_26 <= p26_full_26;
    end


  //data_25, which is an e_mux
  assign p25_stage_25 = ((full_26 & ~clear_fifo) == 0)? data_in :
    stage_26;

  //data_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_25 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_25))
          if (sync_reset & full_25 & !((full_26 == 0) & read & write))
              stage_25 <= 0;
          else 
            stage_25 <= p25_stage_25;
    end


  //control_25, which is an e_mux
  assign p25_full_25 = ((read & !write) == 0)? full_24 :
    full_26;

  //control_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_25 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_25 <= 0;
          else 
            full_25 <= p25_full_25;
    end


  //data_24, which is an e_mux
  assign p24_stage_24 = ((full_25 & ~clear_fifo) == 0)? data_in :
    stage_25;

  //data_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_24 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_24))
          if (sync_reset & full_24 & !((full_25 == 0) & read & write))
              stage_24 <= 0;
          else 
            stage_24 <= p24_stage_24;
    end


  //control_24, which is an e_mux
  assign p24_full_24 = ((read & !write) == 0)? full_23 :
    full_25;

  //control_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_24 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_24 <= 0;
          else 
            full_24 <= p24_full_24;
    end


  //data_23, which is an e_mux
  assign p23_stage_23 = ((full_24 & ~clear_fifo) == 0)? data_in :
    stage_24;

  //data_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_23 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_23))
          if (sync_reset & full_23 & !((full_24 == 0) & read & write))
              stage_23 <= 0;
          else 
            stage_23 <= p23_stage_23;
    end


  //control_23, which is an e_mux
  assign p23_full_23 = ((read & !write) == 0)? full_22 :
    full_24;

  //control_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_23 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_23 <= 0;
          else 
            full_23 <= p23_full_23;
    end


  //data_22, which is an e_mux
  assign p22_stage_22 = ((full_23 & ~clear_fifo) == 0)? data_in :
    stage_23;

  //data_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_22 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_22))
          if (sync_reset & full_22 & !((full_23 == 0) & read & write))
              stage_22 <= 0;
          else 
            stage_22 <= p22_stage_22;
    end


  //control_22, which is an e_mux
  assign p22_full_22 = ((read & !write) == 0)? full_21 :
    full_23;

  //control_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_22 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_22 <= 0;
          else 
            full_22 <= p22_full_22;
    end


  //data_21, which is an e_mux
  assign p21_stage_21 = ((full_22 & ~clear_fifo) == 0)? data_in :
    stage_22;

  //data_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_21 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_21))
          if (sync_reset & full_21 & !((full_22 == 0) & read & write))
              stage_21 <= 0;
          else 
            stage_21 <= p21_stage_21;
    end


  //control_21, which is an e_mux
  assign p21_full_21 = ((read & !write) == 0)? full_20 :
    full_22;

  //control_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_21 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_21 <= 0;
          else 
            full_21 <= p21_full_21;
    end


  //data_20, which is an e_mux
  assign p20_stage_20 = ((full_21 & ~clear_fifo) == 0)? data_in :
    stage_21;

  //data_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_20 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_20))
          if (sync_reset & full_20 & !((full_21 == 0) & read & write))
              stage_20 <= 0;
          else 
            stage_20 <= p20_stage_20;
    end


  //control_20, which is an e_mux
  assign p20_full_20 = ((read & !write) == 0)? full_19 :
    full_21;

  //control_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_20 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_20 <= 0;
          else 
            full_20 <= p20_full_20;
    end


  //data_19, which is an e_mux
  assign p19_stage_19 = ((full_20 & ~clear_fifo) == 0)? data_in :
    stage_20;

  //data_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_19 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_19))
          if (sync_reset & full_19 & !((full_20 == 0) & read & write))
              stage_19 <= 0;
          else 
            stage_19 <= p19_stage_19;
    end


  //control_19, which is an e_mux
  assign p19_full_19 = ((read & !write) == 0)? full_18 :
    full_20;

  //control_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_19 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_19 <= 0;
          else 
            full_19 <= p19_full_19;
    end


  //data_18, which is an e_mux
  assign p18_stage_18 = ((full_19 & ~clear_fifo) == 0)? data_in :
    stage_19;

  //data_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_18 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_18))
          if (sync_reset & full_18 & !((full_19 == 0) & read & write))
              stage_18 <= 0;
          else 
            stage_18 <= p18_stage_18;
    end


  //control_18, which is an e_mux
  assign p18_full_18 = ((read & !write) == 0)? full_17 :
    full_19;

  //control_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_18 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_18 <= 0;
          else 
            full_18 <= p18_full_18;
    end


  //data_17, which is an e_mux
  assign p17_stage_17 = ((full_18 & ~clear_fifo) == 0)? data_in :
    stage_18;

  //data_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_17 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_17))
          if (sync_reset & full_17 & !((full_18 == 0) & read & write))
              stage_17 <= 0;
          else 
            stage_17 <= p17_stage_17;
    end


  //control_17, which is an e_mux
  assign p17_full_17 = ((read & !write) == 0)? full_16 :
    full_18;

  //control_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_17 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_17 <= 0;
          else 
            full_17 <= p17_full_17;
    end


  //data_16, which is an e_mux
  assign p16_stage_16 = ((full_17 & ~clear_fifo) == 0)? data_in :
    stage_17;

  //data_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_16 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_16))
          if (sync_reset & full_16 & !((full_17 == 0) & read & write))
              stage_16 <= 0;
          else 
            stage_16 <= p16_stage_16;
    end


  //control_16, which is an e_mux
  assign p16_full_16 = ((read & !write) == 0)? full_15 :
    full_17;

  //control_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_16 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_16 <= 0;
          else 
            full_16 <= p16_full_16;
    end


  //data_15, which is an e_mux
  assign p15_stage_15 = ((full_16 & ~clear_fifo) == 0)? data_in :
    stage_16;

  //data_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_15 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_15))
          if (sync_reset & full_15 & !((full_16 == 0) & read & write))
              stage_15 <= 0;
          else 
            stage_15 <= p15_stage_15;
    end


  //control_15, which is an e_mux
  assign p15_full_15 = ((read & !write) == 0)? full_14 :
    full_16;

  //control_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_15 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_15 <= 0;
          else 
            full_15 <= p15_full_15;
    end


  //data_14, which is an e_mux
  assign p14_stage_14 = ((full_15 & ~clear_fifo) == 0)? data_in :
    stage_15;

  //data_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_14 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_14))
          if (sync_reset & full_14 & !((full_15 == 0) & read & write))
              stage_14 <= 0;
          else 
            stage_14 <= p14_stage_14;
    end


  //control_14, which is an e_mux
  assign p14_full_14 = ((read & !write) == 0)? full_13 :
    full_15;

  //control_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_14 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_14 <= 0;
          else 
            full_14 <= p14_full_14;
    end


  //data_13, which is an e_mux
  assign p13_stage_13 = ((full_14 & ~clear_fifo) == 0)? data_in :
    stage_14;

  //data_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_13 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_13))
          if (sync_reset & full_13 & !((full_14 == 0) & read & write))
              stage_13 <= 0;
          else 
            stage_13 <= p13_stage_13;
    end


  //control_13, which is an e_mux
  assign p13_full_13 = ((read & !write) == 0)? full_12 :
    full_14;

  //control_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_13 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_13 <= 0;
          else 
            full_13 <= p13_full_13;
    end


  //data_12, which is an e_mux
  assign p12_stage_12 = ((full_13 & ~clear_fifo) == 0)? data_in :
    stage_13;

  //data_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_12 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_12))
          if (sync_reset & full_12 & !((full_13 == 0) & read & write))
              stage_12 <= 0;
          else 
            stage_12 <= p12_stage_12;
    end


  //control_12, which is an e_mux
  assign p12_full_12 = ((read & !write) == 0)? full_11 :
    full_13;

  //control_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_12 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_12 <= 0;
          else 
            full_12 <= p12_full_12;
    end


  //data_11, which is an e_mux
  assign p11_stage_11 = ((full_12 & ~clear_fifo) == 0)? data_in :
    stage_12;

  //data_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_11 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_11))
          if (sync_reset & full_11 & !((full_12 == 0) & read & write))
              stage_11 <= 0;
          else 
            stage_11 <= p11_stage_11;
    end


  //control_11, which is an e_mux
  assign p11_full_11 = ((read & !write) == 0)? full_10 :
    full_12;

  //control_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_11 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_11 <= 0;
          else 
            full_11 <= p11_full_11;
    end


  //data_10, which is an e_mux
  assign p10_stage_10 = ((full_11 & ~clear_fifo) == 0)? data_in :
    stage_11;

  //data_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_10 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_10))
          if (sync_reset & full_10 & !((full_11 == 0) & read & write))
              stage_10 <= 0;
          else 
            stage_10 <= p10_stage_10;
    end


  //control_10, which is an e_mux
  assign p10_full_10 = ((read & !write) == 0)? full_9 :
    full_11;

  //control_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_10 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_10 <= 0;
          else 
            full_10 <= p10_full_10;
    end


  //data_9, which is an e_mux
  assign p9_stage_9 = ((full_10 & ~clear_fifo) == 0)? data_in :
    stage_10;

  //data_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_9 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_9))
          if (sync_reset & full_9 & !((full_10 == 0) & read & write))
              stage_9 <= 0;
          else 
            stage_9 <= p9_stage_9;
    end


  //control_9, which is an e_mux
  assign p9_full_9 = ((read & !write) == 0)? full_8 :
    full_10;

  //control_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_9 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_9 <= 0;
          else 
            full_9 <= p9_full_9;
    end


  //data_8, which is an e_mux
  assign p8_stage_8 = ((full_9 & ~clear_fifo) == 0)? data_in :
    stage_9;

  //data_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_8 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_8))
          if (sync_reset & full_8 & !((full_9 == 0) & read & write))
              stage_8 <= 0;
          else 
            stage_8 <= p8_stage_8;
    end


  //control_8, which is an e_mux
  assign p8_full_8 = ((read & !write) == 0)? full_7 :
    full_9;

  //control_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_8 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_8 <= 0;
          else 
            full_8 <= p8_full_8;
    end


  //data_7, which is an e_mux
  assign p7_stage_7 = ((full_8 & ~clear_fifo) == 0)? data_in :
    stage_8;

  //data_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_7 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_7))
          if (sync_reset & full_7 & !((full_8 == 0) & read & write))
              stage_7 <= 0;
          else 
            stage_7 <= p7_stage_7;
    end


  //control_7, which is an e_mux
  assign p7_full_7 = ((read & !write) == 0)? full_6 :
    full_8;

  //control_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_7 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_7 <= 0;
          else 
            full_7 <= p7_full_7;
    end


  //data_6, which is an e_mux
  assign p6_stage_6 = ((full_7 & ~clear_fifo) == 0)? data_in :
    stage_7;

  //data_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_6 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_6))
          if (sync_reset & full_6 & !((full_7 == 0) & read & write))
              stage_6 <= 0;
          else 
            stage_6 <= p6_stage_6;
    end


  //control_6, which is an e_mux
  assign p6_full_6 = ((read & !write) == 0)? full_5 :
    full_7;

  //control_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_6 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_6 <= 0;
          else 
            full_6 <= p6_full_6;
    end


  //data_5, which is an e_mux
  assign p5_stage_5 = ((full_6 & ~clear_fifo) == 0)? data_in :
    stage_6;

  //data_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_5 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_5))
          if (sync_reset & full_5 & !((full_6 == 0) & read & write))
              stage_5 <= 0;
          else 
            stage_5 <= p5_stage_5;
    end


  //control_5, which is an e_mux
  assign p5_full_5 = ((read & !write) == 0)? full_4 :
    full_6;

  //control_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_5 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_5 <= 0;
          else 
            full_5 <= p5_full_5;
    end


  //data_4, which is an e_mux
  assign p4_stage_4 = ((full_5 & ~clear_fifo) == 0)? data_in :
    stage_5;

  //data_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_4 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_4))
          if (sync_reset & full_4 & !((full_5 == 0) & read & write))
              stage_4 <= 0;
          else 
            stage_4 <= p4_stage_4;
    end


  //control_4, which is an e_mux
  assign p4_full_4 = ((read & !write) == 0)? full_3 :
    full_5;

  //control_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_4 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_4 <= 0;
          else 
            full_4 <= p4_full_4;
    end


  //data_3, which is an e_mux
  assign p3_stage_3 = ((full_4 & ~clear_fifo) == 0)? data_in :
    stage_4;

  //data_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_3 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_3))
          if (sync_reset & full_3 & !((full_4 == 0) & read & write))
              stage_3 <= 0;
          else 
            stage_3 <= p3_stage_3;
    end


  //control_3, which is an e_mux
  assign p3_full_3 = ((read & !write) == 0)? full_2 :
    full_4;

  //control_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_3 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_3 <= 0;
          else 
            full_3 <= p3_full_3;
    end


  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    stage_3;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    full_3;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_DE4_SOPC_burst_2_downstream_to_pcie_compiler_0_Tx_Interface_module (
                                                                                         // inputs:
                                                                                          clear_fifo,
                                                                                          clk,
                                                                                          data_in,
                                                                                          read,
                                                                                          reset_n,
                                                                                          sync_reset,
                                                                                          write,

                                                                                         // outputs:
                                                                                          data_out,
                                                                                          empty,
                                                                                          fifo_contains_ones_n,
                                                                                          full
                                                                                       )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_10;
  reg              full_11;
  reg              full_12;
  reg              full_13;
  reg              full_14;
  reg              full_15;
  reg              full_16;
  reg              full_17;
  reg              full_18;
  reg              full_19;
  reg              full_2;
  reg              full_20;
  reg              full_21;
  reg              full_22;
  reg              full_23;
  reg              full_24;
  reg              full_25;
  reg              full_26;
  reg              full_27;
  reg              full_28;
  reg              full_29;
  reg              full_3;
  reg              full_30;
  reg              full_31;
  wire             full_32;
  reg              full_4;
  reg              full_5;
  reg              full_6;
  reg              full_7;
  reg              full_8;
  reg              full_9;
  reg     [  6: 0] how_many_ones;
  wire    [  6: 0] one_count_minus_one;
  wire    [  6: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p10_full_10;
  wire             p10_stage_10;
  wire             p11_full_11;
  wire             p11_stage_11;
  wire             p12_full_12;
  wire             p12_stage_12;
  wire             p13_full_13;
  wire             p13_stage_13;
  wire             p14_full_14;
  wire             p14_stage_14;
  wire             p15_full_15;
  wire             p15_stage_15;
  wire             p16_full_16;
  wire             p16_stage_16;
  wire             p17_full_17;
  wire             p17_stage_17;
  wire             p18_full_18;
  wire             p18_stage_18;
  wire             p19_full_19;
  wire             p19_stage_19;
  wire             p1_full_1;
  wire             p1_stage_1;
  wire             p20_full_20;
  wire             p20_stage_20;
  wire             p21_full_21;
  wire             p21_stage_21;
  wire             p22_full_22;
  wire             p22_stage_22;
  wire             p23_full_23;
  wire             p23_stage_23;
  wire             p24_full_24;
  wire             p24_stage_24;
  wire             p25_full_25;
  wire             p25_stage_25;
  wire             p26_full_26;
  wire             p26_stage_26;
  wire             p27_full_27;
  wire             p27_stage_27;
  wire             p28_full_28;
  wire             p28_stage_28;
  wire             p29_full_29;
  wire             p29_stage_29;
  wire             p2_full_2;
  wire             p2_stage_2;
  wire             p30_full_30;
  wire             p30_stage_30;
  wire             p31_full_31;
  wire             p31_stage_31;
  wire             p3_full_3;
  wire             p3_stage_3;
  wire             p4_full_4;
  wire             p4_stage_4;
  wire             p5_full_5;
  wire             p5_stage_5;
  wire             p6_full_6;
  wire             p6_stage_6;
  wire             p7_full_7;
  wire             p7_stage_7;
  wire             p8_full_8;
  wire             p8_stage_8;
  wire             p9_full_9;
  wire             p9_stage_9;
  reg              stage_0;
  reg              stage_1;
  reg              stage_10;
  reg              stage_11;
  reg              stage_12;
  reg              stage_13;
  reg              stage_14;
  reg              stage_15;
  reg              stage_16;
  reg              stage_17;
  reg              stage_18;
  reg              stage_19;
  reg              stage_2;
  reg              stage_20;
  reg              stage_21;
  reg              stage_22;
  reg              stage_23;
  reg              stage_24;
  reg              stage_25;
  reg              stage_26;
  reg              stage_27;
  reg              stage_28;
  reg              stage_29;
  reg              stage_3;
  reg              stage_30;
  reg              stage_31;
  reg              stage_4;
  reg              stage_5;
  reg              stage_6;
  reg              stage_7;
  reg              stage_8;
  reg              stage_9;
  wire    [  6: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_31;
  assign empty = !full_0;
  assign full_32 = 0;
  //data_31, which is an e_mux
  assign p31_stage_31 = ((full_32 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_31 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_31))
          if (sync_reset & full_31 & !((full_32 == 0) & read & write))
              stage_31 <= 0;
          else 
            stage_31 <= p31_stage_31;
    end


  //control_31, which is an e_mux
  assign p31_full_31 = ((read & !write) == 0)? full_30 :
    0;

  //control_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_31 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_31 <= 0;
          else 
            full_31 <= p31_full_31;
    end


  //data_30, which is an e_mux
  assign p30_stage_30 = ((full_31 & ~clear_fifo) == 0)? data_in :
    stage_31;

  //data_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_30 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_30))
          if (sync_reset & full_30 & !((full_31 == 0) & read & write))
              stage_30 <= 0;
          else 
            stage_30 <= p30_stage_30;
    end


  //control_30, which is an e_mux
  assign p30_full_30 = ((read & !write) == 0)? full_29 :
    full_31;

  //control_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_30 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_30 <= 0;
          else 
            full_30 <= p30_full_30;
    end


  //data_29, which is an e_mux
  assign p29_stage_29 = ((full_30 & ~clear_fifo) == 0)? data_in :
    stage_30;

  //data_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_29 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_29))
          if (sync_reset & full_29 & !((full_30 == 0) & read & write))
              stage_29 <= 0;
          else 
            stage_29 <= p29_stage_29;
    end


  //control_29, which is an e_mux
  assign p29_full_29 = ((read & !write) == 0)? full_28 :
    full_30;

  //control_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_29 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_29 <= 0;
          else 
            full_29 <= p29_full_29;
    end


  //data_28, which is an e_mux
  assign p28_stage_28 = ((full_29 & ~clear_fifo) == 0)? data_in :
    stage_29;

  //data_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_28 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_28))
          if (sync_reset & full_28 & !((full_29 == 0) & read & write))
              stage_28 <= 0;
          else 
            stage_28 <= p28_stage_28;
    end


  //control_28, which is an e_mux
  assign p28_full_28 = ((read & !write) == 0)? full_27 :
    full_29;

  //control_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_28 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_28 <= 0;
          else 
            full_28 <= p28_full_28;
    end


  //data_27, which is an e_mux
  assign p27_stage_27 = ((full_28 & ~clear_fifo) == 0)? data_in :
    stage_28;

  //data_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_27 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_27))
          if (sync_reset & full_27 & !((full_28 == 0) & read & write))
              stage_27 <= 0;
          else 
            stage_27 <= p27_stage_27;
    end


  //control_27, which is an e_mux
  assign p27_full_27 = ((read & !write) == 0)? full_26 :
    full_28;

  //control_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_27 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_27 <= 0;
          else 
            full_27 <= p27_full_27;
    end


  //data_26, which is an e_mux
  assign p26_stage_26 = ((full_27 & ~clear_fifo) == 0)? data_in :
    stage_27;

  //data_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_26 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_26))
          if (sync_reset & full_26 & !((full_27 == 0) & read & write))
              stage_26 <= 0;
          else 
            stage_26 <= p26_stage_26;
    end


  //control_26, which is an e_mux
  assign p26_full_26 = ((read & !write) == 0)? full_25 :
    full_27;

  //control_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_26 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_26 <= 0;
          else 
            full_26 <= p26_full_26;
    end


  //data_25, which is an e_mux
  assign p25_stage_25 = ((full_26 & ~clear_fifo) == 0)? data_in :
    stage_26;

  //data_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_25 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_25))
          if (sync_reset & full_25 & !((full_26 == 0) & read & write))
              stage_25 <= 0;
          else 
            stage_25 <= p25_stage_25;
    end


  //control_25, which is an e_mux
  assign p25_full_25 = ((read & !write) == 0)? full_24 :
    full_26;

  //control_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_25 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_25 <= 0;
          else 
            full_25 <= p25_full_25;
    end


  //data_24, which is an e_mux
  assign p24_stage_24 = ((full_25 & ~clear_fifo) == 0)? data_in :
    stage_25;

  //data_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_24 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_24))
          if (sync_reset & full_24 & !((full_25 == 0) & read & write))
              stage_24 <= 0;
          else 
            stage_24 <= p24_stage_24;
    end


  //control_24, which is an e_mux
  assign p24_full_24 = ((read & !write) == 0)? full_23 :
    full_25;

  //control_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_24 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_24 <= 0;
          else 
            full_24 <= p24_full_24;
    end


  //data_23, which is an e_mux
  assign p23_stage_23 = ((full_24 & ~clear_fifo) == 0)? data_in :
    stage_24;

  //data_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_23 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_23))
          if (sync_reset & full_23 & !((full_24 == 0) & read & write))
              stage_23 <= 0;
          else 
            stage_23 <= p23_stage_23;
    end


  //control_23, which is an e_mux
  assign p23_full_23 = ((read & !write) == 0)? full_22 :
    full_24;

  //control_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_23 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_23 <= 0;
          else 
            full_23 <= p23_full_23;
    end


  //data_22, which is an e_mux
  assign p22_stage_22 = ((full_23 & ~clear_fifo) == 0)? data_in :
    stage_23;

  //data_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_22 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_22))
          if (sync_reset & full_22 & !((full_23 == 0) & read & write))
              stage_22 <= 0;
          else 
            stage_22 <= p22_stage_22;
    end


  //control_22, which is an e_mux
  assign p22_full_22 = ((read & !write) == 0)? full_21 :
    full_23;

  //control_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_22 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_22 <= 0;
          else 
            full_22 <= p22_full_22;
    end


  //data_21, which is an e_mux
  assign p21_stage_21 = ((full_22 & ~clear_fifo) == 0)? data_in :
    stage_22;

  //data_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_21 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_21))
          if (sync_reset & full_21 & !((full_22 == 0) & read & write))
              stage_21 <= 0;
          else 
            stage_21 <= p21_stage_21;
    end


  //control_21, which is an e_mux
  assign p21_full_21 = ((read & !write) == 0)? full_20 :
    full_22;

  //control_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_21 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_21 <= 0;
          else 
            full_21 <= p21_full_21;
    end


  //data_20, which is an e_mux
  assign p20_stage_20 = ((full_21 & ~clear_fifo) == 0)? data_in :
    stage_21;

  //data_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_20 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_20))
          if (sync_reset & full_20 & !((full_21 == 0) & read & write))
              stage_20 <= 0;
          else 
            stage_20 <= p20_stage_20;
    end


  //control_20, which is an e_mux
  assign p20_full_20 = ((read & !write) == 0)? full_19 :
    full_21;

  //control_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_20 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_20 <= 0;
          else 
            full_20 <= p20_full_20;
    end


  //data_19, which is an e_mux
  assign p19_stage_19 = ((full_20 & ~clear_fifo) == 0)? data_in :
    stage_20;

  //data_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_19 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_19))
          if (sync_reset & full_19 & !((full_20 == 0) & read & write))
              stage_19 <= 0;
          else 
            stage_19 <= p19_stage_19;
    end


  //control_19, which is an e_mux
  assign p19_full_19 = ((read & !write) == 0)? full_18 :
    full_20;

  //control_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_19 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_19 <= 0;
          else 
            full_19 <= p19_full_19;
    end


  //data_18, which is an e_mux
  assign p18_stage_18 = ((full_19 & ~clear_fifo) == 0)? data_in :
    stage_19;

  //data_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_18 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_18))
          if (sync_reset & full_18 & !((full_19 == 0) & read & write))
              stage_18 <= 0;
          else 
            stage_18 <= p18_stage_18;
    end


  //control_18, which is an e_mux
  assign p18_full_18 = ((read & !write) == 0)? full_17 :
    full_19;

  //control_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_18 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_18 <= 0;
          else 
            full_18 <= p18_full_18;
    end


  //data_17, which is an e_mux
  assign p17_stage_17 = ((full_18 & ~clear_fifo) == 0)? data_in :
    stage_18;

  //data_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_17 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_17))
          if (sync_reset & full_17 & !((full_18 == 0) & read & write))
              stage_17 <= 0;
          else 
            stage_17 <= p17_stage_17;
    end


  //control_17, which is an e_mux
  assign p17_full_17 = ((read & !write) == 0)? full_16 :
    full_18;

  //control_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_17 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_17 <= 0;
          else 
            full_17 <= p17_full_17;
    end


  //data_16, which is an e_mux
  assign p16_stage_16 = ((full_17 & ~clear_fifo) == 0)? data_in :
    stage_17;

  //data_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_16 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_16))
          if (sync_reset & full_16 & !((full_17 == 0) & read & write))
              stage_16 <= 0;
          else 
            stage_16 <= p16_stage_16;
    end


  //control_16, which is an e_mux
  assign p16_full_16 = ((read & !write) == 0)? full_15 :
    full_17;

  //control_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_16 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_16 <= 0;
          else 
            full_16 <= p16_full_16;
    end


  //data_15, which is an e_mux
  assign p15_stage_15 = ((full_16 & ~clear_fifo) == 0)? data_in :
    stage_16;

  //data_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_15 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_15))
          if (sync_reset & full_15 & !((full_16 == 0) & read & write))
              stage_15 <= 0;
          else 
            stage_15 <= p15_stage_15;
    end


  //control_15, which is an e_mux
  assign p15_full_15 = ((read & !write) == 0)? full_14 :
    full_16;

  //control_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_15 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_15 <= 0;
          else 
            full_15 <= p15_full_15;
    end


  //data_14, which is an e_mux
  assign p14_stage_14 = ((full_15 & ~clear_fifo) == 0)? data_in :
    stage_15;

  //data_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_14 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_14))
          if (sync_reset & full_14 & !((full_15 == 0) & read & write))
              stage_14 <= 0;
          else 
            stage_14 <= p14_stage_14;
    end


  //control_14, which is an e_mux
  assign p14_full_14 = ((read & !write) == 0)? full_13 :
    full_15;

  //control_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_14 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_14 <= 0;
          else 
            full_14 <= p14_full_14;
    end


  //data_13, which is an e_mux
  assign p13_stage_13 = ((full_14 & ~clear_fifo) == 0)? data_in :
    stage_14;

  //data_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_13 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_13))
          if (sync_reset & full_13 & !((full_14 == 0) & read & write))
              stage_13 <= 0;
          else 
            stage_13 <= p13_stage_13;
    end


  //control_13, which is an e_mux
  assign p13_full_13 = ((read & !write) == 0)? full_12 :
    full_14;

  //control_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_13 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_13 <= 0;
          else 
            full_13 <= p13_full_13;
    end


  //data_12, which is an e_mux
  assign p12_stage_12 = ((full_13 & ~clear_fifo) == 0)? data_in :
    stage_13;

  //data_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_12 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_12))
          if (sync_reset & full_12 & !((full_13 == 0) & read & write))
              stage_12 <= 0;
          else 
            stage_12 <= p12_stage_12;
    end


  //control_12, which is an e_mux
  assign p12_full_12 = ((read & !write) == 0)? full_11 :
    full_13;

  //control_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_12 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_12 <= 0;
          else 
            full_12 <= p12_full_12;
    end


  //data_11, which is an e_mux
  assign p11_stage_11 = ((full_12 & ~clear_fifo) == 0)? data_in :
    stage_12;

  //data_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_11 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_11))
          if (sync_reset & full_11 & !((full_12 == 0) & read & write))
              stage_11 <= 0;
          else 
            stage_11 <= p11_stage_11;
    end


  //control_11, which is an e_mux
  assign p11_full_11 = ((read & !write) == 0)? full_10 :
    full_12;

  //control_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_11 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_11 <= 0;
          else 
            full_11 <= p11_full_11;
    end


  //data_10, which is an e_mux
  assign p10_stage_10 = ((full_11 & ~clear_fifo) == 0)? data_in :
    stage_11;

  //data_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_10 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_10))
          if (sync_reset & full_10 & !((full_11 == 0) & read & write))
              stage_10 <= 0;
          else 
            stage_10 <= p10_stage_10;
    end


  //control_10, which is an e_mux
  assign p10_full_10 = ((read & !write) == 0)? full_9 :
    full_11;

  //control_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_10 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_10 <= 0;
          else 
            full_10 <= p10_full_10;
    end


  //data_9, which is an e_mux
  assign p9_stage_9 = ((full_10 & ~clear_fifo) == 0)? data_in :
    stage_10;

  //data_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_9 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_9))
          if (sync_reset & full_9 & !((full_10 == 0) & read & write))
              stage_9 <= 0;
          else 
            stage_9 <= p9_stage_9;
    end


  //control_9, which is an e_mux
  assign p9_full_9 = ((read & !write) == 0)? full_8 :
    full_10;

  //control_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_9 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_9 <= 0;
          else 
            full_9 <= p9_full_9;
    end


  //data_8, which is an e_mux
  assign p8_stage_8 = ((full_9 & ~clear_fifo) == 0)? data_in :
    stage_9;

  //data_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_8 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_8))
          if (sync_reset & full_8 & !((full_9 == 0) & read & write))
              stage_8 <= 0;
          else 
            stage_8 <= p8_stage_8;
    end


  //control_8, which is an e_mux
  assign p8_full_8 = ((read & !write) == 0)? full_7 :
    full_9;

  //control_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_8 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_8 <= 0;
          else 
            full_8 <= p8_full_8;
    end


  //data_7, which is an e_mux
  assign p7_stage_7 = ((full_8 & ~clear_fifo) == 0)? data_in :
    stage_8;

  //data_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_7 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_7))
          if (sync_reset & full_7 & !((full_8 == 0) & read & write))
              stage_7 <= 0;
          else 
            stage_7 <= p7_stage_7;
    end


  //control_7, which is an e_mux
  assign p7_full_7 = ((read & !write) == 0)? full_6 :
    full_8;

  //control_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_7 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_7 <= 0;
          else 
            full_7 <= p7_full_7;
    end


  //data_6, which is an e_mux
  assign p6_stage_6 = ((full_7 & ~clear_fifo) == 0)? data_in :
    stage_7;

  //data_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_6 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_6))
          if (sync_reset & full_6 & !((full_7 == 0) & read & write))
              stage_6 <= 0;
          else 
            stage_6 <= p6_stage_6;
    end


  //control_6, which is an e_mux
  assign p6_full_6 = ((read & !write) == 0)? full_5 :
    full_7;

  //control_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_6 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_6 <= 0;
          else 
            full_6 <= p6_full_6;
    end


  //data_5, which is an e_mux
  assign p5_stage_5 = ((full_6 & ~clear_fifo) == 0)? data_in :
    stage_6;

  //data_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_5 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_5))
          if (sync_reset & full_5 & !((full_6 == 0) & read & write))
              stage_5 <= 0;
          else 
            stage_5 <= p5_stage_5;
    end


  //control_5, which is an e_mux
  assign p5_full_5 = ((read & !write) == 0)? full_4 :
    full_6;

  //control_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_5 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_5 <= 0;
          else 
            full_5 <= p5_full_5;
    end


  //data_4, which is an e_mux
  assign p4_stage_4 = ((full_5 & ~clear_fifo) == 0)? data_in :
    stage_5;

  //data_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_4 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_4))
          if (sync_reset & full_4 & !((full_5 == 0) & read & write))
              stage_4 <= 0;
          else 
            stage_4 <= p4_stage_4;
    end


  //control_4, which is an e_mux
  assign p4_full_4 = ((read & !write) == 0)? full_3 :
    full_5;

  //control_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_4 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_4 <= 0;
          else 
            full_4 <= p4_full_4;
    end


  //data_3, which is an e_mux
  assign p3_stage_3 = ((full_4 & ~clear_fifo) == 0)? data_in :
    stage_4;

  //data_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_3 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_3))
          if (sync_reset & full_3 & !((full_4 == 0) & read & write))
              stage_3 <= 0;
          else 
            stage_3 <= p3_stage_3;
    end


  //control_3, which is an e_mux
  assign p3_full_3 = ((read & !write) == 0)? full_2 :
    full_4;

  //control_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_3 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_3 <= 0;
          else 
            full_3 <= p3_full_3;
    end


  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    stage_3;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    full_3;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module pcie_compiler_0_Tx_Interface_arbitrator (
                                                 // inputs:
                                                  DE4_SOPC_burst_2_downstream_address_to_slave,
                                                  DE4_SOPC_burst_2_downstream_arbitrationshare,
                                                  DE4_SOPC_burst_2_downstream_burstcount,
                                                  DE4_SOPC_burst_2_downstream_byteenable,
                                                  DE4_SOPC_burst_2_downstream_latency_counter,
                                                  DE4_SOPC_burst_2_downstream_read,
                                                  DE4_SOPC_burst_2_downstream_write,
                                                  DE4_SOPC_burst_2_downstream_writedata,
                                                  clk,
                                                  pcie_compiler_0_Tx_Interface_readdata,
                                                  pcie_compiler_0_Tx_Interface_readdatavalid,
                                                  pcie_compiler_0_Tx_Interface_waitrequest,
                                                  reset_n,

                                                 // outputs:
                                                  DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface,
                                                  DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface,
                                                  DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface,
                                                  DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register,
                                                  DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface,
                                                  d1_pcie_compiler_0_Tx_Interface_end_xfer,
                                                  pcie_compiler_0_Tx_Interface_address,
                                                  pcie_compiler_0_Tx_Interface_burstcount,
                                                  pcie_compiler_0_Tx_Interface_byteenable,
                                                  pcie_compiler_0_Tx_Interface_chipselect,
                                                  pcie_compiler_0_Tx_Interface_read,
                                                  pcie_compiler_0_Tx_Interface_readdata_from_sa,
                                                  pcie_compiler_0_Tx_Interface_waitrequest_from_sa,
                                                  pcie_compiler_0_Tx_Interface_write,
                                                  pcie_compiler_0_Tx_Interface_writedata
                                               )
;

  output           DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface;
  output           DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface;
  output           DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface;
  output           DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register;
  output           DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface;
  output           d1_pcie_compiler_0_Tx_Interface_end_xfer;
  output  [ 21: 0] pcie_compiler_0_Tx_Interface_address;
  output  [  9: 0] pcie_compiler_0_Tx_Interface_burstcount;
  output  [  7: 0] pcie_compiler_0_Tx_Interface_byteenable;
  output           pcie_compiler_0_Tx_Interface_chipselect;
  output           pcie_compiler_0_Tx_Interface_read;
  output  [ 63: 0] pcie_compiler_0_Tx_Interface_readdata_from_sa;
  output           pcie_compiler_0_Tx_Interface_waitrequest_from_sa;
  output           pcie_compiler_0_Tx_Interface_write;
  output  [ 63: 0] pcie_compiler_0_Tx_Interface_writedata;
  input   [ 24: 0] DE4_SOPC_burst_2_downstream_address_to_slave;
  input   [  9: 0] DE4_SOPC_burst_2_downstream_arbitrationshare;
  input   [  9: 0] DE4_SOPC_burst_2_downstream_burstcount;
  input   [  7: 0] DE4_SOPC_burst_2_downstream_byteenable;
  input            DE4_SOPC_burst_2_downstream_latency_counter;
  input            DE4_SOPC_burst_2_downstream_read;
  input            DE4_SOPC_burst_2_downstream_write;
  input   [ 63: 0] DE4_SOPC_burst_2_downstream_writedata;
  input            clk;
  input   [ 63: 0] pcie_compiler_0_Tx_Interface_readdata;
  input            pcie_compiler_0_Tx_Interface_readdatavalid;
  input            pcie_compiler_0_Tx_Interface_waitrequest;
  input            reset_n;

  wire             DE4_SOPC_burst_2_downstream_arbiterlock;
  wire             DE4_SOPC_burst_2_downstream_arbiterlock2;
  wire             DE4_SOPC_burst_2_downstream_continuerequest;
  wire             DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_rdv_fifo_empty_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_rdv_fifo_output_from_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register;
  wire             DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_saved_grant_pcie_compiler_0_Tx_Interface;
  reg              d1_pcie_compiler_0_Tx_Interface_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             p0_pcie_compiler_0_Tx_Interface_load_fifo;
  wire    [ 21: 0] pcie_compiler_0_Tx_Interface_address;
  wire             pcie_compiler_0_Tx_Interface_allgrants;
  wire             pcie_compiler_0_Tx_Interface_allow_new_arb_cycle;
  wire             pcie_compiler_0_Tx_Interface_any_bursting_master_saved_grant;
  wire             pcie_compiler_0_Tx_Interface_any_continuerequest;
  wire             pcie_compiler_0_Tx_Interface_arb_counter_enable;
  reg     [  9: 0] pcie_compiler_0_Tx_Interface_arb_share_counter;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_arb_share_counter_next_value;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_arb_share_set_values;
  reg     [  8: 0] pcie_compiler_0_Tx_Interface_bbt_burstcounter;
  wire             pcie_compiler_0_Tx_Interface_beginbursttransfer_internal;
  wire             pcie_compiler_0_Tx_Interface_begins_xfer;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_burstcount;
  wire             pcie_compiler_0_Tx_Interface_burstcount_fifo_empty;
  wire    [  7: 0] pcie_compiler_0_Tx_Interface_byteenable;
  wire             pcie_compiler_0_Tx_Interface_chipselect;
  reg     [  9: 0] pcie_compiler_0_Tx_Interface_current_burst;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_current_burst_minus_one;
  wire             pcie_compiler_0_Tx_Interface_end_xfer;
  wire             pcie_compiler_0_Tx_Interface_firsttransfer;
  wire             pcie_compiler_0_Tx_Interface_grant_vector;
  wire             pcie_compiler_0_Tx_Interface_in_a_read_cycle;
  wire             pcie_compiler_0_Tx_Interface_in_a_write_cycle;
  reg              pcie_compiler_0_Tx_Interface_load_fifo;
  wire             pcie_compiler_0_Tx_Interface_master_qreq_vector;
  wire             pcie_compiler_0_Tx_Interface_move_on_to_next_transaction;
  wire    [  8: 0] pcie_compiler_0_Tx_Interface_next_bbt_burstcount;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_next_burst_count;
  wire             pcie_compiler_0_Tx_Interface_non_bursting_master_requests;
  wire             pcie_compiler_0_Tx_Interface_read;
  wire    [ 63: 0] pcie_compiler_0_Tx_Interface_readdata_from_sa;
  wire             pcie_compiler_0_Tx_Interface_readdatavalid_from_sa;
  reg              pcie_compiler_0_Tx_Interface_reg_firsttransfer;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_selected_burstcount;
  reg              pcie_compiler_0_Tx_Interface_slavearbiterlockenable;
  wire             pcie_compiler_0_Tx_Interface_slavearbiterlockenable2;
  wire             pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_transaction_burst_count;
  wire             pcie_compiler_0_Tx_Interface_unreg_firsttransfer;
  wire             pcie_compiler_0_Tx_Interface_waitrequest_from_sa;
  wire             pcie_compiler_0_Tx_Interface_waits_for_read;
  wire             pcie_compiler_0_Tx_Interface_waits_for_write;
  wire             pcie_compiler_0_Tx_Interface_write;
  wire    [ 63: 0] pcie_compiler_0_Tx_Interface_writedata;
  wire    [ 24: 0] shifted_address_to_pcie_compiler_0_Tx_Interface_from_DE4_SOPC_burst_2_downstream;
  wire             wait_for_pcie_compiler_0_Tx_Interface_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~pcie_compiler_0_Tx_Interface_end_xfer;
    end


  assign pcie_compiler_0_Tx_Interface_begins_xfer = ~d1_reasons_to_wait & ((DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface));
  //assign pcie_compiler_0_Tx_Interface_readdata_from_sa = pcie_compiler_0_Tx_Interface_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_readdata_from_sa = pcie_compiler_0_Tx_Interface_readdata;

  assign DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface = (1) & (DE4_SOPC_burst_2_downstream_read | DE4_SOPC_burst_2_downstream_write);
  //assign pcie_compiler_0_Tx_Interface_waitrequest_from_sa = pcie_compiler_0_Tx_Interface_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_waitrequest_from_sa = pcie_compiler_0_Tx_Interface_waitrequest;

  //assign pcie_compiler_0_Tx_Interface_readdatavalid_from_sa = pcie_compiler_0_Tx_Interface_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_readdatavalid_from_sa = pcie_compiler_0_Tx_Interface_readdatavalid;

  //pcie_compiler_0_Tx_Interface_arb_share_counter set values, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_arb_share_set_values = (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface)? DE4_SOPC_burst_2_downstream_arbitrationshare :
    1;

  //pcie_compiler_0_Tx_Interface_non_bursting_master_requests mux, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_non_bursting_master_requests = 0;

  //pcie_compiler_0_Tx_Interface_any_bursting_master_saved_grant mux, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_any_bursting_master_saved_grant = DE4_SOPC_burst_2_downstream_saved_grant_pcie_compiler_0_Tx_Interface;

  //pcie_compiler_0_Tx_Interface_arb_share_counter_next_value assignment, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_arb_share_counter_next_value = pcie_compiler_0_Tx_Interface_firsttransfer ? (pcie_compiler_0_Tx_Interface_arb_share_set_values - 1) : |pcie_compiler_0_Tx_Interface_arb_share_counter ? (pcie_compiler_0_Tx_Interface_arb_share_counter - 1) : 0;

  //pcie_compiler_0_Tx_Interface_allgrants all slave grants, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_allgrants = |pcie_compiler_0_Tx_Interface_grant_vector;

  //pcie_compiler_0_Tx_Interface_end_xfer assignment, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_end_xfer = ~(pcie_compiler_0_Tx_Interface_waits_for_read | pcie_compiler_0_Tx_Interface_waits_for_write);

  //end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface = pcie_compiler_0_Tx_Interface_end_xfer & (~pcie_compiler_0_Tx_Interface_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //pcie_compiler_0_Tx_Interface_arb_share_counter arbitration counter enable, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_arb_counter_enable = (end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface & pcie_compiler_0_Tx_Interface_allgrants) | (end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface & ~pcie_compiler_0_Tx_Interface_non_bursting_master_requests);

  //pcie_compiler_0_Tx_Interface_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Tx_Interface_arb_share_counter <= 0;
      else if (pcie_compiler_0_Tx_Interface_arb_counter_enable)
          pcie_compiler_0_Tx_Interface_arb_share_counter <= pcie_compiler_0_Tx_Interface_arb_share_counter_next_value;
    end


  //pcie_compiler_0_Tx_Interface_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Tx_Interface_slavearbiterlockenable <= 0;
      else if ((|pcie_compiler_0_Tx_Interface_master_qreq_vector & end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface) | (end_xfer_arb_share_counter_term_pcie_compiler_0_Tx_Interface & ~pcie_compiler_0_Tx_Interface_non_bursting_master_requests))
          pcie_compiler_0_Tx_Interface_slavearbiterlockenable <= |pcie_compiler_0_Tx_Interface_arb_share_counter_next_value;
    end


  //DE4_SOPC_burst_2/downstream pcie_compiler_0/Tx_Interface arbiterlock, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_arbiterlock = pcie_compiler_0_Tx_Interface_slavearbiterlockenable & DE4_SOPC_burst_2_downstream_continuerequest;

  //pcie_compiler_0_Tx_Interface_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_slavearbiterlockenable2 = |pcie_compiler_0_Tx_Interface_arb_share_counter_next_value;

  //DE4_SOPC_burst_2/downstream pcie_compiler_0/Tx_Interface arbiterlock2, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_arbiterlock2 = pcie_compiler_0_Tx_Interface_slavearbiterlockenable2 & DE4_SOPC_burst_2_downstream_continuerequest;

  //pcie_compiler_0_Tx_Interface_any_continuerequest at least one master continues requesting, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_any_continuerequest = 1;

  //DE4_SOPC_burst_2_downstream_continuerequest continued request, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_continuerequest = 1;

  assign DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface = DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface & ~((DE4_SOPC_burst_2_downstream_read & ((DE4_SOPC_burst_2_downstream_latency_counter != 0) | (1 < DE4_SOPC_burst_2_downstream_latency_counter))));
  //unique name for pcie_compiler_0_Tx_Interface_move_on_to_next_transaction, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_move_on_to_next_transaction = pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst & pcie_compiler_0_Tx_Interface_load_fifo;

  //the currently selected burstcount for pcie_compiler_0_Tx_Interface, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_selected_burstcount = (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface)? DE4_SOPC_burst_2_downstream_burstcount :
    1;

  //burstcount_fifo_for_pcie_compiler_0_Tx_Interface, which is an e_fifo_with_registered_outputs
  burstcount_fifo_for_pcie_compiler_0_Tx_Interface_module burstcount_fifo_for_pcie_compiler_0_Tx_Interface
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (pcie_compiler_0_Tx_Interface_selected_burstcount),
      .data_out             (pcie_compiler_0_Tx_Interface_transaction_burst_count),
      .empty                (pcie_compiler_0_Tx_Interface_burstcount_fifo_empty),
      .fifo_contains_ones_n (),
      .full                 (),
      .read                 (pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read & pcie_compiler_0_Tx_Interface_load_fifo & ~(pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst & pcie_compiler_0_Tx_Interface_burstcount_fifo_empty))
    );

  //pcie_compiler_0_Tx_Interface current burst minus one, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_current_burst_minus_one = pcie_compiler_0_Tx_Interface_current_burst - 1;

  //what to load in current_burst, for pcie_compiler_0_Tx_Interface, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_next_burst_count = (((in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read) & ~pcie_compiler_0_Tx_Interface_load_fifo))? pcie_compiler_0_Tx_Interface_selected_burstcount :
    ((in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read & pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst & pcie_compiler_0_Tx_Interface_burstcount_fifo_empty))? pcie_compiler_0_Tx_Interface_selected_burstcount :
    (pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst)? pcie_compiler_0_Tx_Interface_transaction_burst_count :
    pcie_compiler_0_Tx_Interface_current_burst_minus_one;

  //the current burst count for pcie_compiler_0_Tx_Interface, to be decremented, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Tx_Interface_current_burst <= 0;
      else if (pcie_compiler_0_Tx_Interface_readdatavalid_from_sa | (~pcie_compiler_0_Tx_Interface_load_fifo & (in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read)))
          pcie_compiler_0_Tx_Interface_current_burst <= pcie_compiler_0_Tx_Interface_next_burst_count;
    end


  //a 1 or burstcount fifo empty, to initialize the counter, which is an e_mux
  assign p0_pcie_compiler_0_Tx_Interface_load_fifo = (~pcie_compiler_0_Tx_Interface_load_fifo)? 1 :
    (((in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read) & pcie_compiler_0_Tx_Interface_load_fifo))? 1 :
    ~pcie_compiler_0_Tx_Interface_burstcount_fifo_empty;

  //whether to load directly to the counter or to the fifo, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Tx_Interface_load_fifo <= 0;
      else if ((in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read) & ~pcie_compiler_0_Tx_Interface_load_fifo | pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst)
          pcie_compiler_0_Tx_Interface_load_fifo <= p0_pcie_compiler_0_Tx_Interface_load_fifo;
    end


  //the last cycle in the burst for pcie_compiler_0_Tx_Interface, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_this_cycle_is_the_last_burst = ~(|pcie_compiler_0_Tx_Interface_current_burst_minus_one) & pcie_compiler_0_Tx_Interface_readdatavalid_from_sa;

  //rdv_fifo_for_DE4_SOPC_burst_2_downstream_to_pcie_compiler_0_Tx_Interface, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_DE4_SOPC_burst_2_downstream_to_pcie_compiler_0_Tx_Interface_module rdv_fifo_for_DE4_SOPC_burst_2_downstream_to_pcie_compiler_0_Tx_Interface
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface),
      .data_out             (DE4_SOPC_burst_2_downstream_rdv_fifo_output_from_pcie_compiler_0_Tx_Interface),
      .empty                (),
      .fifo_contains_ones_n (DE4_SOPC_burst_2_downstream_rdv_fifo_empty_pcie_compiler_0_Tx_Interface),
      .full                 (),
      .read                 (pcie_compiler_0_Tx_Interface_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~pcie_compiler_0_Tx_Interface_waits_for_read)
    );

  assign DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register = ~DE4_SOPC_burst_2_downstream_rdv_fifo_empty_pcie_compiler_0_Tx_Interface;
  //local readdatavalid DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface, which is an e_mux
  assign DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface = pcie_compiler_0_Tx_Interface_readdatavalid_from_sa;

  //pcie_compiler_0_Tx_Interface_writedata mux, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_writedata = DE4_SOPC_burst_2_downstream_writedata;

  //master is always granted when requested
  assign DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface = DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface;

  //DE4_SOPC_burst_2/downstream saved-grant pcie_compiler_0/Tx_Interface, which is an e_assign
  assign DE4_SOPC_burst_2_downstream_saved_grant_pcie_compiler_0_Tx_Interface = DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface;

  //allow new arb cycle for pcie_compiler_0/Tx_Interface, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign pcie_compiler_0_Tx_Interface_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign pcie_compiler_0_Tx_Interface_master_qreq_vector = 1;

  assign pcie_compiler_0_Tx_Interface_chipselect = DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface;
  //pcie_compiler_0_Tx_Interface_firsttransfer first transaction, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_firsttransfer = pcie_compiler_0_Tx_Interface_begins_xfer ? pcie_compiler_0_Tx_Interface_unreg_firsttransfer : pcie_compiler_0_Tx_Interface_reg_firsttransfer;

  //pcie_compiler_0_Tx_Interface_unreg_firsttransfer first transaction, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_unreg_firsttransfer = ~(pcie_compiler_0_Tx_Interface_slavearbiterlockenable & pcie_compiler_0_Tx_Interface_any_continuerequest);

  //pcie_compiler_0_Tx_Interface_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Tx_Interface_reg_firsttransfer <= 1'b1;
      else if (pcie_compiler_0_Tx_Interface_begins_xfer)
          pcie_compiler_0_Tx_Interface_reg_firsttransfer <= pcie_compiler_0_Tx_Interface_unreg_firsttransfer;
    end


  //pcie_compiler_0_Tx_Interface_next_bbt_burstcount next_bbt_burstcount, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_next_bbt_burstcount = ((((pcie_compiler_0_Tx_Interface_write) && (pcie_compiler_0_Tx_Interface_bbt_burstcounter == 0))))? (pcie_compiler_0_Tx_Interface_burstcount - 1) :
    ((((pcie_compiler_0_Tx_Interface_read) && (pcie_compiler_0_Tx_Interface_bbt_burstcounter == 0))))? 0 :
    (pcie_compiler_0_Tx_Interface_bbt_burstcounter - 1);

  //pcie_compiler_0_Tx_Interface_bbt_burstcounter bbt_burstcounter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Tx_Interface_bbt_burstcounter <= 0;
      else if (pcie_compiler_0_Tx_Interface_begins_xfer)
          pcie_compiler_0_Tx_Interface_bbt_burstcounter <= pcie_compiler_0_Tx_Interface_next_bbt_burstcount;
    end


  //pcie_compiler_0_Tx_Interface_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_beginbursttransfer_internal = pcie_compiler_0_Tx_Interface_begins_xfer & (pcie_compiler_0_Tx_Interface_bbt_burstcounter == 0);

  //pcie_compiler_0_Tx_Interface_read assignment, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_read = DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface & DE4_SOPC_burst_2_downstream_read;

  //pcie_compiler_0_Tx_Interface_write assignment, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_write = DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface & DE4_SOPC_burst_2_downstream_write;

  assign shifted_address_to_pcie_compiler_0_Tx_Interface_from_DE4_SOPC_burst_2_downstream = DE4_SOPC_burst_2_downstream_address_to_slave;
  //pcie_compiler_0_Tx_Interface_address mux, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_address = shifted_address_to_pcie_compiler_0_Tx_Interface_from_DE4_SOPC_burst_2_downstream >> 3;

  //d1_pcie_compiler_0_Tx_Interface_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_pcie_compiler_0_Tx_Interface_end_xfer <= 1;
      else 
        d1_pcie_compiler_0_Tx_Interface_end_xfer <= pcie_compiler_0_Tx_Interface_end_xfer;
    end


  //pcie_compiler_0_Tx_Interface_waits_for_read in a cycle, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_waits_for_read = pcie_compiler_0_Tx_Interface_in_a_read_cycle & pcie_compiler_0_Tx_Interface_waitrequest_from_sa;

  //pcie_compiler_0_Tx_Interface_in_a_read_cycle assignment, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_in_a_read_cycle = DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface & DE4_SOPC_burst_2_downstream_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = pcie_compiler_0_Tx_Interface_in_a_read_cycle;

  //pcie_compiler_0_Tx_Interface_waits_for_write in a cycle, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_waits_for_write = pcie_compiler_0_Tx_Interface_in_a_write_cycle & pcie_compiler_0_Tx_Interface_waitrequest_from_sa;

  //pcie_compiler_0_Tx_Interface_in_a_write_cycle assignment, which is an e_assign
  assign pcie_compiler_0_Tx_Interface_in_a_write_cycle = DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface & DE4_SOPC_burst_2_downstream_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = pcie_compiler_0_Tx_Interface_in_a_write_cycle;

  assign wait_for_pcie_compiler_0_Tx_Interface_counter = 0;
  //pcie_compiler_0_Tx_Interface_byteenable byte enable port mux, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_byteenable = (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface)? DE4_SOPC_burst_2_downstream_byteenable :
    -1;

  //burstcount mux, which is an e_mux
  assign pcie_compiler_0_Tx_Interface_burstcount = (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface)? DE4_SOPC_burst_2_downstream_burstcount :
    1;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //pcie_compiler_0/Tx_Interface enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //DE4_SOPC_burst_2/downstream non-zero arbitrationshare assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface && (DE4_SOPC_burst_2_downstream_arbitrationshare == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_2/downstream drove 0 on its 'arbitrationshare' port while accessing slave pcie_compiler_0/Tx_Interface", $time);
          $stop;
        end
    end


  //DE4_SOPC_burst_2/downstream non-zero burstcount assertion, which is an e_process
  always @(posedge clk)
    begin
      if (DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface && (DE4_SOPC_burst_2_downstream_burstcount == 0) && enable_nonzero_assertions)
        begin
          $write("%0d ns: DE4_SOPC_burst_2/downstream drove 0 on its 'burstcount' port while accessing slave pcie_compiler_0/Tx_Interface", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module pcie_compiler_0_Rx_Interface_arbitrator (
                                                 // inputs:
                                                  DE4_SOPC_burst_0_upstream_readdata_from_sa,
                                                  DE4_SOPC_burst_0_upstream_waitrequest_from_sa,
                                                  DE4_SOPC_burst_1_upstream_readdata_from_sa,
                                                  DE4_SOPC_burst_1_upstream_waitrequest_from_sa,
                                                  DE4_SOPC_burst_3_upstream_readdata_from_sa,
                                                  DE4_SOPC_burst_3_upstream_waitrequest_from_sa,
                                                  clk,
                                                  d1_DE4_SOPC_burst_0_upstream_end_xfer,
                                                  d1_DE4_SOPC_burst_1_upstream_end_xfer,
                                                  d1_DE4_SOPC_burst_3_upstream_end_xfer,
                                                  pcie_compiler_0_Rx_Interface_address,
                                                  pcie_compiler_0_Rx_Interface_burstcount,
                                                  pcie_compiler_0_Rx_Interface_byteenable,
                                                  pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream,
                                                  pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream,
                                                  pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream,
                                                  pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream,
                                                  pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream,
                                                  pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream,
                                                  pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream,
                                                  pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream,
                                                  pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream,
                                                  pcie_compiler_0_Rx_Interface_read,
                                                  pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream,
                                                  pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register,
                                                  pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream,
                                                  pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register,
                                                  pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream,
                                                  pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register,
                                                  pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream,
                                                  pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream,
                                                  pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream,
                                                  pcie_compiler_0_Rx_Interface_write,
                                                  pcie_compiler_0_Rx_Interface_writedata,
                                                  reset_n,

                                                 // outputs:
                                                  pcie_compiler_0_Rx_Interface_address_to_slave,
                                                  pcie_compiler_0_Rx_Interface_dbs_address,
                                                  pcie_compiler_0_Rx_Interface_dbs_write_32,
                                                  pcie_compiler_0_Rx_Interface_latency_counter,
                                                  pcie_compiler_0_Rx_Interface_readdata,
                                                  pcie_compiler_0_Rx_Interface_readdatavalid,
                                                  pcie_compiler_0_Rx_Interface_reset_n,
                                                  pcie_compiler_0_Rx_Interface_waitrequest
                                               )
;

  output  [ 31: 0] pcie_compiler_0_Rx_Interface_address_to_slave;
  output  [  2: 0] pcie_compiler_0_Rx_Interface_dbs_address;
  output  [ 31: 0] pcie_compiler_0_Rx_Interface_dbs_write_32;
  output           pcie_compiler_0_Rx_Interface_latency_counter;
  output  [ 63: 0] pcie_compiler_0_Rx_Interface_readdata;
  output           pcie_compiler_0_Rx_Interface_readdatavalid;
  output           pcie_compiler_0_Rx_Interface_reset_n;
  output           pcie_compiler_0_Rx_Interface_waitrequest;
  input   [ 31: 0] DE4_SOPC_burst_0_upstream_readdata_from_sa;
  input            DE4_SOPC_burst_0_upstream_waitrequest_from_sa;
  input   [ 31: 0] DE4_SOPC_burst_1_upstream_readdata_from_sa;
  input            DE4_SOPC_burst_1_upstream_waitrequest_from_sa;
  input   [ 31: 0] DE4_SOPC_burst_3_upstream_readdata_from_sa;
  input            DE4_SOPC_burst_3_upstream_waitrequest_from_sa;
  input            clk;
  input            d1_DE4_SOPC_burst_0_upstream_end_xfer;
  input            d1_DE4_SOPC_burst_1_upstream_end_xfer;
  input            d1_DE4_SOPC_burst_3_upstream_end_xfer;
  input   [ 31: 0] pcie_compiler_0_Rx_Interface_address;
  input   [  9: 0] pcie_compiler_0_Rx_Interface_burstcount;
  input   [  7: 0] pcie_compiler_0_Rx_Interface_byteenable;
  input   [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream;
  input   [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream;
  input   [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream;
  input            pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream;
  input            pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream;
  input            pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream;
  input            pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream;
  input            pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream;
  input            pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream;
  input            pcie_compiler_0_Rx_Interface_read;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream;
  input            pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register;
  input            pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream;
  input            pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream;
  input            pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream;
  input            pcie_compiler_0_Rx_Interface_write;
  input   [ 63: 0] pcie_compiler_0_Rx_Interface_writedata;
  input            reset_n;

  reg              active_and_waiting_last_time;
  wire             dbs_count_enable;
  wire             dbs_counter_overflow;
  reg     [ 31: 0] dbs_latent_32_reg_segment_0;
  wire             dbs_rdv_count_enable;
  wire             dbs_rdv_counter_overflow;
  wire             latency_load_value;
  wire    [  2: 0] next_dbs_address;
  wire    [ 31: 0] p1_dbs_latent_32_reg_segment_0;
  wire             p1_pcie_compiler_0_Rx_Interface_latency_counter;
  reg     [ 31: 0] pcie_compiler_0_Rx_Interface_address_last_time;
  wire    [ 31: 0] pcie_compiler_0_Rx_Interface_address_to_slave;
  reg     [  9: 0] pcie_compiler_0_Rx_Interface_burstcount_last_time;
  reg     [  7: 0] pcie_compiler_0_Rx_Interface_byteenable_last_time;
  reg     [  2: 0] pcie_compiler_0_Rx_Interface_dbs_address;
  wire    [  2: 0] pcie_compiler_0_Rx_Interface_dbs_increment;
  reg     [  2: 0] pcie_compiler_0_Rx_Interface_dbs_rdv_counter;
  wire    [  2: 0] pcie_compiler_0_Rx_Interface_dbs_rdv_counter_inc;
  wire    [ 31: 0] pcie_compiler_0_Rx_Interface_dbs_write_32;
  wire             pcie_compiler_0_Rx_Interface_is_granted_some_slave;
  reg              pcie_compiler_0_Rx_Interface_latency_counter;
  wire    [  2: 0] pcie_compiler_0_Rx_Interface_next_dbs_rdv_counter;
  reg              pcie_compiler_0_Rx_Interface_read_but_no_slave_selected;
  reg              pcie_compiler_0_Rx_Interface_read_last_time;
  wire    [ 63: 0] pcie_compiler_0_Rx_Interface_readdata;
  wire             pcie_compiler_0_Rx_Interface_readdatavalid;
  wire             pcie_compiler_0_Rx_Interface_reset_n;
  wire             pcie_compiler_0_Rx_Interface_run;
  wire             pcie_compiler_0_Rx_Interface_waitrequest;
  reg              pcie_compiler_0_Rx_Interface_write_last_time;
  reg     [ 63: 0] pcie_compiler_0_Rx_Interface_writedata_last_time;
  wire             pre_dbs_count_enable;
  wire             pre_flush_pcie_compiler_0_Rx_Interface_readdatavalid;
  wire             r_0;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream | ~pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream) & ((~pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream | ~pcie_compiler_0_Rx_Interface_read | (1 & ~DE4_SOPC_burst_0_upstream_waitrequest_from_sa & pcie_compiler_0_Rx_Interface_read))) & ((~pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream | ~pcie_compiler_0_Rx_Interface_write | (1 & ~DE4_SOPC_burst_0_upstream_waitrequest_from_sa & (pcie_compiler_0_Rx_Interface_dbs_address[2]) & pcie_compiler_0_Rx_Interface_write))) & 1 & (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream | ~pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream) & ((~pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream | ~pcie_compiler_0_Rx_Interface_read | (1 & ~DE4_SOPC_burst_1_upstream_waitrequest_from_sa & pcie_compiler_0_Rx_Interface_read))) & ((~pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream | ~pcie_compiler_0_Rx_Interface_write | (1 & ~DE4_SOPC_burst_1_upstream_waitrequest_from_sa & (pcie_compiler_0_Rx_Interface_dbs_address[2]) & pcie_compiler_0_Rx_Interface_write))) & 1 & (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream | ~pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream) & ((~pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream | ~pcie_compiler_0_Rx_Interface_read | (1 & ~DE4_SOPC_burst_3_upstream_waitrequest_from_sa & pcie_compiler_0_Rx_Interface_read))) & ((~pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream | ~pcie_compiler_0_Rx_Interface_write | (1 & ~DE4_SOPC_burst_3_upstream_waitrequest_from_sa & (pcie_compiler_0_Rx_Interface_dbs_address[2]) & pcie_compiler_0_Rx_Interface_write)));

  //cascaded wait assignment, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_run = r_0;

  //optimize select-logic by passing only those address bits which matter.
  assign pcie_compiler_0_Rx_Interface_address_to_slave = {pcie_compiler_0_Rx_Interface_address[31],
    1'b0,
    pcie_compiler_0_Rx_Interface_address[29 : 0]};

  //pcie_compiler_0_Rx_Interface_read_but_no_slave_selected assignment, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_read_but_no_slave_selected <= 0;
      else 
        pcie_compiler_0_Rx_Interface_read_but_no_slave_selected <= pcie_compiler_0_Rx_Interface_read & pcie_compiler_0_Rx_Interface_run & ~pcie_compiler_0_Rx_Interface_is_granted_some_slave;
    end


  //some slave is getting selected, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_is_granted_some_slave = pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream |
    pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream |
    pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_pcie_compiler_0_Rx_Interface_readdatavalid = (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream & dbs_rdv_counter_overflow) |
    (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream & dbs_rdv_counter_overflow) |
    (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream & dbs_rdv_counter_overflow);

  //latent slave read data valid which is not flushed, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_readdatavalid = pcie_compiler_0_Rx_Interface_read_but_no_slave_selected |
    pre_flush_pcie_compiler_0_Rx_Interface_readdatavalid |
    pcie_compiler_0_Rx_Interface_read_but_no_slave_selected |
    pre_flush_pcie_compiler_0_Rx_Interface_readdatavalid |
    pcie_compiler_0_Rx_Interface_read_but_no_slave_selected |
    pre_flush_pcie_compiler_0_Rx_Interface_readdatavalid;

  //input to latent dbs-32 stored 0, which is an e_mux
  assign p1_dbs_latent_32_reg_segment_0 = (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream)? DE4_SOPC_burst_0_upstream_readdata_from_sa :
    (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream)? DE4_SOPC_burst_1_upstream_readdata_from_sa :
    DE4_SOPC_burst_3_upstream_readdata_from_sa;

  //dbs register for latent dbs-32 segment 0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          dbs_latent_32_reg_segment_0 <= 0;
      else if (dbs_rdv_count_enable & ((pcie_compiler_0_Rx_Interface_dbs_rdv_counter[2]) == 0))
          dbs_latent_32_reg_segment_0 <= p1_dbs_latent_32_reg_segment_0;
    end


  //pcie_compiler_0/Rx_Interface readdata mux, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_readdata = ({64 {~pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream}} | {DE4_SOPC_burst_0_upstream_readdata_from_sa[31 : 0],
    dbs_latent_32_reg_segment_0}) &
    ({64 {~pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream}} | {DE4_SOPC_burst_1_upstream_readdata_from_sa[31 : 0],
    dbs_latent_32_reg_segment_0}) &
    ({64 {~pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream}} | {DE4_SOPC_burst_3_upstream_readdata_from_sa[31 : 0],
    dbs_latent_32_reg_segment_0});

  //mux write dbs 1, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_dbs_write_32 = (pcie_compiler_0_Rx_Interface_dbs_address[2])? pcie_compiler_0_Rx_Interface_writedata[63 : 32] :
    (~(pcie_compiler_0_Rx_Interface_dbs_address[2]))? pcie_compiler_0_Rx_Interface_writedata[31 : 0] :
    (pcie_compiler_0_Rx_Interface_dbs_address[2])? pcie_compiler_0_Rx_Interface_writedata[63 : 32] :
    (~(pcie_compiler_0_Rx_Interface_dbs_address[2]))? pcie_compiler_0_Rx_Interface_writedata[31 : 0] :
    (pcie_compiler_0_Rx_Interface_dbs_address[2])? pcie_compiler_0_Rx_Interface_writedata[63 : 32] :
    pcie_compiler_0_Rx_Interface_writedata[31 : 0];

  //actual waitrequest port, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_waitrequest = ~pcie_compiler_0_Rx_Interface_run;

  //latent max counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_latency_counter <= 0;
      else 
        pcie_compiler_0_Rx_Interface_latency_counter <= p1_pcie_compiler_0_Rx_Interface_latency_counter;
    end


  //latency counter load mux, which is an e_mux
  assign p1_pcie_compiler_0_Rx_Interface_latency_counter = ((pcie_compiler_0_Rx_Interface_run & pcie_compiler_0_Rx_Interface_read))? latency_load_value :
    (pcie_compiler_0_Rx_Interface_latency_counter)? pcie_compiler_0_Rx_Interface_latency_counter - 1 :
    0;

  //read latency load values, which is an e_mux
  assign latency_load_value = 0;

  //pcie_compiler_0_Rx_Interface_reset_n assignment, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_reset_n = reset_n;

  //dbs count increment, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_dbs_increment = (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream)? 4 :
    (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream)? 4 :
    (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream)? 4 :
    0;

  //dbs counter overflow, which is an e_assign
  assign dbs_counter_overflow = pcie_compiler_0_Rx_Interface_dbs_address[2] & !(next_dbs_address[2]);

  //next master address, which is an e_assign
  assign next_dbs_address = pcie_compiler_0_Rx_Interface_dbs_address + pcie_compiler_0_Rx_Interface_dbs_increment;

  //dbs count enable, which is an e_mux
  assign dbs_count_enable = pre_dbs_count_enable;

  //dbs counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_dbs_address <= 0;
      else if (dbs_count_enable)
          pcie_compiler_0_Rx_Interface_dbs_address <= next_dbs_address;
    end


  //p1 dbs rdv counter, which is an e_assign
  assign pcie_compiler_0_Rx_Interface_next_dbs_rdv_counter = pcie_compiler_0_Rx_Interface_dbs_rdv_counter + pcie_compiler_0_Rx_Interface_dbs_rdv_counter_inc;

  //pcie_compiler_0_Rx_Interface_rdv_inc_mux, which is an e_mux
  assign pcie_compiler_0_Rx_Interface_dbs_rdv_counter_inc = (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream)? 4 :
    (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream)? 4 :
    4;

  //master any slave rdv, which is an e_mux
  assign dbs_rdv_count_enable = pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream |
    pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream |
    pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream;

  //dbs rdv counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_dbs_rdv_counter <= 0;
      else if (dbs_rdv_count_enable)
          pcie_compiler_0_Rx_Interface_dbs_rdv_counter <= pcie_compiler_0_Rx_Interface_next_dbs_rdv_counter;
    end


  //dbs rdv counter overflow, which is an e_assign
  assign dbs_rdv_counter_overflow = pcie_compiler_0_Rx_Interface_dbs_rdv_counter[2] & ~pcie_compiler_0_Rx_Interface_next_dbs_rdv_counter[2];

  //pre dbs count enable, which is an e_mux
  assign pre_dbs_count_enable = (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream & pcie_compiler_0_Rx_Interface_read & 0 & 1 & ~DE4_SOPC_burst_0_upstream_waitrequest_from_sa) |
    (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream & pcie_compiler_0_Rx_Interface_write & 1 & 1 & ~DE4_SOPC_burst_0_upstream_waitrequest_from_sa) |
    (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream & pcie_compiler_0_Rx_Interface_read & 0 & 1 & ~DE4_SOPC_burst_1_upstream_waitrequest_from_sa) |
    (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream & pcie_compiler_0_Rx_Interface_write & 1 & 1 & ~DE4_SOPC_burst_1_upstream_waitrequest_from_sa) |
    (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream & pcie_compiler_0_Rx_Interface_read & 0 & 1 & ~DE4_SOPC_burst_3_upstream_waitrequest_from_sa) |
    (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream & pcie_compiler_0_Rx_Interface_write & 1 & 1 & ~DE4_SOPC_burst_3_upstream_waitrequest_from_sa);


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //pcie_compiler_0_Rx_Interface_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_address_last_time <= 0;
      else 
        pcie_compiler_0_Rx_Interface_address_last_time <= pcie_compiler_0_Rx_Interface_address;
    end


  //pcie_compiler_0/Rx_Interface waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= pcie_compiler_0_Rx_Interface_waitrequest & (pcie_compiler_0_Rx_Interface_read | pcie_compiler_0_Rx_Interface_write);
    end


  //pcie_compiler_0_Rx_Interface_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (pcie_compiler_0_Rx_Interface_address != pcie_compiler_0_Rx_Interface_address_last_time))
        begin
          $write("%0d ns: pcie_compiler_0_Rx_Interface_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //pcie_compiler_0_Rx_Interface_burstcount check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_burstcount_last_time <= 0;
      else 
        pcie_compiler_0_Rx_Interface_burstcount_last_time <= pcie_compiler_0_Rx_Interface_burstcount;
    end


  //pcie_compiler_0_Rx_Interface_burstcount matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (pcie_compiler_0_Rx_Interface_burstcount != pcie_compiler_0_Rx_Interface_burstcount_last_time))
        begin
          $write("%0d ns: pcie_compiler_0_Rx_Interface_burstcount did not heed wait!!!", $time);
          $stop;
        end
    end


  //pcie_compiler_0_Rx_Interface_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_byteenable_last_time <= 0;
      else 
        pcie_compiler_0_Rx_Interface_byteenable_last_time <= pcie_compiler_0_Rx_Interface_byteenable;
    end


  //pcie_compiler_0_Rx_Interface_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (pcie_compiler_0_Rx_Interface_byteenable != pcie_compiler_0_Rx_Interface_byteenable_last_time))
        begin
          $write("%0d ns: pcie_compiler_0_Rx_Interface_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //pcie_compiler_0_Rx_Interface_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_read_last_time <= 0;
      else 
        pcie_compiler_0_Rx_Interface_read_last_time <= pcie_compiler_0_Rx_Interface_read;
    end


  //pcie_compiler_0_Rx_Interface_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (pcie_compiler_0_Rx_Interface_read != pcie_compiler_0_Rx_Interface_read_last_time))
        begin
          $write("%0d ns: pcie_compiler_0_Rx_Interface_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //pcie_compiler_0_Rx_Interface_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_write_last_time <= 0;
      else 
        pcie_compiler_0_Rx_Interface_write_last_time <= pcie_compiler_0_Rx_Interface_write;
    end


  //pcie_compiler_0_Rx_Interface_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (pcie_compiler_0_Rx_Interface_write != pcie_compiler_0_Rx_Interface_write_last_time))
        begin
          $write("%0d ns: pcie_compiler_0_Rx_Interface_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //pcie_compiler_0_Rx_Interface_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pcie_compiler_0_Rx_Interface_writedata_last_time <= 0;
      else 
        pcie_compiler_0_Rx_Interface_writedata_last_time <= pcie_compiler_0_Rx_Interface_writedata;
    end


  //pcie_compiler_0_Rx_Interface_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (pcie_compiler_0_Rx_Interface_writedata != pcie_compiler_0_Rx_Interface_writedata_last_time) & pcie_compiler_0_Rx_Interface_write)
        begin
          $write("%0d ns: pcie_compiler_0_Rx_Interface_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module rdv_fifo_for_master_0_master_to_peripheral_clock_crossing_s1_module (
                                                                             // inputs:
                                                                              clear_fifo,
                                                                              clk,
                                                                              data_in,
                                                                              read,
                                                                              reset_n,
                                                                              sync_reset,
                                                                              write,

                                                                             // outputs:
                                                                              data_out,
                                                                              empty,
                                                                              fifo_contains_ones_n,
                                                                              full
                                                                           )
;

  output           data_out;
  output           empty;
  output           fifo_contains_ones_n;
  output           full;
  input            clear_fifo;
  input            clk;
  input            data_in;
  input            read;
  input            reset_n;
  input            sync_reset;
  input            write;

  wire             data_out;
  wire             empty;
  reg              fifo_contains_ones_n;
  wire             full;
  reg              full_0;
  reg              full_1;
  reg              full_10;
  reg              full_11;
  reg              full_12;
  reg              full_13;
  reg              full_14;
  reg              full_15;
  reg              full_16;
  reg              full_17;
  reg              full_18;
  reg              full_19;
  reg              full_2;
  reg              full_20;
  reg              full_21;
  reg              full_22;
  reg              full_23;
  reg              full_24;
  reg              full_25;
  reg              full_26;
  reg              full_27;
  reg              full_28;
  reg              full_29;
  reg              full_3;
  reg              full_30;
  reg              full_31;
  wire             full_32;
  reg              full_4;
  reg              full_5;
  reg              full_6;
  reg              full_7;
  reg              full_8;
  reg              full_9;
  reg     [  6: 0] how_many_ones;
  wire    [  6: 0] one_count_minus_one;
  wire    [  6: 0] one_count_plus_one;
  wire             p0_full_0;
  wire             p0_stage_0;
  wire             p10_full_10;
  wire             p10_stage_10;
  wire             p11_full_11;
  wire             p11_stage_11;
  wire             p12_full_12;
  wire             p12_stage_12;
  wire             p13_full_13;
  wire             p13_stage_13;
  wire             p14_full_14;
  wire             p14_stage_14;
  wire             p15_full_15;
  wire             p15_stage_15;
  wire             p16_full_16;
  wire             p16_stage_16;
  wire             p17_full_17;
  wire             p17_stage_17;
  wire             p18_full_18;
  wire             p18_stage_18;
  wire             p19_full_19;
  wire             p19_stage_19;
  wire             p1_full_1;
  wire             p1_stage_1;
  wire             p20_full_20;
  wire             p20_stage_20;
  wire             p21_full_21;
  wire             p21_stage_21;
  wire             p22_full_22;
  wire             p22_stage_22;
  wire             p23_full_23;
  wire             p23_stage_23;
  wire             p24_full_24;
  wire             p24_stage_24;
  wire             p25_full_25;
  wire             p25_stage_25;
  wire             p26_full_26;
  wire             p26_stage_26;
  wire             p27_full_27;
  wire             p27_stage_27;
  wire             p28_full_28;
  wire             p28_stage_28;
  wire             p29_full_29;
  wire             p29_stage_29;
  wire             p2_full_2;
  wire             p2_stage_2;
  wire             p30_full_30;
  wire             p30_stage_30;
  wire             p31_full_31;
  wire             p31_stage_31;
  wire             p3_full_3;
  wire             p3_stage_3;
  wire             p4_full_4;
  wire             p4_stage_4;
  wire             p5_full_5;
  wire             p5_stage_5;
  wire             p6_full_6;
  wire             p6_stage_6;
  wire             p7_full_7;
  wire             p7_stage_7;
  wire             p8_full_8;
  wire             p8_stage_8;
  wire             p9_full_9;
  wire             p9_stage_9;
  reg              stage_0;
  reg              stage_1;
  reg              stage_10;
  reg              stage_11;
  reg              stage_12;
  reg              stage_13;
  reg              stage_14;
  reg              stage_15;
  reg              stage_16;
  reg              stage_17;
  reg              stage_18;
  reg              stage_19;
  reg              stage_2;
  reg              stage_20;
  reg              stage_21;
  reg              stage_22;
  reg              stage_23;
  reg              stage_24;
  reg              stage_25;
  reg              stage_26;
  reg              stage_27;
  reg              stage_28;
  reg              stage_29;
  reg              stage_3;
  reg              stage_30;
  reg              stage_31;
  reg              stage_4;
  reg              stage_5;
  reg              stage_6;
  reg              stage_7;
  reg              stage_8;
  reg              stage_9;
  wire    [  6: 0] updated_one_count;
  assign data_out = stage_0;
  assign full = full_31;
  assign empty = !full_0;
  assign full_32 = 0;
  //data_31, which is an e_mux
  assign p31_stage_31 = ((full_32 & ~clear_fifo) == 0)? data_in :
    data_in;

  //data_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_31 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_31))
          if (sync_reset & full_31 & !((full_32 == 0) & read & write))
              stage_31 <= 0;
          else 
            stage_31 <= p31_stage_31;
    end


  //control_31, which is an e_mux
  assign p31_full_31 = ((read & !write) == 0)? full_30 :
    0;

  //control_reg_31, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_31 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_31 <= 0;
          else 
            full_31 <= p31_full_31;
    end


  //data_30, which is an e_mux
  assign p30_stage_30 = ((full_31 & ~clear_fifo) == 0)? data_in :
    stage_31;

  //data_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_30 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_30))
          if (sync_reset & full_30 & !((full_31 == 0) & read & write))
              stage_30 <= 0;
          else 
            stage_30 <= p30_stage_30;
    end


  //control_30, which is an e_mux
  assign p30_full_30 = ((read & !write) == 0)? full_29 :
    full_31;

  //control_reg_30, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_30 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_30 <= 0;
          else 
            full_30 <= p30_full_30;
    end


  //data_29, which is an e_mux
  assign p29_stage_29 = ((full_30 & ~clear_fifo) == 0)? data_in :
    stage_30;

  //data_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_29 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_29))
          if (sync_reset & full_29 & !((full_30 == 0) & read & write))
              stage_29 <= 0;
          else 
            stage_29 <= p29_stage_29;
    end


  //control_29, which is an e_mux
  assign p29_full_29 = ((read & !write) == 0)? full_28 :
    full_30;

  //control_reg_29, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_29 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_29 <= 0;
          else 
            full_29 <= p29_full_29;
    end


  //data_28, which is an e_mux
  assign p28_stage_28 = ((full_29 & ~clear_fifo) == 0)? data_in :
    stage_29;

  //data_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_28 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_28))
          if (sync_reset & full_28 & !((full_29 == 0) & read & write))
              stage_28 <= 0;
          else 
            stage_28 <= p28_stage_28;
    end


  //control_28, which is an e_mux
  assign p28_full_28 = ((read & !write) == 0)? full_27 :
    full_29;

  //control_reg_28, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_28 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_28 <= 0;
          else 
            full_28 <= p28_full_28;
    end


  //data_27, which is an e_mux
  assign p27_stage_27 = ((full_28 & ~clear_fifo) == 0)? data_in :
    stage_28;

  //data_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_27 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_27))
          if (sync_reset & full_27 & !((full_28 == 0) & read & write))
              stage_27 <= 0;
          else 
            stage_27 <= p27_stage_27;
    end


  //control_27, which is an e_mux
  assign p27_full_27 = ((read & !write) == 0)? full_26 :
    full_28;

  //control_reg_27, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_27 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_27 <= 0;
          else 
            full_27 <= p27_full_27;
    end


  //data_26, which is an e_mux
  assign p26_stage_26 = ((full_27 & ~clear_fifo) == 0)? data_in :
    stage_27;

  //data_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_26 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_26))
          if (sync_reset & full_26 & !((full_27 == 0) & read & write))
              stage_26 <= 0;
          else 
            stage_26 <= p26_stage_26;
    end


  //control_26, which is an e_mux
  assign p26_full_26 = ((read & !write) == 0)? full_25 :
    full_27;

  //control_reg_26, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_26 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_26 <= 0;
          else 
            full_26 <= p26_full_26;
    end


  //data_25, which is an e_mux
  assign p25_stage_25 = ((full_26 & ~clear_fifo) == 0)? data_in :
    stage_26;

  //data_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_25 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_25))
          if (sync_reset & full_25 & !((full_26 == 0) & read & write))
              stage_25 <= 0;
          else 
            stage_25 <= p25_stage_25;
    end


  //control_25, which is an e_mux
  assign p25_full_25 = ((read & !write) == 0)? full_24 :
    full_26;

  //control_reg_25, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_25 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_25 <= 0;
          else 
            full_25 <= p25_full_25;
    end


  //data_24, which is an e_mux
  assign p24_stage_24 = ((full_25 & ~clear_fifo) == 0)? data_in :
    stage_25;

  //data_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_24 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_24))
          if (sync_reset & full_24 & !((full_25 == 0) & read & write))
              stage_24 <= 0;
          else 
            stage_24 <= p24_stage_24;
    end


  //control_24, which is an e_mux
  assign p24_full_24 = ((read & !write) == 0)? full_23 :
    full_25;

  //control_reg_24, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_24 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_24 <= 0;
          else 
            full_24 <= p24_full_24;
    end


  //data_23, which is an e_mux
  assign p23_stage_23 = ((full_24 & ~clear_fifo) == 0)? data_in :
    stage_24;

  //data_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_23 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_23))
          if (sync_reset & full_23 & !((full_24 == 0) & read & write))
              stage_23 <= 0;
          else 
            stage_23 <= p23_stage_23;
    end


  //control_23, which is an e_mux
  assign p23_full_23 = ((read & !write) == 0)? full_22 :
    full_24;

  //control_reg_23, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_23 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_23 <= 0;
          else 
            full_23 <= p23_full_23;
    end


  //data_22, which is an e_mux
  assign p22_stage_22 = ((full_23 & ~clear_fifo) == 0)? data_in :
    stage_23;

  //data_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_22 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_22))
          if (sync_reset & full_22 & !((full_23 == 0) & read & write))
              stage_22 <= 0;
          else 
            stage_22 <= p22_stage_22;
    end


  //control_22, which is an e_mux
  assign p22_full_22 = ((read & !write) == 0)? full_21 :
    full_23;

  //control_reg_22, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_22 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_22 <= 0;
          else 
            full_22 <= p22_full_22;
    end


  //data_21, which is an e_mux
  assign p21_stage_21 = ((full_22 & ~clear_fifo) == 0)? data_in :
    stage_22;

  //data_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_21 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_21))
          if (sync_reset & full_21 & !((full_22 == 0) & read & write))
              stage_21 <= 0;
          else 
            stage_21 <= p21_stage_21;
    end


  //control_21, which is an e_mux
  assign p21_full_21 = ((read & !write) == 0)? full_20 :
    full_22;

  //control_reg_21, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_21 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_21 <= 0;
          else 
            full_21 <= p21_full_21;
    end


  //data_20, which is an e_mux
  assign p20_stage_20 = ((full_21 & ~clear_fifo) == 0)? data_in :
    stage_21;

  //data_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_20 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_20))
          if (sync_reset & full_20 & !((full_21 == 0) & read & write))
              stage_20 <= 0;
          else 
            stage_20 <= p20_stage_20;
    end


  //control_20, which is an e_mux
  assign p20_full_20 = ((read & !write) == 0)? full_19 :
    full_21;

  //control_reg_20, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_20 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_20 <= 0;
          else 
            full_20 <= p20_full_20;
    end


  //data_19, which is an e_mux
  assign p19_stage_19 = ((full_20 & ~clear_fifo) == 0)? data_in :
    stage_20;

  //data_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_19 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_19))
          if (sync_reset & full_19 & !((full_20 == 0) & read & write))
              stage_19 <= 0;
          else 
            stage_19 <= p19_stage_19;
    end


  //control_19, which is an e_mux
  assign p19_full_19 = ((read & !write) == 0)? full_18 :
    full_20;

  //control_reg_19, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_19 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_19 <= 0;
          else 
            full_19 <= p19_full_19;
    end


  //data_18, which is an e_mux
  assign p18_stage_18 = ((full_19 & ~clear_fifo) == 0)? data_in :
    stage_19;

  //data_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_18 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_18))
          if (sync_reset & full_18 & !((full_19 == 0) & read & write))
              stage_18 <= 0;
          else 
            stage_18 <= p18_stage_18;
    end


  //control_18, which is an e_mux
  assign p18_full_18 = ((read & !write) == 0)? full_17 :
    full_19;

  //control_reg_18, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_18 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_18 <= 0;
          else 
            full_18 <= p18_full_18;
    end


  //data_17, which is an e_mux
  assign p17_stage_17 = ((full_18 & ~clear_fifo) == 0)? data_in :
    stage_18;

  //data_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_17 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_17))
          if (sync_reset & full_17 & !((full_18 == 0) & read & write))
              stage_17 <= 0;
          else 
            stage_17 <= p17_stage_17;
    end


  //control_17, which is an e_mux
  assign p17_full_17 = ((read & !write) == 0)? full_16 :
    full_18;

  //control_reg_17, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_17 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_17 <= 0;
          else 
            full_17 <= p17_full_17;
    end


  //data_16, which is an e_mux
  assign p16_stage_16 = ((full_17 & ~clear_fifo) == 0)? data_in :
    stage_17;

  //data_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_16 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_16))
          if (sync_reset & full_16 & !((full_17 == 0) & read & write))
              stage_16 <= 0;
          else 
            stage_16 <= p16_stage_16;
    end


  //control_16, which is an e_mux
  assign p16_full_16 = ((read & !write) == 0)? full_15 :
    full_17;

  //control_reg_16, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_16 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_16 <= 0;
          else 
            full_16 <= p16_full_16;
    end


  //data_15, which is an e_mux
  assign p15_stage_15 = ((full_16 & ~clear_fifo) == 0)? data_in :
    stage_16;

  //data_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_15 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_15))
          if (sync_reset & full_15 & !((full_16 == 0) & read & write))
              stage_15 <= 0;
          else 
            stage_15 <= p15_stage_15;
    end


  //control_15, which is an e_mux
  assign p15_full_15 = ((read & !write) == 0)? full_14 :
    full_16;

  //control_reg_15, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_15 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_15 <= 0;
          else 
            full_15 <= p15_full_15;
    end


  //data_14, which is an e_mux
  assign p14_stage_14 = ((full_15 & ~clear_fifo) == 0)? data_in :
    stage_15;

  //data_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_14 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_14))
          if (sync_reset & full_14 & !((full_15 == 0) & read & write))
              stage_14 <= 0;
          else 
            stage_14 <= p14_stage_14;
    end


  //control_14, which is an e_mux
  assign p14_full_14 = ((read & !write) == 0)? full_13 :
    full_15;

  //control_reg_14, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_14 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_14 <= 0;
          else 
            full_14 <= p14_full_14;
    end


  //data_13, which is an e_mux
  assign p13_stage_13 = ((full_14 & ~clear_fifo) == 0)? data_in :
    stage_14;

  //data_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_13 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_13))
          if (sync_reset & full_13 & !((full_14 == 0) & read & write))
              stage_13 <= 0;
          else 
            stage_13 <= p13_stage_13;
    end


  //control_13, which is an e_mux
  assign p13_full_13 = ((read & !write) == 0)? full_12 :
    full_14;

  //control_reg_13, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_13 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_13 <= 0;
          else 
            full_13 <= p13_full_13;
    end


  //data_12, which is an e_mux
  assign p12_stage_12 = ((full_13 & ~clear_fifo) == 0)? data_in :
    stage_13;

  //data_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_12 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_12))
          if (sync_reset & full_12 & !((full_13 == 0) & read & write))
              stage_12 <= 0;
          else 
            stage_12 <= p12_stage_12;
    end


  //control_12, which is an e_mux
  assign p12_full_12 = ((read & !write) == 0)? full_11 :
    full_13;

  //control_reg_12, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_12 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_12 <= 0;
          else 
            full_12 <= p12_full_12;
    end


  //data_11, which is an e_mux
  assign p11_stage_11 = ((full_12 & ~clear_fifo) == 0)? data_in :
    stage_12;

  //data_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_11 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_11))
          if (sync_reset & full_11 & !((full_12 == 0) & read & write))
              stage_11 <= 0;
          else 
            stage_11 <= p11_stage_11;
    end


  //control_11, which is an e_mux
  assign p11_full_11 = ((read & !write) == 0)? full_10 :
    full_12;

  //control_reg_11, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_11 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_11 <= 0;
          else 
            full_11 <= p11_full_11;
    end


  //data_10, which is an e_mux
  assign p10_stage_10 = ((full_11 & ~clear_fifo) == 0)? data_in :
    stage_11;

  //data_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_10 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_10))
          if (sync_reset & full_10 & !((full_11 == 0) & read & write))
              stage_10 <= 0;
          else 
            stage_10 <= p10_stage_10;
    end


  //control_10, which is an e_mux
  assign p10_full_10 = ((read & !write) == 0)? full_9 :
    full_11;

  //control_reg_10, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_10 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_10 <= 0;
          else 
            full_10 <= p10_full_10;
    end


  //data_9, which is an e_mux
  assign p9_stage_9 = ((full_10 & ~clear_fifo) == 0)? data_in :
    stage_10;

  //data_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_9 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_9))
          if (sync_reset & full_9 & !((full_10 == 0) & read & write))
              stage_9 <= 0;
          else 
            stage_9 <= p9_stage_9;
    end


  //control_9, which is an e_mux
  assign p9_full_9 = ((read & !write) == 0)? full_8 :
    full_10;

  //control_reg_9, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_9 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_9 <= 0;
          else 
            full_9 <= p9_full_9;
    end


  //data_8, which is an e_mux
  assign p8_stage_8 = ((full_9 & ~clear_fifo) == 0)? data_in :
    stage_9;

  //data_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_8 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_8))
          if (sync_reset & full_8 & !((full_9 == 0) & read & write))
              stage_8 <= 0;
          else 
            stage_8 <= p8_stage_8;
    end


  //control_8, which is an e_mux
  assign p8_full_8 = ((read & !write) == 0)? full_7 :
    full_9;

  //control_reg_8, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_8 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_8 <= 0;
          else 
            full_8 <= p8_full_8;
    end


  //data_7, which is an e_mux
  assign p7_stage_7 = ((full_8 & ~clear_fifo) == 0)? data_in :
    stage_8;

  //data_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_7 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_7))
          if (sync_reset & full_7 & !((full_8 == 0) & read & write))
              stage_7 <= 0;
          else 
            stage_7 <= p7_stage_7;
    end


  //control_7, which is an e_mux
  assign p7_full_7 = ((read & !write) == 0)? full_6 :
    full_8;

  //control_reg_7, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_7 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_7 <= 0;
          else 
            full_7 <= p7_full_7;
    end


  //data_6, which is an e_mux
  assign p6_stage_6 = ((full_7 & ~clear_fifo) == 0)? data_in :
    stage_7;

  //data_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_6 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_6))
          if (sync_reset & full_6 & !((full_7 == 0) & read & write))
              stage_6 <= 0;
          else 
            stage_6 <= p6_stage_6;
    end


  //control_6, which is an e_mux
  assign p6_full_6 = ((read & !write) == 0)? full_5 :
    full_7;

  //control_reg_6, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_6 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_6 <= 0;
          else 
            full_6 <= p6_full_6;
    end


  //data_5, which is an e_mux
  assign p5_stage_5 = ((full_6 & ~clear_fifo) == 0)? data_in :
    stage_6;

  //data_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_5 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_5))
          if (sync_reset & full_5 & !((full_6 == 0) & read & write))
              stage_5 <= 0;
          else 
            stage_5 <= p5_stage_5;
    end


  //control_5, which is an e_mux
  assign p5_full_5 = ((read & !write) == 0)? full_4 :
    full_6;

  //control_reg_5, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_5 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_5 <= 0;
          else 
            full_5 <= p5_full_5;
    end


  //data_4, which is an e_mux
  assign p4_stage_4 = ((full_5 & ~clear_fifo) == 0)? data_in :
    stage_5;

  //data_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_4 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_4))
          if (sync_reset & full_4 & !((full_5 == 0) & read & write))
              stage_4 <= 0;
          else 
            stage_4 <= p4_stage_4;
    end


  //control_4, which is an e_mux
  assign p4_full_4 = ((read & !write) == 0)? full_3 :
    full_5;

  //control_reg_4, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_4 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_4 <= 0;
          else 
            full_4 <= p4_full_4;
    end


  //data_3, which is an e_mux
  assign p3_stage_3 = ((full_4 & ~clear_fifo) == 0)? data_in :
    stage_4;

  //data_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_3 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_3))
          if (sync_reset & full_3 & !((full_4 == 0) & read & write))
              stage_3 <= 0;
          else 
            stage_3 <= p3_stage_3;
    end


  //control_3, which is an e_mux
  assign p3_full_3 = ((read & !write) == 0)? full_2 :
    full_4;

  //control_reg_3, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_3 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_3 <= 0;
          else 
            full_3 <= p3_full_3;
    end


  //data_2, which is an e_mux
  assign p2_stage_2 = ((full_3 & ~clear_fifo) == 0)? data_in :
    stage_3;

  //data_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_2 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_2))
          if (sync_reset & full_2 & !((full_3 == 0) & read & write))
              stage_2 <= 0;
          else 
            stage_2 <= p2_stage_2;
    end


  //control_2, which is an e_mux
  assign p2_full_2 = ((read & !write) == 0)? full_1 :
    full_3;

  //control_reg_2, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_2 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_2 <= 0;
          else 
            full_2 <= p2_full_2;
    end


  //data_1, which is an e_mux
  assign p1_stage_1 = ((full_2 & ~clear_fifo) == 0)? data_in :
    stage_2;

  //data_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_1 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_1))
          if (sync_reset & full_1 & !((full_2 == 0) & read & write))
              stage_1 <= 0;
          else 
            stage_1 <= p1_stage_1;
    end


  //control_1, which is an e_mux
  assign p1_full_1 = ((read & !write) == 0)? full_0 :
    full_2;

  //control_reg_1, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_1 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo)
              full_1 <= 0;
          else 
            full_1 <= p1_full_1;
    end


  //data_0, which is an e_mux
  assign p0_stage_0 = ((full_1 & ~clear_fifo) == 0)? data_in :
    stage_1;

  //data_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          stage_0 <= 0;
      else if (clear_fifo | sync_reset | read | (write & !full_0))
          if (sync_reset & full_0 & !((full_1 == 0) & read & write))
              stage_0 <= 0;
          else 
            stage_0 <= p0_stage_0;
    end


  //control_0, which is an e_mux
  assign p0_full_0 = ((read & !write) == 0)? 1 :
    full_1;

  //control_reg_0, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          full_0 <= 0;
      else if (clear_fifo | (read ^ write) | (write & !full_0))
          if (clear_fifo & ~write)
              full_0 <= 0;
          else 
            full_0 <= p0_full_0;
    end


  assign one_count_plus_one = how_many_ones + 1;
  assign one_count_minus_one = how_many_ones - 1;
  //updated_one_count, which is an e_mux
  assign updated_one_count = ((((clear_fifo | sync_reset) & !write)))? 0 :
    ((((clear_fifo | sync_reset) & write)))? |data_in :
    ((read & (|data_in) & write & (|stage_0)))? how_many_ones :
    ((write & (|data_in)))? one_count_plus_one :
    ((read & (|stage_0)))? one_count_minus_one :
    how_many_ones;

  //counts how many ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          how_many_ones <= 0;
      else if (clear_fifo | sync_reset | read | write)
          how_many_ones <= updated_one_count;
    end


  //this fifo contains ones in the data pipeline, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          fifo_contains_ones_n <= 1;
      else if (clear_fifo | sync_reset | read | write)
          fifo_contains_ones_n <= ~(|updated_one_count);
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module peripheral_clock_crossing_s1_arbitrator (
                                                 // inputs:
                                                  clk,
                                                  master_0_latency_counter,
                                                  master_0_master_address_to_slave,
                                                  master_0_master_byteenable,
                                                  master_0_master_read,
                                                  master_0_master_write,
                                                  master_0_master_writedata,
                                                  peripheral_clock_crossing_s1_endofpacket,
                                                  peripheral_clock_crossing_s1_readdata,
                                                  peripheral_clock_crossing_s1_readdatavalid,
                                                  peripheral_clock_crossing_s1_waitrequest,
                                                  reset_n,

                                                 // outputs:
                                                  d1_peripheral_clock_crossing_s1_end_xfer,
                                                  master_0_granted_peripheral_clock_crossing_s1,
                                                  master_0_qualified_request_peripheral_clock_crossing_s1,
                                                  master_0_read_data_valid_peripheral_clock_crossing_s1,
                                                  master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                                  master_0_requests_peripheral_clock_crossing_s1,
                                                  peripheral_clock_crossing_s1_address,
                                                  peripheral_clock_crossing_s1_byteenable,
                                                  peripheral_clock_crossing_s1_endofpacket_from_sa,
                                                  peripheral_clock_crossing_s1_nativeaddress,
                                                  peripheral_clock_crossing_s1_read,
                                                  peripheral_clock_crossing_s1_readdata_from_sa,
                                                  peripheral_clock_crossing_s1_reset_n,
                                                  peripheral_clock_crossing_s1_waitrequest_from_sa,
                                                  peripheral_clock_crossing_s1_write,
                                                  peripheral_clock_crossing_s1_writedata
                                               )
;

  output           d1_peripheral_clock_crossing_s1_end_xfer;
  output           master_0_granted_peripheral_clock_crossing_s1;
  output           master_0_qualified_request_peripheral_clock_crossing_s1;
  output           master_0_read_data_valid_peripheral_clock_crossing_s1;
  output           master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  output           master_0_requests_peripheral_clock_crossing_s1;
  output  [ 27: 0] peripheral_clock_crossing_s1_address;
  output  [  3: 0] peripheral_clock_crossing_s1_byteenable;
  output           peripheral_clock_crossing_s1_endofpacket_from_sa;
  output  [ 27: 0] peripheral_clock_crossing_s1_nativeaddress;
  output           peripheral_clock_crossing_s1_read;
  output  [ 31: 0] peripheral_clock_crossing_s1_readdata_from_sa;
  output           peripheral_clock_crossing_s1_reset_n;
  output           peripheral_clock_crossing_s1_waitrequest_from_sa;
  output           peripheral_clock_crossing_s1_write;
  output  [ 31: 0] peripheral_clock_crossing_s1_writedata;
  input            clk;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input   [  3: 0] master_0_master_byteenable;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            peripheral_clock_crossing_s1_endofpacket;
  input   [ 31: 0] peripheral_clock_crossing_s1_readdata;
  input            peripheral_clock_crossing_s1_readdatavalid;
  input            peripheral_clock_crossing_s1_waitrequest;
  input            reset_n;

  reg              d1_peripheral_clock_crossing_s1_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             master_0_granted_peripheral_clock_crossing_s1;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_peripheral_clock_crossing_s1;
  wire             master_0_rdv_fifo_empty_peripheral_clock_crossing_s1;
  wire             master_0_rdv_fifo_output_from_peripheral_clock_crossing_s1;
  wire             master_0_read_data_valid_peripheral_clock_crossing_s1;
  wire             master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  wire             master_0_requests_peripheral_clock_crossing_s1;
  wire             master_0_saved_grant_peripheral_clock_crossing_s1;
  wire    [ 27: 0] peripheral_clock_crossing_s1_address;
  wire             peripheral_clock_crossing_s1_allgrants;
  wire             peripheral_clock_crossing_s1_allow_new_arb_cycle;
  wire             peripheral_clock_crossing_s1_any_bursting_master_saved_grant;
  wire             peripheral_clock_crossing_s1_any_continuerequest;
  wire             peripheral_clock_crossing_s1_arb_counter_enable;
  reg              peripheral_clock_crossing_s1_arb_share_counter;
  wire             peripheral_clock_crossing_s1_arb_share_counter_next_value;
  wire             peripheral_clock_crossing_s1_arb_share_set_values;
  wire             peripheral_clock_crossing_s1_beginbursttransfer_internal;
  wire             peripheral_clock_crossing_s1_begins_xfer;
  wire    [  3: 0] peripheral_clock_crossing_s1_byteenable;
  wire             peripheral_clock_crossing_s1_end_xfer;
  wire             peripheral_clock_crossing_s1_endofpacket_from_sa;
  wire             peripheral_clock_crossing_s1_firsttransfer;
  wire             peripheral_clock_crossing_s1_grant_vector;
  wire             peripheral_clock_crossing_s1_in_a_read_cycle;
  wire             peripheral_clock_crossing_s1_in_a_write_cycle;
  wire             peripheral_clock_crossing_s1_master_qreq_vector;
  wire             peripheral_clock_crossing_s1_move_on_to_next_transaction;
  wire    [ 27: 0] peripheral_clock_crossing_s1_nativeaddress;
  wire             peripheral_clock_crossing_s1_non_bursting_master_requests;
  wire             peripheral_clock_crossing_s1_read;
  wire    [ 31: 0] peripheral_clock_crossing_s1_readdata_from_sa;
  wire             peripheral_clock_crossing_s1_readdatavalid_from_sa;
  reg              peripheral_clock_crossing_s1_reg_firsttransfer;
  wire             peripheral_clock_crossing_s1_reset_n;
  reg              peripheral_clock_crossing_s1_slavearbiterlockenable;
  wire             peripheral_clock_crossing_s1_slavearbiterlockenable2;
  wire             peripheral_clock_crossing_s1_unreg_firsttransfer;
  wire             peripheral_clock_crossing_s1_waitrequest_from_sa;
  wire             peripheral_clock_crossing_s1_waits_for_read;
  wire             peripheral_clock_crossing_s1_waits_for_write;
  wire             peripheral_clock_crossing_s1_write;
  wire    [ 31: 0] peripheral_clock_crossing_s1_writedata;
  wire    [ 31: 0] shifted_address_to_peripheral_clock_crossing_s1_from_master_0_master;
  wire             wait_for_peripheral_clock_crossing_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~peripheral_clock_crossing_s1_end_xfer;
    end


  assign peripheral_clock_crossing_s1_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_peripheral_clock_crossing_s1));
  //assign peripheral_clock_crossing_s1_readdatavalid_from_sa = peripheral_clock_crossing_s1_readdatavalid so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign peripheral_clock_crossing_s1_readdatavalid_from_sa = peripheral_clock_crossing_s1_readdatavalid;

  //assign peripheral_clock_crossing_s1_readdata_from_sa = peripheral_clock_crossing_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign peripheral_clock_crossing_s1_readdata_from_sa = peripheral_clock_crossing_s1_readdata;

  assign master_0_requests_peripheral_clock_crossing_s1 = ({master_0_master_address_to_slave[31 : 30] , 30'b0} == 32'h40000000) & (master_0_master_read | master_0_master_write);
  //assign peripheral_clock_crossing_s1_waitrequest_from_sa = peripheral_clock_crossing_s1_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign peripheral_clock_crossing_s1_waitrequest_from_sa = peripheral_clock_crossing_s1_waitrequest;

  //peripheral_clock_crossing_s1_arb_share_counter set values, which is an e_mux
  assign peripheral_clock_crossing_s1_arb_share_set_values = 1;

  //peripheral_clock_crossing_s1_non_bursting_master_requests mux, which is an e_mux
  assign peripheral_clock_crossing_s1_non_bursting_master_requests = master_0_requests_peripheral_clock_crossing_s1;

  //peripheral_clock_crossing_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign peripheral_clock_crossing_s1_any_bursting_master_saved_grant = 0;

  //peripheral_clock_crossing_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign peripheral_clock_crossing_s1_arb_share_counter_next_value = peripheral_clock_crossing_s1_firsttransfer ? (peripheral_clock_crossing_s1_arb_share_set_values - 1) : |peripheral_clock_crossing_s1_arb_share_counter ? (peripheral_clock_crossing_s1_arb_share_counter - 1) : 0;

  //peripheral_clock_crossing_s1_allgrants all slave grants, which is an e_mux
  assign peripheral_clock_crossing_s1_allgrants = |peripheral_clock_crossing_s1_grant_vector;

  //peripheral_clock_crossing_s1_end_xfer assignment, which is an e_assign
  assign peripheral_clock_crossing_s1_end_xfer = ~(peripheral_clock_crossing_s1_waits_for_read | peripheral_clock_crossing_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1 = peripheral_clock_crossing_s1_end_xfer & (~peripheral_clock_crossing_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //peripheral_clock_crossing_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign peripheral_clock_crossing_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1 & peripheral_clock_crossing_s1_allgrants) | (end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1 & ~peripheral_clock_crossing_s1_non_bursting_master_requests);

  //peripheral_clock_crossing_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_s1_arb_share_counter <= 0;
      else if (peripheral_clock_crossing_s1_arb_counter_enable)
          peripheral_clock_crossing_s1_arb_share_counter <= peripheral_clock_crossing_s1_arb_share_counter_next_value;
    end


  //peripheral_clock_crossing_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_s1_slavearbiterlockenable <= 0;
      else if ((|peripheral_clock_crossing_s1_master_qreq_vector & end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1) | (end_xfer_arb_share_counter_term_peripheral_clock_crossing_s1 & ~peripheral_clock_crossing_s1_non_bursting_master_requests))
          peripheral_clock_crossing_s1_slavearbiterlockenable <= |peripheral_clock_crossing_s1_arb_share_counter_next_value;
    end


  //master_0/master peripheral_clock_crossing/s1 arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = peripheral_clock_crossing_s1_slavearbiterlockenable & master_0_master_continuerequest;

  //peripheral_clock_crossing_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign peripheral_clock_crossing_s1_slavearbiterlockenable2 = |peripheral_clock_crossing_s1_arb_share_counter_next_value;

  //master_0/master peripheral_clock_crossing/s1 arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = peripheral_clock_crossing_s1_slavearbiterlockenable2 & master_0_master_continuerequest;

  //peripheral_clock_crossing_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign peripheral_clock_crossing_s1_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_peripheral_clock_crossing_s1 = master_0_requests_peripheral_clock_crossing_s1 & ~((master_0_master_read & ((master_0_latency_counter != 0) | (1 < master_0_latency_counter))));
  //unique name for peripheral_clock_crossing_s1_move_on_to_next_transaction, which is an e_assign
  assign peripheral_clock_crossing_s1_move_on_to_next_transaction = peripheral_clock_crossing_s1_readdatavalid_from_sa;

  //rdv_fifo_for_master_0_master_to_peripheral_clock_crossing_s1, which is an e_fifo_with_registered_outputs
  rdv_fifo_for_master_0_master_to_peripheral_clock_crossing_s1_module rdv_fifo_for_master_0_master_to_peripheral_clock_crossing_s1
    (
      .clear_fifo           (1'b0),
      .clk                  (clk),
      .data_in              (master_0_granted_peripheral_clock_crossing_s1),
      .data_out             (master_0_rdv_fifo_output_from_peripheral_clock_crossing_s1),
      .empty                (),
      .fifo_contains_ones_n (master_0_rdv_fifo_empty_peripheral_clock_crossing_s1),
      .full                 (),
      .read                 (peripheral_clock_crossing_s1_move_on_to_next_transaction),
      .reset_n              (reset_n),
      .sync_reset           (1'b0),
      .write                (in_a_read_cycle & ~peripheral_clock_crossing_s1_waits_for_read)
    );

  assign master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register = ~master_0_rdv_fifo_empty_peripheral_clock_crossing_s1;
  //local readdatavalid master_0_read_data_valid_peripheral_clock_crossing_s1, which is an e_mux
  assign master_0_read_data_valid_peripheral_clock_crossing_s1 = peripheral_clock_crossing_s1_readdatavalid_from_sa;

  //peripheral_clock_crossing_s1_writedata mux, which is an e_mux
  assign peripheral_clock_crossing_s1_writedata = master_0_master_writedata;

  //assign peripheral_clock_crossing_s1_endofpacket_from_sa = peripheral_clock_crossing_s1_endofpacket so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign peripheral_clock_crossing_s1_endofpacket_from_sa = peripheral_clock_crossing_s1_endofpacket;

  //master is always granted when requested
  assign master_0_granted_peripheral_clock_crossing_s1 = master_0_qualified_request_peripheral_clock_crossing_s1;

  //master_0/master saved-grant peripheral_clock_crossing/s1, which is an e_assign
  assign master_0_saved_grant_peripheral_clock_crossing_s1 = master_0_requests_peripheral_clock_crossing_s1;

  //allow new arb cycle for peripheral_clock_crossing/s1, which is an e_assign
  assign peripheral_clock_crossing_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign peripheral_clock_crossing_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign peripheral_clock_crossing_s1_master_qreq_vector = 1;

  //peripheral_clock_crossing_s1_reset_n assignment, which is an e_assign
  assign peripheral_clock_crossing_s1_reset_n = reset_n;

  //peripheral_clock_crossing_s1_firsttransfer first transaction, which is an e_assign
  assign peripheral_clock_crossing_s1_firsttransfer = peripheral_clock_crossing_s1_begins_xfer ? peripheral_clock_crossing_s1_unreg_firsttransfer : peripheral_clock_crossing_s1_reg_firsttransfer;

  //peripheral_clock_crossing_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign peripheral_clock_crossing_s1_unreg_firsttransfer = ~(peripheral_clock_crossing_s1_slavearbiterlockenable & peripheral_clock_crossing_s1_any_continuerequest);

  //peripheral_clock_crossing_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_s1_reg_firsttransfer <= 1'b1;
      else if (peripheral_clock_crossing_s1_begins_xfer)
          peripheral_clock_crossing_s1_reg_firsttransfer <= peripheral_clock_crossing_s1_unreg_firsttransfer;
    end


  //peripheral_clock_crossing_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign peripheral_clock_crossing_s1_beginbursttransfer_internal = peripheral_clock_crossing_s1_begins_xfer;

  //peripheral_clock_crossing_s1_read assignment, which is an e_mux
  assign peripheral_clock_crossing_s1_read = master_0_granted_peripheral_clock_crossing_s1 & master_0_master_read;

  //peripheral_clock_crossing_s1_write assignment, which is an e_mux
  assign peripheral_clock_crossing_s1_write = master_0_granted_peripheral_clock_crossing_s1 & master_0_master_write;

  assign shifted_address_to_peripheral_clock_crossing_s1_from_master_0_master = master_0_master_address_to_slave;
  //peripheral_clock_crossing_s1_address mux, which is an e_mux
  assign peripheral_clock_crossing_s1_address = shifted_address_to_peripheral_clock_crossing_s1_from_master_0_master >> 2;

  //slaveid peripheral_clock_crossing_s1_nativeaddress nativeaddress mux, which is an e_mux
  assign peripheral_clock_crossing_s1_nativeaddress = master_0_master_address_to_slave >> 2;

  //d1_peripheral_clock_crossing_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_peripheral_clock_crossing_s1_end_xfer <= 1;
      else 
        d1_peripheral_clock_crossing_s1_end_xfer <= peripheral_clock_crossing_s1_end_xfer;
    end


  //peripheral_clock_crossing_s1_waits_for_read in a cycle, which is an e_mux
  assign peripheral_clock_crossing_s1_waits_for_read = peripheral_clock_crossing_s1_in_a_read_cycle & peripheral_clock_crossing_s1_waitrequest_from_sa;

  //peripheral_clock_crossing_s1_in_a_read_cycle assignment, which is an e_assign
  assign peripheral_clock_crossing_s1_in_a_read_cycle = master_0_granted_peripheral_clock_crossing_s1 & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = peripheral_clock_crossing_s1_in_a_read_cycle;

  //peripheral_clock_crossing_s1_waits_for_write in a cycle, which is an e_mux
  assign peripheral_clock_crossing_s1_waits_for_write = peripheral_clock_crossing_s1_in_a_write_cycle & peripheral_clock_crossing_s1_waitrequest_from_sa;

  //peripheral_clock_crossing_s1_in_a_write_cycle assignment, which is an e_assign
  assign peripheral_clock_crossing_s1_in_a_write_cycle = master_0_granted_peripheral_clock_crossing_s1 & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = peripheral_clock_crossing_s1_in_a_write_cycle;

  assign wait_for_peripheral_clock_crossing_s1_counter = 0;
  //peripheral_clock_crossing_s1_byteenable byte enable port mux, which is an e_mux
  assign peripheral_clock_crossing_s1_byteenable = (master_0_granted_peripheral_clock_crossing_s1)? master_0_master_byteenable :
    -1;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //peripheral_clock_crossing/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module peripheral_clock_crossing_m1_arbitrator (
                                                 // inputs:
                                                  clk,
                                                  d1_led_pio_s1_end_xfer,
                                                  d1_pb_pio_s1_end_xfer,
                                                  d1_seven_seg_pio_s1_end_xfer,
                                                  d1_sw_pio_s1_end_xfer,
                                                  led_pio_s1_readdata_from_sa,
                                                  pb_pio_s1_readdata_from_sa,
                                                  peripheral_clock_crossing_m1_address,
                                                  peripheral_clock_crossing_m1_byteenable,
                                                  peripheral_clock_crossing_m1_granted_led_pio_s1,
                                                  peripheral_clock_crossing_m1_granted_pb_pio_s1,
                                                  peripheral_clock_crossing_m1_granted_seven_seg_pio_s1,
                                                  peripheral_clock_crossing_m1_granted_sw_pio_s1,
                                                  peripheral_clock_crossing_m1_qualified_request_led_pio_s1,
                                                  peripheral_clock_crossing_m1_qualified_request_pb_pio_s1,
                                                  peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1,
                                                  peripheral_clock_crossing_m1_qualified_request_sw_pio_s1,
                                                  peripheral_clock_crossing_m1_read,
                                                  peripheral_clock_crossing_m1_read_data_valid_led_pio_s1,
                                                  peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1,
                                                  peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1,
                                                  peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1,
                                                  peripheral_clock_crossing_m1_requests_led_pio_s1,
                                                  peripheral_clock_crossing_m1_requests_pb_pio_s1,
                                                  peripheral_clock_crossing_m1_requests_seven_seg_pio_s1,
                                                  peripheral_clock_crossing_m1_requests_sw_pio_s1,
                                                  peripheral_clock_crossing_m1_write,
                                                  peripheral_clock_crossing_m1_writedata,
                                                  reset_n,
                                                  seven_seg_pio_s1_readdata_from_sa,
                                                  sw_pio_s1_readdata_from_sa,

                                                 // outputs:
                                                  peripheral_clock_crossing_m1_address_to_slave,
                                                  peripheral_clock_crossing_m1_latency_counter,
                                                  peripheral_clock_crossing_m1_readdata,
                                                  peripheral_clock_crossing_m1_readdatavalid,
                                                  peripheral_clock_crossing_m1_reset_n,
                                                  peripheral_clock_crossing_m1_waitrequest
                                               )
;

  output  [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  output           peripheral_clock_crossing_m1_latency_counter;
  output  [ 31: 0] peripheral_clock_crossing_m1_readdata;
  output           peripheral_clock_crossing_m1_readdatavalid;
  output           peripheral_clock_crossing_m1_reset_n;
  output           peripheral_clock_crossing_m1_waitrequest;
  input            clk;
  input            d1_led_pio_s1_end_xfer;
  input            d1_pb_pio_s1_end_xfer;
  input            d1_seven_seg_pio_s1_end_xfer;
  input            d1_sw_pio_s1_end_xfer;
  input   [ 31: 0] led_pio_s1_readdata_from_sa;
  input   [ 31: 0] pb_pio_s1_readdata_from_sa;
  input   [ 29: 0] peripheral_clock_crossing_m1_address;
  input   [  3: 0] peripheral_clock_crossing_m1_byteenable;
  input            peripheral_clock_crossing_m1_granted_led_pio_s1;
  input            peripheral_clock_crossing_m1_granted_pb_pio_s1;
  input            peripheral_clock_crossing_m1_granted_seven_seg_pio_s1;
  input            peripheral_clock_crossing_m1_granted_sw_pio_s1;
  input            peripheral_clock_crossing_m1_qualified_request_led_pio_s1;
  input            peripheral_clock_crossing_m1_qualified_request_pb_pio_s1;
  input            peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1;
  input            peripheral_clock_crossing_m1_qualified_request_sw_pio_s1;
  input            peripheral_clock_crossing_m1_read;
  input            peripheral_clock_crossing_m1_read_data_valid_led_pio_s1;
  input            peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1;
  input            peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1;
  input            peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1;
  input            peripheral_clock_crossing_m1_requests_led_pio_s1;
  input            peripheral_clock_crossing_m1_requests_pb_pio_s1;
  input            peripheral_clock_crossing_m1_requests_seven_seg_pio_s1;
  input            peripheral_clock_crossing_m1_requests_sw_pio_s1;
  input            peripheral_clock_crossing_m1_write;
  input   [ 31: 0] peripheral_clock_crossing_m1_writedata;
  input            reset_n;
  input   [ 31: 0] seven_seg_pio_s1_readdata_from_sa;
  input   [ 31: 0] sw_pio_s1_readdata_from_sa;

  reg              active_and_waiting_last_time;
  wire             latency_load_value;
  wire             p1_peripheral_clock_crossing_m1_latency_counter;
  reg     [ 29: 0] peripheral_clock_crossing_m1_address_last_time;
  wire    [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  reg     [  3: 0] peripheral_clock_crossing_m1_byteenable_last_time;
  wire             peripheral_clock_crossing_m1_is_granted_some_slave;
  reg              peripheral_clock_crossing_m1_latency_counter;
  reg              peripheral_clock_crossing_m1_read_but_no_slave_selected;
  reg              peripheral_clock_crossing_m1_read_last_time;
  wire    [ 31: 0] peripheral_clock_crossing_m1_readdata;
  wire             peripheral_clock_crossing_m1_readdatavalid;
  wire             peripheral_clock_crossing_m1_reset_n;
  wire             peripheral_clock_crossing_m1_run;
  wire             peripheral_clock_crossing_m1_waitrequest;
  reg              peripheral_clock_crossing_m1_write_last_time;
  reg     [ 31: 0] peripheral_clock_crossing_m1_writedata_last_time;
  wire             pre_flush_peripheral_clock_crossing_m1_readdatavalid;
  wire             r_0;
  wire             r_1;
  //r_0 master_run cascaded wait assignment, which is an e_assign
  assign r_0 = 1 & (peripheral_clock_crossing_m1_qualified_request_led_pio_s1 | ~peripheral_clock_crossing_m1_requests_led_pio_s1) & ((~peripheral_clock_crossing_m1_qualified_request_led_pio_s1 | ~peripheral_clock_crossing_m1_read | (1 & ~d1_led_pio_s1_end_xfer & peripheral_clock_crossing_m1_read))) & ((~peripheral_clock_crossing_m1_qualified_request_led_pio_s1 | ~peripheral_clock_crossing_m1_write | (1 & peripheral_clock_crossing_m1_write))) & 1 & (peripheral_clock_crossing_m1_qualified_request_pb_pio_s1 | ~peripheral_clock_crossing_m1_requests_pb_pio_s1) & ((~peripheral_clock_crossing_m1_qualified_request_pb_pio_s1 | ~peripheral_clock_crossing_m1_read | (1 & ~d1_pb_pio_s1_end_xfer & peripheral_clock_crossing_m1_read))) & ((~peripheral_clock_crossing_m1_qualified_request_pb_pio_s1 | ~peripheral_clock_crossing_m1_write | (1 & peripheral_clock_crossing_m1_write)));

  //cascaded wait assignment, which is an e_assign
  assign peripheral_clock_crossing_m1_run = r_0 & r_1;

  //r_1 master_run cascaded wait assignment, which is an e_assign
  assign r_1 = 1 & (peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 | ~peripheral_clock_crossing_m1_requests_seven_seg_pio_s1) & ((~peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 | ~peripheral_clock_crossing_m1_read | (1 & ~d1_seven_seg_pio_s1_end_xfer & peripheral_clock_crossing_m1_read))) & ((~peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 | ~peripheral_clock_crossing_m1_write | (1 & peripheral_clock_crossing_m1_write))) & 1 & (peripheral_clock_crossing_m1_qualified_request_sw_pio_s1 | ~peripheral_clock_crossing_m1_requests_sw_pio_s1) & ((~peripheral_clock_crossing_m1_qualified_request_sw_pio_s1 | ~peripheral_clock_crossing_m1_read | (1 & ~d1_sw_pio_s1_end_xfer & peripheral_clock_crossing_m1_read))) & ((~peripheral_clock_crossing_m1_qualified_request_sw_pio_s1 | ~peripheral_clock_crossing_m1_write | (1 & peripheral_clock_crossing_m1_write)));

  //optimize select-logic by passing only those address bits which matter.
  assign peripheral_clock_crossing_m1_address_to_slave = {23'b11000000000000000000000,
    peripheral_clock_crossing_m1_address[6 : 5],
    1'b0,
    peripheral_clock_crossing_m1_address[3 : 0]};

  //peripheral_clock_crossing_m1_read_but_no_slave_selected assignment, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_read_but_no_slave_selected <= 0;
      else 
        peripheral_clock_crossing_m1_read_but_no_slave_selected <= peripheral_clock_crossing_m1_read & peripheral_clock_crossing_m1_run & ~peripheral_clock_crossing_m1_is_granted_some_slave;
    end


  //some slave is getting selected, which is an e_mux
  assign peripheral_clock_crossing_m1_is_granted_some_slave = peripheral_clock_crossing_m1_granted_led_pio_s1 |
    peripheral_clock_crossing_m1_granted_pb_pio_s1 |
    peripheral_clock_crossing_m1_granted_seven_seg_pio_s1 |
    peripheral_clock_crossing_m1_granted_sw_pio_s1;

  //latent slave read data valids which may be flushed, which is an e_mux
  assign pre_flush_peripheral_clock_crossing_m1_readdatavalid = 0;

  //latent slave read data valid which is not flushed, which is an e_mux
  assign peripheral_clock_crossing_m1_readdatavalid = peripheral_clock_crossing_m1_read_but_no_slave_selected |
    pre_flush_peripheral_clock_crossing_m1_readdatavalid |
    peripheral_clock_crossing_m1_read_data_valid_led_pio_s1 |
    peripheral_clock_crossing_m1_read_but_no_slave_selected |
    pre_flush_peripheral_clock_crossing_m1_readdatavalid |
    peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1 |
    peripheral_clock_crossing_m1_read_but_no_slave_selected |
    pre_flush_peripheral_clock_crossing_m1_readdatavalid |
    peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1 |
    peripheral_clock_crossing_m1_read_but_no_slave_selected |
    pre_flush_peripheral_clock_crossing_m1_readdatavalid |
    peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1;

  //peripheral_clock_crossing/m1 readdata mux, which is an e_mux
  assign peripheral_clock_crossing_m1_readdata = ({32 {~(peripheral_clock_crossing_m1_qualified_request_led_pio_s1 & peripheral_clock_crossing_m1_read)}} | led_pio_s1_readdata_from_sa) &
    ({32 {~(peripheral_clock_crossing_m1_qualified_request_pb_pio_s1 & peripheral_clock_crossing_m1_read)}} | pb_pio_s1_readdata_from_sa) &
    ({32 {~(peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 & peripheral_clock_crossing_m1_read)}} | seven_seg_pio_s1_readdata_from_sa) &
    ({32 {~(peripheral_clock_crossing_m1_qualified_request_sw_pio_s1 & peripheral_clock_crossing_m1_read)}} | sw_pio_s1_readdata_from_sa);

  //actual waitrequest port, which is an e_assign
  assign peripheral_clock_crossing_m1_waitrequest = ~peripheral_clock_crossing_m1_run;

  //latent max counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_latency_counter <= 0;
      else 
        peripheral_clock_crossing_m1_latency_counter <= p1_peripheral_clock_crossing_m1_latency_counter;
    end


  //latency counter load mux, which is an e_mux
  assign p1_peripheral_clock_crossing_m1_latency_counter = ((peripheral_clock_crossing_m1_run & peripheral_clock_crossing_m1_read))? latency_load_value :
    (peripheral_clock_crossing_m1_latency_counter)? peripheral_clock_crossing_m1_latency_counter - 1 :
    0;

  //read latency load values, which is an e_mux
  assign latency_load_value = 0;

  //peripheral_clock_crossing_m1_reset_n assignment, which is an e_assign
  assign peripheral_clock_crossing_m1_reset_n = reset_n;


//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //peripheral_clock_crossing_m1_address check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_address_last_time <= 0;
      else 
        peripheral_clock_crossing_m1_address_last_time <= peripheral_clock_crossing_m1_address;
    end


  //peripheral_clock_crossing/m1 waited last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          active_and_waiting_last_time <= 0;
      else 
        active_and_waiting_last_time <= peripheral_clock_crossing_m1_waitrequest & (peripheral_clock_crossing_m1_read | peripheral_clock_crossing_m1_write);
    end


  //peripheral_clock_crossing_m1_address matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (peripheral_clock_crossing_m1_address != peripheral_clock_crossing_m1_address_last_time))
        begin
          $write("%0d ns: peripheral_clock_crossing_m1_address did not heed wait!!!", $time);
          $stop;
        end
    end


  //peripheral_clock_crossing_m1_byteenable check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_byteenable_last_time <= 0;
      else 
        peripheral_clock_crossing_m1_byteenable_last_time <= peripheral_clock_crossing_m1_byteenable;
    end


  //peripheral_clock_crossing_m1_byteenable matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (peripheral_clock_crossing_m1_byteenable != peripheral_clock_crossing_m1_byteenable_last_time))
        begin
          $write("%0d ns: peripheral_clock_crossing_m1_byteenable did not heed wait!!!", $time);
          $stop;
        end
    end


  //peripheral_clock_crossing_m1_read check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_read_last_time <= 0;
      else 
        peripheral_clock_crossing_m1_read_last_time <= peripheral_clock_crossing_m1_read;
    end


  //peripheral_clock_crossing_m1_read matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (peripheral_clock_crossing_m1_read != peripheral_clock_crossing_m1_read_last_time))
        begin
          $write("%0d ns: peripheral_clock_crossing_m1_read did not heed wait!!!", $time);
          $stop;
        end
    end


  //peripheral_clock_crossing_m1_write check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_write_last_time <= 0;
      else 
        peripheral_clock_crossing_m1_write_last_time <= peripheral_clock_crossing_m1_write;
    end


  //peripheral_clock_crossing_m1_write matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (peripheral_clock_crossing_m1_write != peripheral_clock_crossing_m1_write_last_time))
        begin
          $write("%0d ns: peripheral_clock_crossing_m1_write did not heed wait!!!", $time);
          $stop;
        end
    end


  //peripheral_clock_crossing_m1_writedata check against wait, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          peripheral_clock_crossing_m1_writedata_last_time <= 0;
      else 
        peripheral_clock_crossing_m1_writedata_last_time <= peripheral_clock_crossing_m1_writedata;
    end


  //peripheral_clock_crossing_m1_writedata matches last port_name, which is an e_process
  always @(posedge clk)
    begin
      if (active_and_waiting_last_time & (peripheral_clock_crossing_m1_writedata != peripheral_clock_crossing_m1_writedata_last_time) & peripheral_clock_crossing_m1_write)
        begin
          $write("%0d ns: peripheral_clock_crossing_m1_writedata did not heed wait!!!", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module peripheral_clock_crossing_bridge_arbitrator 
;



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module pll_s1_arbitrator (
                           // inputs:
                            DE4_SOPC_clock_0_out_address_to_slave,
                            DE4_SOPC_clock_0_out_nativeaddress,
                            DE4_SOPC_clock_0_out_read,
                            DE4_SOPC_clock_0_out_write,
                            DE4_SOPC_clock_0_out_writedata,
                            clk,
                            pll_s1_readdata,
                            pll_s1_resetrequest,
                            reset_n,

                           // outputs:
                            DE4_SOPC_clock_0_out_granted_pll_s1,
                            DE4_SOPC_clock_0_out_qualified_request_pll_s1,
                            DE4_SOPC_clock_0_out_read_data_valid_pll_s1,
                            DE4_SOPC_clock_0_out_requests_pll_s1,
                            d1_pll_s1_end_xfer,
                            pll_s1_address,
                            pll_s1_chipselect,
                            pll_s1_read,
                            pll_s1_readdata_from_sa,
                            pll_s1_reset_n,
                            pll_s1_resetrequest_from_sa,
                            pll_s1_write,
                            pll_s1_writedata
                         )
;

  output           DE4_SOPC_clock_0_out_granted_pll_s1;
  output           DE4_SOPC_clock_0_out_qualified_request_pll_s1;
  output           DE4_SOPC_clock_0_out_read_data_valid_pll_s1;
  output           DE4_SOPC_clock_0_out_requests_pll_s1;
  output           d1_pll_s1_end_xfer;
  output  [  2: 0] pll_s1_address;
  output           pll_s1_chipselect;
  output           pll_s1_read;
  output  [ 15: 0] pll_s1_readdata_from_sa;
  output           pll_s1_reset_n;
  output           pll_s1_resetrequest_from_sa;
  output           pll_s1_write;
  output  [ 15: 0] pll_s1_writedata;
  input   [  3: 0] DE4_SOPC_clock_0_out_address_to_slave;
  input   [  2: 0] DE4_SOPC_clock_0_out_nativeaddress;
  input            DE4_SOPC_clock_0_out_read;
  input            DE4_SOPC_clock_0_out_write;
  input   [ 15: 0] DE4_SOPC_clock_0_out_writedata;
  input            clk;
  input   [ 15: 0] pll_s1_readdata;
  input            pll_s1_resetrequest;
  input            reset_n;

  wire             DE4_SOPC_clock_0_out_arbiterlock;
  wire             DE4_SOPC_clock_0_out_arbiterlock2;
  wire             DE4_SOPC_clock_0_out_continuerequest;
  wire             DE4_SOPC_clock_0_out_granted_pll_s1;
  wire             DE4_SOPC_clock_0_out_qualified_request_pll_s1;
  wire             DE4_SOPC_clock_0_out_read_data_valid_pll_s1;
  wire             DE4_SOPC_clock_0_out_requests_pll_s1;
  wire             DE4_SOPC_clock_0_out_saved_grant_pll_s1;
  reg              d1_pll_s1_end_xfer;
  reg              d1_reasons_to_wait;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_pll_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire    [  2: 0] pll_s1_address;
  wire             pll_s1_allgrants;
  wire             pll_s1_allow_new_arb_cycle;
  wire             pll_s1_any_bursting_master_saved_grant;
  wire             pll_s1_any_continuerequest;
  wire             pll_s1_arb_counter_enable;
  reg              pll_s1_arb_share_counter;
  wire             pll_s1_arb_share_counter_next_value;
  wire             pll_s1_arb_share_set_values;
  wire             pll_s1_beginbursttransfer_internal;
  wire             pll_s1_begins_xfer;
  wire             pll_s1_chipselect;
  wire             pll_s1_end_xfer;
  wire             pll_s1_firsttransfer;
  wire             pll_s1_grant_vector;
  wire             pll_s1_in_a_read_cycle;
  wire             pll_s1_in_a_write_cycle;
  wire             pll_s1_master_qreq_vector;
  wire             pll_s1_non_bursting_master_requests;
  wire             pll_s1_read;
  wire    [ 15: 0] pll_s1_readdata_from_sa;
  reg              pll_s1_reg_firsttransfer;
  wire             pll_s1_reset_n;
  wire             pll_s1_resetrequest_from_sa;
  reg              pll_s1_slavearbiterlockenable;
  wire             pll_s1_slavearbiterlockenable2;
  wire             pll_s1_unreg_firsttransfer;
  wire             pll_s1_waits_for_read;
  wire             pll_s1_waits_for_write;
  wire             pll_s1_write;
  wire    [ 15: 0] pll_s1_writedata;
  wire             wait_for_pll_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~pll_s1_end_xfer;
    end


  assign pll_s1_begins_xfer = ~d1_reasons_to_wait & ((DE4_SOPC_clock_0_out_qualified_request_pll_s1));
  //assign pll_s1_readdata_from_sa = pll_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pll_s1_readdata_from_sa = pll_s1_readdata;

  assign DE4_SOPC_clock_0_out_requests_pll_s1 = (1) & (DE4_SOPC_clock_0_out_read | DE4_SOPC_clock_0_out_write);
  //pll_s1_arb_share_counter set values, which is an e_mux
  assign pll_s1_arb_share_set_values = 1;

  //pll_s1_non_bursting_master_requests mux, which is an e_mux
  assign pll_s1_non_bursting_master_requests = DE4_SOPC_clock_0_out_requests_pll_s1;

  //pll_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign pll_s1_any_bursting_master_saved_grant = 0;

  //pll_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign pll_s1_arb_share_counter_next_value = pll_s1_firsttransfer ? (pll_s1_arb_share_set_values - 1) : |pll_s1_arb_share_counter ? (pll_s1_arb_share_counter - 1) : 0;

  //pll_s1_allgrants all slave grants, which is an e_mux
  assign pll_s1_allgrants = |pll_s1_grant_vector;

  //pll_s1_end_xfer assignment, which is an e_assign
  assign pll_s1_end_xfer = ~(pll_s1_waits_for_read | pll_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_pll_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_pll_s1 = pll_s1_end_xfer & (~pll_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //pll_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign pll_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_pll_s1 & pll_s1_allgrants) | (end_xfer_arb_share_counter_term_pll_s1 & ~pll_s1_non_bursting_master_requests);

  //pll_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pll_s1_arb_share_counter <= 0;
      else if (pll_s1_arb_counter_enable)
          pll_s1_arb_share_counter <= pll_s1_arb_share_counter_next_value;
    end


  //pll_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pll_s1_slavearbiterlockenable <= 0;
      else if ((|pll_s1_master_qreq_vector & end_xfer_arb_share_counter_term_pll_s1) | (end_xfer_arb_share_counter_term_pll_s1 & ~pll_s1_non_bursting_master_requests))
          pll_s1_slavearbiterlockenable <= |pll_s1_arb_share_counter_next_value;
    end


  //DE4_SOPC_clock_0/out pll/s1 arbiterlock, which is an e_assign
  assign DE4_SOPC_clock_0_out_arbiterlock = pll_s1_slavearbiterlockenable & DE4_SOPC_clock_0_out_continuerequest;

  //pll_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign pll_s1_slavearbiterlockenable2 = |pll_s1_arb_share_counter_next_value;

  //DE4_SOPC_clock_0/out pll/s1 arbiterlock2, which is an e_assign
  assign DE4_SOPC_clock_0_out_arbiterlock2 = pll_s1_slavearbiterlockenable2 & DE4_SOPC_clock_0_out_continuerequest;

  //pll_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign pll_s1_any_continuerequest = 1;

  //DE4_SOPC_clock_0_out_continuerequest continued request, which is an e_assign
  assign DE4_SOPC_clock_0_out_continuerequest = 1;

  assign DE4_SOPC_clock_0_out_qualified_request_pll_s1 = DE4_SOPC_clock_0_out_requests_pll_s1;
  //pll_s1_writedata mux, which is an e_mux
  assign pll_s1_writedata = DE4_SOPC_clock_0_out_writedata;

  //master is always granted when requested
  assign DE4_SOPC_clock_0_out_granted_pll_s1 = DE4_SOPC_clock_0_out_qualified_request_pll_s1;

  //DE4_SOPC_clock_0/out saved-grant pll/s1, which is an e_assign
  assign DE4_SOPC_clock_0_out_saved_grant_pll_s1 = DE4_SOPC_clock_0_out_requests_pll_s1;

  //allow new arb cycle for pll/s1, which is an e_assign
  assign pll_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign pll_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign pll_s1_master_qreq_vector = 1;

  //pll_s1_reset_n assignment, which is an e_assign
  assign pll_s1_reset_n = reset_n;

  //assign pll_s1_resetrequest_from_sa = pll_s1_resetrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign pll_s1_resetrequest_from_sa = pll_s1_resetrequest;

  assign pll_s1_chipselect = DE4_SOPC_clock_0_out_granted_pll_s1;
  //pll_s1_firsttransfer first transaction, which is an e_assign
  assign pll_s1_firsttransfer = pll_s1_begins_xfer ? pll_s1_unreg_firsttransfer : pll_s1_reg_firsttransfer;

  //pll_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign pll_s1_unreg_firsttransfer = ~(pll_s1_slavearbiterlockenable & pll_s1_any_continuerequest);

  //pll_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          pll_s1_reg_firsttransfer <= 1'b1;
      else if (pll_s1_begins_xfer)
          pll_s1_reg_firsttransfer <= pll_s1_unreg_firsttransfer;
    end


  //pll_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign pll_s1_beginbursttransfer_internal = pll_s1_begins_xfer;

  //pll_s1_read assignment, which is an e_mux
  assign pll_s1_read = DE4_SOPC_clock_0_out_granted_pll_s1 & DE4_SOPC_clock_0_out_read;

  //pll_s1_write assignment, which is an e_mux
  assign pll_s1_write = DE4_SOPC_clock_0_out_granted_pll_s1 & DE4_SOPC_clock_0_out_write;

  //pll_s1_address mux, which is an e_mux
  assign pll_s1_address = DE4_SOPC_clock_0_out_nativeaddress;

  //d1_pll_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_pll_s1_end_xfer <= 1;
      else 
        d1_pll_s1_end_xfer <= pll_s1_end_xfer;
    end


  //pll_s1_waits_for_read in a cycle, which is an e_mux
  assign pll_s1_waits_for_read = pll_s1_in_a_read_cycle & pll_s1_begins_xfer;

  //pll_s1_in_a_read_cycle assignment, which is an e_assign
  assign pll_s1_in_a_read_cycle = DE4_SOPC_clock_0_out_granted_pll_s1 & DE4_SOPC_clock_0_out_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = pll_s1_in_a_read_cycle;

  //pll_s1_waits_for_write in a cycle, which is an e_mux
  assign pll_s1_waits_for_write = pll_s1_in_a_write_cycle & 0;

  //pll_s1_in_a_write_cycle assignment, which is an e_assign
  assign pll_s1_in_a_write_cycle = DE4_SOPC_clock_0_out_granted_pll_s1 & DE4_SOPC_clock_0_out_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = pll_s1_in_a_write_cycle;

  assign wait_for_pll_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //pll/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module seven_seg_pio_s1_arbitrator (
                                     // inputs:
                                      clk,
                                      peripheral_clock_crossing_m1_address_to_slave,
                                      peripheral_clock_crossing_m1_latency_counter,
                                      peripheral_clock_crossing_m1_nativeaddress,
                                      peripheral_clock_crossing_m1_read,
                                      peripheral_clock_crossing_m1_write,
                                      peripheral_clock_crossing_m1_writedata,
                                      reset_n,
                                      seven_seg_pio_s1_readdata,

                                     // outputs:
                                      d1_seven_seg_pio_s1_end_xfer,
                                      peripheral_clock_crossing_m1_granted_seven_seg_pio_s1,
                                      peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1,
                                      peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1,
                                      peripheral_clock_crossing_m1_requests_seven_seg_pio_s1,
                                      seven_seg_pio_s1_address,
                                      seven_seg_pio_s1_chipselect,
                                      seven_seg_pio_s1_readdata_from_sa,
                                      seven_seg_pio_s1_reset_n,
                                      seven_seg_pio_s1_write_n,
                                      seven_seg_pio_s1_writedata
                                   )
;

  output           d1_seven_seg_pio_s1_end_xfer;
  output           peripheral_clock_crossing_m1_granted_seven_seg_pio_s1;
  output           peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1;
  output           peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1;
  output           peripheral_clock_crossing_m1_requests_seven_seg_pio_s1;
  output  [  1: 0] seven_seg_pio_s1_address;
  output           seven_seg_pio_s1_chipselect;
  output  [ 31: 0] seven_seg_pio_s1_readdata_from_sa;
  output           seven_seg_pio_s1_reset_n;
  output           seven_seg_pio_s1_write_n;
  output  [ 31: 0] seven_seg_pio_s1_writedata;
  input            clk;
  input   [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  input            peripheral_clock_crossing_m1_latency_counter;
  input   [ 27: 0] peripheral_clock_crossing_m1_nativeaddress;
  input            peripheral_clock_crossing_m1_read;
  input            peripheral_clock_crossing_m1_write;
  input   [ 31: 0] peripheral_clock_crossing_m1_writedata;
  input            reset_n;
  input   [ 31: 0] seven_seg_pio_s1_readdata;

  reg              d1_reasons_to_wait;
  reg              d1_seven_seg_pio_s1_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_seven_seg_pio_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             peripheral_clock_crossing_m1_arbiterlock;
  wire             peripheral_clock_crossing_m1_arbiterlock2;
  wire             peripheral_clock_crossing_m1_continuerequest;
  wire             peripheral_clock_crossing_m1_granted_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_saved_grant_seven_seg_pio_s1;
  wire    [  1: 0] seven_seg_pio_s1_address;
  wire             seven_seg_pio_s1_allgrants;
  wire             seven_seg_pio_s1_allow_new_arb_cycle;
  wire             seven_seg_pio_s1_any_bursting_master_saved_grant;
  wire             seven_seg_pio_s1_any_continuerequest;
  wire             seven_seg_pio_s1_arb_counter_enable;
  reg              seven_seg_pio_s1_arb_share_counter;
  wire             seven_seg_pio_s1_arb_share_counter_next_value;
  wire             seven_seg_pio_s1_arb_share_set_values;
  wire             seven_seg_pio_s1_beginbursttransfer_internal;
  wire             seven_seg_pio_s1_begins_xfer;
  wire             seven_seg_pio_s1_chipselect;
  wire             seven_seg_pio_s1_end_xfer;
  wire             seven_seg_pio_s1_firsttransfer;
  wire             seven_seg_pio_s1_grant_vector;
  wire             seven_seg_pio_s1_in_a_read_cycle;
  wire             seven_seg_pio_s1_in_a_write_cycle;
  wire             seven_seg_pio_s1_master_qreq_vector;
  wire             seven_seg_pio_s1_non_bursting_master_requests;
  wire    [ 31: 0] seven_seg_pio_s1_readdata_from_sa;
  reg              seven_seg_pio_s1_reg_firsttransfer;
  wire             seven_seg_pio_s1_reset_n;
  reg              seven_seg_pio_s1_slavearbiterlockenable;
  wire             seven_seg_pio_s1_slavearbiterlockenable2;
  wire             seven_seg_pio_s1_unreg_firsttransfer;
  wire             seven_seg_pio_s1_waits_for_read;
  wire             seven_seg_pio_s1_waits_for_write;
  wire             seven_seg_pio_s1_write_n;
  wire    [ 31: 0] seven_seg_pio_s1_writedata;
  wire             wait_for_seven_seg_pio_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~seven_seg_pio_s1_end_xfer;
    end


  assign seven_seg_pio_s1_begins_xfer = ~d1_reasons_to_wait & ((peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1));
  //assign seven_seg_pio_s1_readdata_from_sa = seven_seg_pio_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign seven_seg_pio_s1_readdata_from_sa = seven_seg_pio_s1_readdata;

  assign peripheral_clock_crossing_m1_requests_seven_seg_pio_s1 = ({peripheral_clock_crossing_m1_address_to_slave[29 : 4] , 4'b0} == 30'h30000060) & (peripheral_clock_crossing_m1_read | peripheral_clock_crossing_m1_write);
  //seven_seg_pio_s1_arb_share_counter set values, which is an e_mux
  assign seven_seg_pio_s1_arb_share_set_values = 1;

  //seven_seg_pio_s1_non_bursting_master_requests mux, which is an e_mux
  assign seven_seg_pio_s1_non_bursting_master_requests = peripheral_clock_crossing_m1_requests_seven_seg_pio_s1;

  //seven_seg_pio_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign seven_seg_pio_s1_any_bursting_master_saved_grant = 0;

  //seven_seg_pio_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign seven_seg_pio_s1_arb_share_counter_next_value = seven_seg_pio_s1_firsttransfer ? (seven_seg_pio_s1_arb_share_set_values - 1) : |seven_seg_pio_s1_arb_share_counter ? (seven_seg_pio_s1_arb_share_counter - 1) : 0;

  //seven_seg_pio_s1_allgrants all slave grants, which is an e_mux
  assign seven_seg_pio_s1_allgrants = |seven_seg_pio_s1_grant_vector;

  //seven_seg_pio_s1_end_xfer assignment, which is an e_assign
  assign seven_seg_pio_s1_end_xfer = ~(seven_seg_pio_s1_waits_for_read | seven_seg_pio_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_seven_seg_pio_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_seven_seg_pio_s1 = seven_seg_pio_s1_end_xfer & (~seven_seg_pio_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //seven_seg_pio_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign seven_seg_pio_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_seven_seg_pio_s1 & seven_seg_pio_s1_allgrants) | (end_xfer_arb_share_counter_term_seven_seg_pio_s1 & ~seven_seg_pio_s1_non_bursting_master_requests);

  //seven_seg_pio_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          seven_seg_pio_s1_arb_share_counter <= 0;
      else if (seven_seg_pio_s1_arb_counter_enable)
          seven_seg_pio_s1_arb_share_counter <= seven_seg_pio_s1_arb_share_counter_next_value;
    end


  //seven_seg_pio_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          seven_seg_pio_s1_slavearbiterlockenable <= 0;
      else if ((|seven_seg_pio_s1_master_qreq_vector & end_xfer_arb_share_counter_term_seven_seg_pio_s1) | (end_xfer_arb_share_counter_term_seven_seg_pio_s1 & ~seven_seg_pio_s1_non_bursting_master_requests))
          seven_seg_pio_s1_slavearbiterlockenable <= |seven_seg_pio_s1_arb_share_counter_next_value;
    end


  //peripheral_clock_crossing/m1 seven_seg_pio/s1 arbiterlock, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock = seven_seg_pio_s1_slavearbiterlockenable & peripheral_clock_crossing_m1_continuerequest;

  //seven_seg_pio_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign seven_seg_pio_s1_slavearbiterlockenable2 = |seven_seg_pio_s1_arb_share_counter_next_value;

  //peripheral_clock_crossing/m1 seven_seg_pio/s1 arbiterlock2, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock2 = seven_seg_pio_s1_slavearbiterlockenable2 & peripheral_clock_crossing_m1_continuerequest;

  //seven_seg_pio_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign seven_seg_pio_s1_any_continuerequest = 1;

  //peripheral_clock_crossing_m1_continuerequest continued request, which is an e_assign
  assign peripheral_clock_crossing_m1_continuerequest = 1;

  assign peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 = peripheral_clock_crossing_m1_requests_seven_seg_pio_s1 & ~((peripheral_clock_crossing_m1_read & ((peripheral_clock_crossing_m1_latency_counter != 0))));
  //local readdatavalid peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1, which is an e_mux
  assign peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1 = peripheral_clock_crossing_m1_granted_seven_seg_pio_s1 & peripheral_clock_crossing_m1_read & ~seven_seg_pio_s1_waits_for_read;

  //seven_seg_pio_s1_writedata mux, which is an e_mux
  assign seven_seg_pio_s1_writedata = peripheral_clock_crossing_m1_writedata;

  //master is always granted when requested
  assign peripheral_clock_crossing_m1_granted_seven_seg_pio_s1 = peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1;

  //peripheral_clock_crossing/m1 saved-grant seven_seg_pio/s1, which is an e_assign
  assign peripheral_clock_crossing_m1_saved_grant_seven_seg_pio_s1 = peripheral_clock_crossing_m1_requests_seven_seg_pio_s1;

  //allow new arb cycle for seven_seg_pio/s1, which is an e_assign
  assign seven_seg_pio_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign seven_seg_pio_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign seven_seg_pio_s1_master_qreq_vector = 1;

  //seven_seg_pio_s1_reset_n assignment, which is an e_assign
  assign seven_seg_pio_s1_reset_n = reset_n;

  assign seven_seg_pio_s1_chipselect = peripheral_clock_crossing_m1_granted_seven_seg_pio_s1;
  //seven_seg_pio_s1_firsttransfer first transaction, which is an e_assign
  assign seven_seg_pio_s1_firsttransfer = seven_seg_pio_s1_begins_xfer ? seven_seg_pio_s1_unreg_firsttransfer : seven_seg_pio_s1_reg_firsttransfer;

  //seven_seg_pio_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign seven_seg_pio_s1_unreg_firsttransfer = ~(seven_seg_pio_s1_slavearbiterlockenable & seven_seg_pio_s1_any_continuerequest);

  //seven_seg_pio_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          seven_seg_pio_s1_reg_firsttransfer <= 1'b1;
      else if (seven_seg_pio_s1_begins_xfer)
          seven_seg_pio_s1_reg_firsttransfer <= seven_seg_pio_s1_unreg_firsttransfer;
    end


  //seven_seg_pio_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign seven_seg_pio_s1_beginbursttransfer_internal = seven_seg_pio_s1_begins_xfer;

  //~seven_seg_pio_s1_write_n assignment, which is an e_mux
  assign seven_seg_pio_s1_write_n = ~(peripheral_clock_crossing_m1_granted_seven_seg_pio_s1 & peripheral_clock_crossing_m1_write);

  //seven_seg_pio_s1_address mux, which is an e_mux
  assign seven_seg_pio_s1_address = peripheral_clock_crossing_m1_nativeaddress;

  //d1_seven_seg_pio_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_seven_seg_pio_s1_end_xfer <= 1;
      else 
        d1_seven_seg_pio_s1_end_xfer <= seven_seg_pio_s1_end_xfer;
    end


  //seven_seg_pio_s1_waits_for_read in a cycle, which is an e_mux
  assign seven_seg_pio_s1_waits_for_read = seven_seg_pio_s1_in_a_read_cycle & seven_seg_pio_s1_begins_xfer;

  //seven_seg_pio_s1_in_a_read_cycle assignment, which is an e_assign
  assign seven_seg_pio_s1_in_a_read_cycle = peripheral_clock_crossing_m1_granted_seven_seg_pio_s1 & peripheral_clock_crossing_m1_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = seven_seg_pio_s1_in_a_read_cycle;

  //seven_seg_pio_s1_waits_for_write in a cycle, which is an e_mux
  assign seven_seg_pio_s1_waits_for_write = seven_seg_pio_s1_in_a_write_cycle & 0;

  //seven_seg_pio_s1_in_a_write_cycle assignment, which is an e_assign
  assign seven_seg_pio_s1_in_a_write_cycle = peripheral_clock_crossing_m1_granted_seven_seg_pio_s1 & peripheral_clock_crossing_m1_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = seven_seg_pio_s1_in_a_write_cycle;

  assign wait_for_seven_seg_pio_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //seven_seg_pio/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module sw_pio_s1_arbitrator (
                              // inputs:
                               clk,
                               peripheral_clock_crossing_m1_address_to_slave,
                               peripheral_clock_crossing_m1_latency_counter,
                               peripheral_clock_crossing_m1_nativeaddress,
                               peripheral_clock_crossing_m1_read,
                               peripheral_clock_crossing_m1_write,
                               reset_n,
                               sw_pio_s1_readdata,

                              // outputs:
                               d1_sw_pio_s1_end_xfer,
                               peripheral_clock_crossing_m1_granted_sw_pio_s1,
                               peripheral_clock_crossing_m1_qualified_request_sw_pio_s1,
                               peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1,
                               peripheral_clock_crossing_m1_requests_sw_pio_s1,
                               sw_pio_s1_address,
                               sw_pio_s1_readdata_from_sa,
                               sw_pio_s1_reset_n
                            )
;

  output           d1_sw_pio_s1_end_xfer;
  output           peripheral_clock_crossing_m1_granted_sw_pio_s1;
  output           peripheral_clock_crossing_m1_qualified_request_sw_pio_s1;
  output           peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1;
  output           peripheral_clock_crossing_m1_requests_sw_pio_s1;
  output  [  1: 0] sw_pio_s1_address;
  output  [ 31: 0] sw_pio_s1_readdata_from_sa;
  output           sw_pio_s1_reset_n;
  input            clk;
  input   [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  input            peripheral_clock_crossing_m1_latency_counter;
  input   [ 27: 0] peripheral_clock_crossing_m1_nativeaddress;
  input            peripheral_clock_crossing_m1_read;
  input            peripheral_clock_crossing_m1_write;
  input            reset_n;
  input   [ 31: 0] sw_pio_s1_readdata;

  reg              d1_reasons_to_wait;
  reg              d1_sw_pio_s1_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_sw_pio_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             peripheral_clock_crossing_m1_arbiterlock;
  wire             peripheral_clock_crossing_m1_arbiterlock2;
  wire             peripheral_clock_crossing_m1_continuerequest;
  wire             peripheral_clock_crossing_m1_granted_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_saved_grant_sw_pio_s1;
  wire    [  1: 0] sw_pio_s1_address;
  wire             sw_pio_s1_allgrants;
  wire             sw_pio_s1_allow_new_arb_cycle;
  wire             sw_pio_s1_any_bursting_master_saved_grant;
  wire             sw_pio_s1_any_continuerequest;
  wire             sw_pio_s1_arb_counter_enable;
  reg              sw_pio_s1_arb_share_counter;
  wire             sw_pio_s1_arb_share_counter_next_value;
  wire             sw_pio_s1_arb_share_set_values;
  wire             sw_pio_s1_beginbursttransfer_internal;
  wire             sw_pio_s1_begins_xfer;
  wire             sw_pio_s1_end_xfer;
  wire             sw_pio_s1_firsttransfer;
  wire             sw_pio_s1_grant_vector;
  wire             sw_pio_s1_in_a_read_cycle;
  wire             sw_pio_s1_in_a_write_cycle;
  wire             sw_pio_s1_master_qreq_vector;
  wire             sw_pio_s1_non_bursting_master_requests;
  wire    [ 31: 0] sw_pio_s1_readdata_from_sa;
  reg              sw_pio_s1_reg_firsttransfer;
  wire             sw_pio_s1_reset_n;
  reg              sw_pio_s1_slavearbiterlockenable;
  wire             sw_pio_s1_slavearbiterlockenable2;
  wire             sw_pio_s1_unreg_firsttransfer;
  wire             sw_pio_s1_waits_for_read;
  wire             sw_pio_s1_waits_for_write;
  wire             wait_for_sw_pio_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~sw_pio_s1_end_xfer;
    end


  assign sw_pio_s1_begins_xfer = ~d1_reasons_to_wait & ((peripheral_clock_crossing_m1_qualified_request_sw_pio_s1));
  //assign sw_pio_s1_readdata_from_sa = sw_pio_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign sw_pio_s1_readdata_from_sa = sw_pio_s1_readdata;

  assign peripheral_clock_crossing_m1_requests_sw_pio_s1 = (({peripheral_clock_crossing_m1_address_to_slave[29 : 4] , 4'b0} == 30'h30000020) & (peripheral_clock_crossing_m1_read | peripheral_clock_crossing_m1_write)) & peripheral_clock_crossing_m1_read;
  //sw_pio_s1_arb_share_counter set values, which is an e_mux
  assign sw_pio_s1_arb_share_set_values = 1;

  //sw_pio_s1_non_bursting_master_requests mux, which is an e_mux
  assign sw_pio_s1_non_bursting_master_requests = peripheral_clock_crossing_m1_requests_sw_pio_s1;

  //sw_pio_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign sw_pio_s1_any_bursting_master_saved_grant = 0;

  //sw_pio_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign sw_pio_s1_arb_share_counter_next_value = sw_pio_s1_firsttransfer ? (sw_pio_s1_arb_share_set_values - 1) : |sw_pio_s1_arb_share_counter ? (sw_pio_s1_arb_share_counter - 1) : 0;

  //sw_pio_s1_allgrants all slave grants, which is an e_mux
  assign sw_pio_s1_allgrants = |sw_pio_s1_grant_vector;

  //sw_pio_s1_end_xfer assignment, which is an e_assign
  assign sw_pio_s1_end_xfer = ~(sw_pio_s1_waits_for_read | sw_pio_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_sw_pio_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_sw_pio_s1 = sw_pio_s1_end_xfer & (~sw_pio_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //sw_pio_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign sw_pio_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_sw_pio_s1 & sw_pio_s1_allgrants) | (end_xfer_arb_share_counter_term_sw_pio_s1 & ~sw_pio_s1_non_bursting_master_requests);

  //sw_pio_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sw_pio_s1_arb_share_counter <= 0;
      else if (sw_pio_s1_arb_counter_enable)
          sw_pio_s1_arb_share_counter <= sw_pio_s1_arb_share_counter_next_value;
    end


  //sw_pio_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sw_pio_s1_slavearbiterlockenable <= 0;
      else if ((|sw_pio_s1_master_qreq_vector & end_xfer_arb_share_counter_term_sw_pio_s1) | (end_xfer_arb_share_counter_term_sw_pio_s1 & ~sw_pio_s1_non_bursting_master_requests))
          sw_pio_s1_slavearbiterlockenable <= |sw_pio_s1_arb_share_counter_next_value;
    end


  //peripheral_clock_crossing/m1 sw_pio/s1 arbiterlock, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock = sw_pio_s1_slavearbiterlockenable & peripheral_clock_crossing_m1_continuerequest;

  //sw_pio_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign sw_pio_s1_slavearbiterlockenable2 = |sw_pio_s1_arb_share_counter_next_value;

  //peripheral_clock_crossing/m1 sw_pio/s1 arbiterlock2, which is an e_assign
  assign peripheral_clock_crossing_m1_arbiterlock2 = sw_pio_s1_slavearbiterlockenable2 & peripheral_clock_crossing_m1_continuerequest;

  //sw_pio_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign sw_pio_s1_any_continuerequest = 1;

  //peripheral_clock_crossing_m1_continuerequest continued request, which is an e_assign
  assign peripheral_clock_crossing_m1_continuerequest = 1;

  assign peripheral_clock_crossing_m1_qualified_request_sw_pio_s1 = peripheral_clock_crossing_m1_requests_sw_pio_s1 & ~((peripheral_clock_crossing_m1_read & ((peripheral_clock_crossing_m1_latency_counter != 0))));
  //local readdatavalid peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1, which is an e_mux
  assign peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1 = peripheral_clock_crossing_m1_granted_sw_pio_s1 & peripheral_clock_crossing_m1_read & ~sw_pio_s1_waits_for_read;

  //master is always granted when requested
  assign peripheral_clock_crossing_m1_granted_sw_pio_s1 = peripheral_clock_crossing_m1_qualified_request_sw_pio_s1;

  //peripheral_clock_crossing/m1 saved-grant sw_pio/s1, which is an e_assign
  assign peripheral_clock_crossing_m1_saved_grant_sw_pio_s1 = peripheral_clock_crossing_m1_requests_sw_pio_s1;

  //allow new arb cycle for sw_pio/s1, which is an e_assign
  assign sw_pio_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign sw_pio_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign sw_pio_s1_master_qreq_vector = 1;

  //sw_pio_s1_reset_n assignment, which is an e_assign
  assign sw_pio_s1_reset_n = reset_n;

  //sw_pio_s1_firsttransfer first transaction, which is an e_assign
  assign sw_pio_s1_firsttransfer = sw_pio_s1_begins_xfer ? sw_pio_s1_unreg_firsttransfer : sw_pio_s1_reg_firsttransfer;

  //sw_pio_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign sw_pio_s1_unreg_firsttransfer = ~(sw_pio_s1_slavearbiterlockenable & sw_pio_s1_any_continuerequest);

  //sw_pio_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sw_pio_s1_reg_firsttransfer <= 1'b1;
      else if (sw_pio_s1_begins_xfer)
          sw_pio_s1_reg_firsttransfer <= sw_pio_s1_unreg_firsttransfer;
    end


  //sw_pio_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign sw_pio_s1_beginbursttransfer_internal = sw_pio_s1_begins_xfer;

  //sw_pio_s1_address mux, which is an e_mux
  assign sw_pio_s1_address = peripheral_clock_crossing_m1_nativeaddress;

  //d1_sw_pio_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_sw_pio_s1_end_xfer <= 1;
      else 
        d1_sw_pio_s1_end_xfer <= sw_pio_s1_end_xfer;
    end


  //sw_pio_s1_waits_for_read in a cycle, which is an e_mux
  assign sw_pio_s1_waits_for_read = sw_pio_s1_in_a_read_cycle & sw_pio_s1_begins_xfer;

  //sw_pio_s1_in_a_read_cycle assignment, which is an e_assign
  assign sw_pio_s1_in_a_read_cycle = peripheral_clock_crossing_m1_granted_sw_pio_s1 & peripheral_clock_crossing_m1_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = sw_pio_s1_in_a_read_cycle;

  //sw_pio_s1_waits_for_write in a cycle, which is an e_mux
  assign sw_pio_s1_waits_for_write = sw_pio_s1_in_a_write_cycle & 0;

  //sw_pio_s1_in_a_write_cycle assignment, which is an e_assign
  assign sw_pio_s1_in_a_write_cycle = peripheral_clock_crossing_m1_granted_sw_pio_s1 & peripheral_clock_crossing_m1_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = sw_pio_s1_in_a_write_cycle;

  assign wait_for_sw_pio_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //sw_pio/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module sys_timer_s1_arbitrator (
                                 // inputs:
                                  clk,
                                  master_0_latency_counter,
                                  master_0_master_address_to_slave,
                                  master_0_master_read,
                                  master_0_master_write,
                                  master_0_master_writedata,
                                  master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                  reset_n,
                                  sys_timer_s1_readdata,

                                 // outputs:
                                  d1_sys_timer_s1_end_xfer,
                                  master_0_granted_sys_timer_s1,
                                  master_0_qualified_request_sys_timer_s1,
                                  master_0_read_data_valid_sys_timer_s1,
                                  master_0_requests_sys_timer_s1,
                                  sys_timer_s1_address,
                                  sys_timer_s1_chipselect,
                                  sys_timer_s1_readdata_from_sa,
                                  sys_timer_s1_reset_n,
                                  sys_timer_s1_write_n,
                                  sys_timer_s1_writedata
                               )
;

  output           d1_sys_timer_s1_end_xfer;
  output           master_0_granted_sys_timer_s1;
  output           master_0_qualified_request_sys_timer_s1;
  output           master_0_read_data_valid_sys_timer_s1;
  output           master_0_requests_sys_timer_s1;
  output  [  2: 0] sys_timer_s1_address;
  output           sys_timer_s1_chipselect;
  output  [ 15: 0] sys_timer_s1_readdata_from_sa;
  output           sys_timer_s1_reset_n;
  output           sys_timer_s1_write_n;
  output  [ 15: 0] sys_timer_s1_writedata;
  input            clk;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;
  input   [ 15: 0] sys_timer_s1_readdata;

  reg              d1_reasons_to_wait;
  reg              d1_sys_timer_s1_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_sys_timer_s1;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             master_0_granted_sys_timer_s1;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_sys_timer_s1;
  wire             master_0_read_data_valid_sys_timer_s1;
  wire             master_0_requests_sys_timer_s1;
  wire             master_0_saved_grant_sys_timer_s1;
  wire    [ 31: 0] shifted_address_to_sys_timer_s1_from_master_0_master;
  wire    [  2: 0] sys_timer_s1_address;
  wire             sys_timer_s1_allgrants;
  wire             sys_timer_s1_allow_new_arb_cycle;
  wire             sys_timer_s1_any_bursting_master_saved_grant;
  wire             sys_timer_s1_any_continuerequest;
  wire             sys_timer_s1_arb_counter_enable;
  reg              sys_timer_s1_arb_share_counter;
  wire             sys_timer_s1_arb_share_counter_next_value;
  wire             sys_timer_s1_arb_share_set_values;
  wire             sys_timer_s1_beginbursttransfer_internal;
  wire             sys_timer_s1_begins_xfer;
  wire             sys_timer_s1_chipselect;
  wire             sys_timer_s1_end_xfer;
  wire             sys_timer_s1_firsttransfer;
  wire             sys_timer_s1_grant_vector;
  wire             sys_timer_s1_in_a_read_cycle;
  wire             sys_timer_s1_in_a_write_cycle;
  wire             sys_timer_s1_master_qreq_vector;
  wire             sys_timer_s1_non_bursting_master_requests;
  wire    [ 15: 0] sys_timer_s1_readdata_from_sa;
  reg              sys_timer_s1_reg_firsttransfer;
  wire             sys_timer_s1_reset_n;
  reg              sys_timer_s1_slavearbiterlockenable;
  wire             sys_timer_s1_slavearbiterlockenable2;
  wire             sys_timer_s1_unreg_firsttransfer;
  wire             sys_timer_s1_waits_for_read;
  wire             sys_timer_s1_waits_for_write;
  wire             sys_timer_s1_write_n;
  wire    [ 15: 0] sys_timer_s1_writedata;
  wire             wait_for_sys_timer_s1_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~sys_timer_s1_end_xfer;
    end


  assign sys_timer_s1_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_sys_timer_s1));
  //assign sys_timer_s1_readdata_from_sa = sys_timer_s1_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign sys_timer_s1_readdata_from_sa = sys_timer_s1_readdata;

  assign master_0_requests_sys_timer_s1 = ({master_0_master_address_to_slave[31 : 5] , 5'b0} == 32'h21001000) & (master_0_master_read | master_0_master_write);
  //sys_timer_s1_arb_share_counter set values, which is an e_mux
  assign sys_timer_s1_arb_share_set_values = 1;

  //sys_timer_s1_non_bursting_master_requests mux, which is an e_mux
  assign sys_timer_s1_non_bursting_master_requests = master_0_requests_sys_timer_s1;

  //sys_timer_s1_any_bursting_master_saved_grant mux, which is an e_mux
  assign sys_timer_s1_any_bursting_master_saved_grant = 0;

  //sys_timer_s1_arb_share_counter_next_value assignment, which is an e_assign
  assign sys_timer_s1_arb_share_counter_next_value = sys_timer_s1_firsttransfer ? (sys_timer_s1_arb_share_set_values - 1) : |sys_timer_s1_arb_share_counter ? (sys_timer_s1_arb_share_counter - 1) : 0;

  //sys_timer_s1_allgrants all slave grants, which is an e_mux
  assign sys_timer_s1_allgrants = |sys_timer_s1_grant_vector;

  //sys_timer_s1_end_xfer assignment, which is an e_assign
  assign sys_timer_s1_end_xfer = ~(sys_timer_s1_waits_for_read | sys_timer_s1_waits_for_write);

  //end_xfer_arb_share_counter_term_sys_timer_s1 arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_sys_timer_s1 = sys_timer_s1_end_xfer & (~sys_timer_s1_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //sys_timer_s1_arb_share_counter arbitration counter enable, which is an e_assign
  assign sys_timer_s1_arb_counter_enable = (end_xfer_arb_share_counter_term_sys_timer_s1 & sys_timer_s1_allgrants) | (end_xfer_arb_share_counter_term_sys_timer_s1 & ~sys_timer_s1_non_bursting_master_requests);

  //sys_timer_s1_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sys_timer_s1_arb_share_counter <= 0;
      else if (sys_timer_s1_arb_counter_enable)
          sys_timer_s1_arb_share_counter <= sys_timer_s1_arb_share_counter_next_value;
    end


  //sys_timer_s1_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sys_timer_s1_slavearbiterlockenable <= 0;
      else if ((|sys_timer_s1_master_qreq_vector & end_xfer_arb_share_counter_term_sys_timer_s1) | (end_xfer_arb_share_counter_term_sys_timer_s1 & ~sys_timer_s1_non_bursting_master_requests))
          sys_timer_s1_slavearbiterlockenable <= |sys_timer_s1_arb_share_counter_next_value;
    end


  //master_0/master sys_timer/s1 arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = sys_timer_s1_slavearbiterlockenable & master_0_master_continuerequest;

  //sys_timer_s1_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign sys_timer_s1_slavearbiterlockenable2 = |sys_timer_s1_arb_share_counter_next_value;

  //master_0/master sys_timer/s1 arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = sys_timer_s1_slavearbiterlockenable2 & master_0_master_continuerequest;

  //sys_timer_s1_any_continuerequest at least one master continues requesting, which is an e_assign
  assign sys_timer_s1_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_sys_timer_s1 = master_0_requests_sys_timer_s1 & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))));
  //local readdatavalid master_0_read_data_valid_sys_timer_s1, which is an e_mux
  assign master_0_read_data_valid_sys_timer_s1 = master_0_granted_sys_timer_s1 & master_0_master_read & ~sys_timer_s1_waits_for_read;

  //sys_timer_s1_writedata mux, which is an e_mux
  assign sys_timer_s1_writedata = master_0_master_writedata;

  //master is always granted when requested
  assign master_0_granted_sys_timer_s1 = master_0_qualified_request_sys_timer_s1;

  //master_0/master saved-grant sys_timer/s1, which is an e_assign
  assign master_0_saved_grant_sys_timer_s1 = master_0_requests_sys_timer_s1;

  //allow new arb cycle for sys_timer/s1, which is an e_assign
  assign sys_timer_s1_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign sys_timer_s1_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign sys_timer_s1_master_qreq_vector = 1;

  //sys_timer_s1_reset_n assignment, which is an e_assign
  assign sys_timer_s1_reset_n = reset_n;

  assign sys_timer_s1_chipselect = master_0_granted_sys_timer_s1;
  //sys_timer_s1_firsttransfer first transaction, which is an e_assign
  assign sys_timer_s1_firsttransfer = sys_timer_s1_begins_xfer ? sys_timer_s1_unreg_firsttransfer : sys_timer_s1_reg_firsttransfer;

  //sys_timer_s1_unreg_firsttransfer first transaction, which is an e_assign
  assign sys_timer_s1_unreg_firsttransfer = ~(sys_timer_s1_slavearbiterlockenable & sys_timer_s1_any_continuerequest);

  //sys_timer_s1_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sys_timer_s1_reg_firsttransfer <= 1'b1;
      else if (sys_timer_s1_begins_xfer)
          sys_timer_s1_reg_firsttransfer <= sys_timer_s1_unreg_firsttransfer;
    end


  //sys_timer_s1_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign sys_timer_s1_beginbursttransfer_internal = sys_timer_s1_begins_xfer;

  //~sys_timer_s1_write_n assignment, which is an e_mux
  assign sys_timer_s1_write_n = ~(master_0_granted_sys_timer_s1 & master_0_master_write);

  assign shifted_address_to_sys_timer_s1_from_master_0_master = master_0_master_address_to_slave;
  //sys_timer_s1_address mux, which is an e_mux
  assign sys_timer_s1_address = shifted_address_to_sys_timer_s1_from_master_0_master >> 2;

  //d1_sys_timer_s1_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_sys_timer_s1_end_xfer <= 1;
      else 
        d1_sys_timer_s1_end_xfer <= sys_timer_s1_end_xfer;
    end


  //sys_timer_s1_waits_for_read in a cycle, which is an e_mux
  assign sys_timer_s1_waits_for_read = sys_timer_s1_in_a_read_cycle & sys_timer_s1_begins_xfer;

  //sys_timer_s1_in_a_read_cycle assignment, which is an e_assign
  assign sys_timer_s1_in_a_read_cycle = master_0_granted_sys_timer_s1 & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = sys_timer_s1_in_a_read_cycle;

  //sys_timer_s1_waits_for_write in a cycle, which is an e_mux
  assign sys_timer_s1_waits_for_write = sys_timer_s1_in_a_write_cycle & 0;

  //sys_timer_s1_in_a_write_cycle assignment, which is an e_assign
  assign sys_timer_s1_in_a_write_cycle = master_0_granted_sys_timer_s1 & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = sys_timer_s1_in_a_write_cycle;

  assign wait_for_sys_timer_s1_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //sys_timer/s1 enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module sysid_control_slave_arbitrator (
                                        // inputs:
                                         clk,
                                         master_0_latency_counter,
                                         master_0_master_address_to_slave,
                                         master_0_master_read,
                                         master_0_master_write,
                                         master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                         reset_n,
                                         sysid_control_slave_readdata,

                                        // outputs:
                                         d1_sysid_control_slave_end_xfer,
                                         master_0_granted_sysid_control_slave,
                                         master_0_qualified_request_sysid_control_slave,
                                         master_0_read_data_valid_sysid_control_slave,
                                         master_0_requests_sysid_control_slave,
                                         sysid_control_slave_address,
                                         sysid_control_slave_readdata_from_sa,
                                         sysid_control_slave_reset_n
                                      )
;

  output           d1_sysid_control_slave_end_xfer;
  output           master_0_granted_sysid_control_slave;
  output           master_0_qualified_request_sysid_control_slave;
  output           master_0_read_data_valid_sysid_control_slave;
  output           master_0_requests_sysid_control_slave;
  output           sysid_control_slave_address;
  output  [ 31: 0] sysid_control_slave_readdata_from_sa;
  output           sysid_control_slave_reset_n;
  input            clk;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;
  input   [ 31: 0] sysid_control_slave_readdata;

  reg              d1_reasons_to_wait;
  reg              d1_sysid_control_slave_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_sysid_control_slave;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  wire             master_0_granted_sysid_control_slave;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_sysid_control_slave;
  wire             master_0_read_data_valid_sysid_control_slave;
  wire             master_0_requests_sysid_control_slave;
  wire             master_0_saved_grant_sysid_control_slave;
  wire    [ 31: 0] shifted_address_to_sysid_control_slave_from_master_0_master;
  wire             sysid_control_slave_address;
  wire             sysid_control_slave_allgrants;
  wire             sysid_control_slave_allow_new_arb_cycle;
  wire             sysid_control_slave_any_bursting_master_saved_grant;
  wire             sysid_control_slave_any_continuerequest;
  wire             sysid_control_slave_arb_counter_enable;
  reg              sysid_control_slave_arb_share_counter;
  wire             sysid_control_slave_arb_share_counter_next_value;
  wire             sysid_control_slave_arb_share_set_values;
  wire             sysid_control_slave_beginbursttransfer_internal;
  wire             sysid_control_slave_begins_xfer;
  wire             sysid_control_slave_end_xfer;
  wire             sysid_control_slave_firsttransfer;
  wire             sysid_control_slave_grant_vector;
  wire             sysid_control_slave_in_a_read_cycle;
  wire             sysid_control_slave_in_a_write_cycle;
  wire             sysid_control_slave_master_qreq_vector;
  wire             sysid_control_slave_non_bursting_master_requests;
  wire    [ 31: 0] sysid_control_slave_readdata_from_sa;
  reg              sysid_control_slave_reg_firsttransfer;
  wire             sysid_control_slave_reset_n;
  reg              sysid_control_slave_slavearbiterlockenable;
  wire             sysid_control_slave_slavearbiterlockenable2;
  wire             sysid_control_slave_unreg_firsttransfer;
  wire             sysid_control_slave_waits_for_read;
  wire             sysid_control_slave_waits_for_write;
  wire             wait_for_sysid_control_slave_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~sysid_control_slave_end_xfer;
    end


  assign sysid_control_slave_begins_xfer = ~d1_reasons_to_wait & ((master_0_qualified_request_sysid_control_slave));
  //assign sysid_control_slave_readdata_from_sa = sysid_control_slave_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign sysid_control_slave_readdata_from_sa = sysid_control_slave_readdata;

  assign master_0_requests_sysid_control_slave = (({master_0_master_address_to_slave[31 : 3] , 3'b0} == 32'h21001090) & (master_0_master_read | master_0_master_write)) & master_0_master_read;
  //sysid_control_slave_arb_share_counter set values, which is an e_mux
  assign sysid_control_slave_arb_share_set_values = 1;

  //sysid_control_slave_non_bursting_master_requests mux, which is an e_mux
  assign sysid_control_slave_non_bursting_master_requests = master_0_requests_sysid_control_slave;

  //sysid_control_slave_any_bursting_master_saved_grant mux, which is an e_mux
  assign sysid_control_slave_any_bursting_master_saved_grant = 0;

  //sysid_control_slave_arb_share_counter_next_value assignment, which is an e_assign
  assign sysid_control_slave_arb_share_counter_next_value = sysid_control_slave_firsttransfer ? (sysid_control_slave_arb_share_set_values - 1) : |sysid_control_slave_arb_share_counter ? (sysid_control_slave_arb_share_counter - 1) : 0;

  //sysid_control_slave_allgrants all slave grants, which is an e_mux
  assign sysid_control_slave_allgrants = |sysid_control_slave_grant_vector;

  //sysid_control_slave_end_xfer assignment, which is an e_assign
  assign sysid_control_slave_end_xfer = ~(sysid_control_slave_waits_for_read | sysid_control_slave_waits_for_write);

  //end_xfer_arb_share_counter_term_sysid_control_slave arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_sysid_control_slave = sysid_control_slave_end_xfer & (~sysid_control_slave_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //sysid_control_slave_arb_share_counter arbitration counter enable, which is an e_assign
  assign sysid_control_slave_arb_counter_enable = (end_xfer_arb_share_counter_term_sysid_control_slave & sysid_control_slave_allgrants) | (end_xfer_arb_share_counter_term_sysid_control_slave & ~sysid_control_slave_non_bursting_master_requests);

  //sysid_control_slave_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sysid_control_slave_arb_share_counter <= 0;
      else if (sysid_control_slave_arb_counter_enable)
          sysid_control_slave_arb_share_counter <= sysid_control_slave_arb_share_counter_next_value;
    end


  //sysid_control_slave_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sysid_control_slave_slavearbiterlockenable <= 0;
      else if ((|sysid_control_slave_master_qreq_vector & end_xfer_arb_share_counter_term_sysid_control_slave) | (end_xfer_arb_share_counter_term_sysid_control_slave & ~sysid_control_slave_non_bursting_master_requests))
          sysid_control_slave_slavearbiterlockenable <= |sysid_control_slave_arb_share_counter_next_value;
    end


  //master_0/master sysid/control_slave arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = sysid_control_slave_slavearbiterlockenable & master_0_master_continuerequest;

  //sysid_control_slave_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign sysid_control_slave_slavearbiterlockenable2 = |sysid_control_slave_arb_share_counter_next_value;

  //master_0/master sysid/control_slave arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = sysid_control_slave_slavearbiterlockenable2 & master_0_master_continuerequest;

  //sysid_control_slave_any_continuerequest at least one master continues requesting, which is an e_assign
  assign sysid_control_slave_any_continuerequest = 1;

  //master_0_master_continuerequest continued request, which is an e_assign
  assign master_0_master_continuerequest = 1;

  assign master_0_qualified_request_sysid_control_slave = master_0_requests_sysid_control_slave & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))));
  //local readdatavalid master_0_read_data_valid_sysid_control_slave, which is an e_mux
  assign master_0_read_data_valid_sysid_control_slave = master_0_granted_sysid_control_slave & master_0_master_read & ~sysid_control_slave_waits_for_read;

  //master is always granted when requested
  assign master_0_granted_sysid_control_slave = master_0_qualified_request_sysid_control_slave;

  //master_0/master saved-grant sysid/control_slave, which is an e_assign
  assign master_0_saved_grant_sysid_control_slave = master_0_requests_sysid_control_slave;

  //allow new arb cycle for sysid/control_slave, which is an e_assign
  assign sysid_control_slave_allow_new_arb_cycle = 1;

  //placeholder chosen master
  assign sysid_control_slave_grant_vector = 1;

  //placeholder vector of master qualified-requests
  assign sysid_control_slave_master_qreq_vector = 1;

  //sysid_control_slave_reset_n assignment, which is an e_assign
  assign sysid_control_slave_reset_n = reset_n;

  //sysid_control_slave_firsttransfer first transaction, which is an e_assign
  assign sysid_control_slave_firsttransfer = sysid_control_slave_begins_xfer ? sysid_control_slave_unreg_firsttransfer : sysid_control_slave_reg_firsttransfer;

  //sysid_control_slave_unreg_firsttransfer first transaction, which is an e_assign
  assign sysid_control_slave_unreg_firsttransfer = ~(sysid_control_slave_slavearbiterlockenable & sysid_control_slave_any_continuerequest);

  //sysid_control_slave_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          sysid_control_slave_reg_firsttransfer <= 1'b1;
      else if (sysid_control_slave_begins_xfer)
          sysid_control_slave_reg_firsttransfer <= sysid_control_slave_unreg_firsttransfer;
    end


  //sysid_control_slave_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign sysid_control_slave_beginbursttransfer_internal = sysid_control_slave_begins_xfer;

  assign shifted_address_to_sysid_control_slave_from_master_0_master = master_0_master_address_to_slave;
  //sysid_control_slave_address mux, which is an e_mux
  assign sysid_control_slave_address = shifted_address_to_sysid_control_slave_from_master_0_master >> 2;

  //d1_sysid_control_slave_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_sysid_control_slave_end_xfer <= 1;
      else 
        d1_sysid_control_slave_end_xfer <= sysid_control_slave_end_xfer;
    end


  //sysid_control_slave_waits_for_read in a cycle, which is an e_mux
  assign sysid_control_slave_waits_for_read = sysid_control_slave_in_a_read_cycle & sysid_control_slave_begins_xfer;

  //sysid_control_slave_in_a_read_cycle assignment, which is an e_assign
  assign sysid_control_slave_in_a_read_cycle = master_0_granted_sysid_control_slave & master_0_master_read;

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = sysid_control_slave_in_a_read_cycle;

  //sysid_control_slave_waits_for_write in a cycle, which is an e_mux
  assign sysid_control_slave_waits_for_write = sysid_control_slave_in_a_write_cycle & 0;

  //sysid_control_slave_in_a_write_cycle assignment, which is an e_assign
  assign sysid_control_slave_in_a_write_cycle = master_0_granted_sysid_control_slave & master_0_master_write;

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = sysid_control_slave_in_a_write_cycle;

  assign wait_for_sysid_control_slave_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //sysid/control_slave enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac_control_port_arbitrator (
                                         // inputs:
                                          clk,
                                          ethernet_port_interface_0_avalon_master_1_address_to_slave,
                                          ethernet_port_interface_0_avalon_master_1_latency_counter,
                                          ethernet_port_interface_0_avalon_master_1_read,
                                          ethernet_port_interface_0_avalon_master_1_write,
                                          ethernet_port_interface_0_avalon_master_1_writedata,
                                          master_0_latency_counter,
                                          master_0_master_address_to_slave,
                                          master_0_master_read,
                                          master_0_master_write,
                                          master_0_master_writedata,
                                          master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                          reset_n,
                                          tse_mac_control_port_readdata,
                                          tse_mac_control_port_waitrequest,

                                         // outputs:
                                          d1_tse_mac_control_port_end_xfer,
                                          ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port,
                                          ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port,
                                          ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port,
                                          ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port,
                                          master_0_granted_tse_mac_control_port,
                                          master_0_qualified_request_tse_mac_control_port,
                                          master_0_read_data_valid_tse_mac_control_port,
                                          master_0_requests_tse_mac_control_port,
                                          tse_mac_control_port_address,
                                          tse_mac_control_port_read,
                                          tse_mac_control_port_readdata_from_sa,
                                          tse_mac_control_port_reset,
                                          tse_mac_control_port_waitrequest_from_sa,
                                          tse_mac_control_port_write,
                                          tse_mac_control_port_writedata
                                       )
;

  output           d1_tse_mac_control_port_end_xfer;
  output           ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port;
  output           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port;
  output           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port;
  output           ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port;
  output           master_0_granted_tse_mac_control_port;
  output           master_0_qualified_request_tse_mac_control_port;
  output           master_0_read_data_valid_tse_mac_control_port;
  output           master_0_requests_tse_mac_control_port;
  output  [  7: 0] tse_mac_control_port_address;
  output           tse_mac_control_port_read;
  output  [ 31: 0] tse_mac_control_port_readdata_from_sa;
  output           tse_mac_control_port_reset;
  output           tse_mac_control_port_waitrequest_from_sa;
  output           tse_mac_control_port_write;
  output  [ 31: 0] tse_mac_control_port_writedata;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  input            ethernet_port_interface_0_avalon_master_1_latency_counter;
  input            ethernet_port_interface_0_avalon_master_1_read;
  input            ethernet_port_interface_0_avalon_master_1_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;
  input   [ 31: 0] tse_mac_control_port_readdata;
  input            tse_mac_control_port_waitrequest;

  reg              d1_reasons_to_wait;
  reg              d1_tse_mac_control_port_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock2;
  wire             ethernet_port_interface_0_avalon_master_1_continuerequest;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac_control_port;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  reg              last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac_control_port;
  reg              last_cycle_master_0_master_granted_slave_tse_mac_control_port;
  wire             master_0_granted_tse_mac_control_port;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_tse_mac_control_port;
  wire             master_0_read_data_valid_tse_mac_control_port;
  wire             master_0_requests_tse_mac_control_port;
  wire             master_0_saved_grant_tse_mac_control_port;
  wire    [ 31: 0] shifted_address_to_tse_mac_control_port_from_ethernet_port_interface_0_avalon_master_1;
  wire    [ 31: 0] shifted_address_to_tse_mac_control_port_from_master_0_master;
  wire    [  7: 0] tse_mac_control_port_address;
  wire             tse_mac_control_port_allgrants;
  wire             tse_mac_control_port_allow_new_arb_cycle;
  wire             tse_mac_control_port_any_bursting_master_saved_grant;
  wire             tse_mac_control_port_any_continuerequest;
  reg     [  1: 0] tse_mac_control_port_arb_addend;
  wire             tse_mac_control_port_arb_counter_enable;
  reg              tse_mac_control_port_arb_share_counter;
  wire             tse_mac_control_port_arb_share_counter_next_value;
  wire             tse_mac_control_port_arb_share_set_values;
  wire    [  1: 0] tse_mac_control_port_arb_winner;
  wire             tse_mac_control_port_arbitration_holdoff_internal;
  wire             tse_mac_control_port_beginbursttransfer_internal;
  wire             tse_mac_control_port_begins_xfer;
  wire    [  3: 0] tse_mac_control_port_chosen_master_double_vector;
  wire    [  1: 0] tse_mac_control_port_chosen_master_rot_left;
  wire             tse_mac_control_port_end_xfer;
  wire             tse_mac_control_port_firsttransfer;
  wire    [  1: 0] tse_mac_control_port_grant_vector;
  wire             tse_mac_control_port_in_a_read_cycle;
  wire             tse_mac_control_port_in_a_write_cycle;
  wire    [  1: 0] tse_mac_control_port_master_qreq_vector;
  wire             tse_mac_control_port_non_bursting_master_requests;
  wire             tse_mac_control_port_read;
  wire    [ 31: 0] tse_mac_control_port_readdata_from_sa;
  reg              tse_mac_control_port_reg_firsttransfer;
  wire             tse_mac_control_port_reset;
  reg     [  1: 0] tse_mac_control_port_saved_chosen_master_vector;
  reg              tse_mac_control_port_slavearbiterlockenable;
  wire             tse_mac_control_port_slavearbiterlockenable2;
  wire             tse_mac_control_port_unreg_firsttransfer;
  wire             tse_mac_control_port_waitrequest_from_sa;
  wire             tse_mac_control_port_waits_for_read;
  wire             tse_mac_control_port_waits_for_write;
  wire             tse_mac_control_port_write;
  wire    [ 31: 0] tse_mac_control_port_writedata;
  wire             wait_for_tse_mac_control_port_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~tse_mac_control_port_end_xfer;
    end


  assign tse_mac_control_port_begins_xfer = ~d1_reasons_to_wait & ((ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port | master_0_qualified_request_tse_mac_control_port));
  //assign tse_mac_control_port_readdata_from_sa = tse_mac_control_port_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac_control_port_readdata_from_sa = tse_mac_control_port_readdata;

  assign ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port = ({ethernet_port_interface_0_avalon_master_1_address_to_slave[31 : 10] , 10'b0} == 32'h20000000) & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write);
  //assign tse_mac_control_port_waitrequest_from_sa = tse_mac_control_port_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac_control_port_waitrequest_from_sa = tse_mac_control_port_waitrequest;

  //tse_mac_control_port_arb_share_counter set values, which is an e_mux
  assign tse_mac_control_port_arb_share_set_values = 1;

  //tse_mac_control_port_non_bursting_master_requests mux, which is an e_mux
  assign tse_mac_control_port_non_bursting_master_requests = ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port |
    master_0_requests_tse_mac_control_port |
    ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port |
    master_0_requests_tse_mac_control_port;

  //tse_mac_control_port_any_bursting_master_saved_grant mux, which is an e_mux
  assign tse_mac_control_port_any_bursting_master_saved_grant = 0;

  //tse_mac_control_port_arb_share_counter_next_value assignment, which is an e_assign
  assign tse_mac_control_port_arb_share_counter_next_value = tse_mac_control_port_firsttransfer ? (tse_mac_control_port_arb_share_set_values - 1) : |tse_mac_control_port_arb_share_counter ? (tse_mac_control_port_arb_share_counter - 1) : 0;

  //tse_mac_control_port_allgrants all slave grants, which is an e_mux
  assign tse_mac_control_port_allgrants = (|tse_mac_control_port_grant_vector) |
    (|tse_mac_control_port_grant_vector) |
    (|tse_mac_control_port_grant_vector) |
    (|tse_mac_control_port_grant_vector);

  //tse_mac_control_port_end_xfer assignment, which is an e_assign
  assign tse_mac_control_port_end_xfer = ~(tse_mac_control_port_waits_for_read | tse_mac_control_port_waits_for_write);

  //end_xfer_arb_share_counter_term_tse_mac_control_port arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_tse_mac_control_port = tse_mac_control_port_end_xfer & (~tse_mac_control_port_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //tse_mac_control_port_arb_share_counter arbitration counter enable, which is an e_assign
  assign tse_mac_control_port_arb_counter_enable = (end_xfer_arb_share_counter_term_tse_mac_control_port & tse_mac_control_port_allgrants) | (end_xfer_arb_share_counter_term_tse_mac_control_port & ~tse_mac_control_port_non_bursting_master_requests);

  //tse_mac_control_port_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac_control_port_arb_share_counter <= 0;
      else if (tse_mac_control_port_arb_counter_enable)
          tse_mac_control_port_arb_share_counter <= tse_mac_control_port_arb_share_counter_next_value;
    end


  //tse_mac_control_port_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac_control_port_slavearbiterlockenable <= 0;
      else if ((|tse_mac_control_port_master_qreq_vector & end_xfer_arb_share_counter_term_tse_mac_control_port) | (end_xfer_arb_share_counter_term_tse_mac_control_port & ~tse_mac_control_port_non_bursting_master_requests))
          tse_mac_control_port_slavearbiterlockenable <= |tse_mac_control_port_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0/avalon_master_1 tse_mac/control_port arbiterlock, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock = tse_mac_control_port_slavearbiterlockenable & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //tse_mac_control_port_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign tse_mac_control_port_slavearbiterlockenable2 = |tse_mac_control_port_arb_share_counter_next_value;

  //ethernet_port_interface_0/avalon_master_1 tse_mac/control_port arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock2 = tse_mac_control_port_slavearbiterlockenable2 & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //master_0/master tse_mac/control_port arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = tse_mac_control_port_slavearbiterlockenable & master_0_master_continuerequest;

  //master_0/master tse_mac/control_port arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = tse_mac_control_port_slavearbiterlockenable2 & master_0_master_continuerequest;

  //master_0/master granted tse_mac/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_master_0_master_granted_slave_tse_mac_control_port <= 0;
      else 
        last_cycle_master_0_master_granted_slave_tse_mac_control_port <= master_0_saved_grant_tse_mac_control_port ? 1 : (tse_mac_control_port_arbitration_holdoff_internal | ~master_0_requests_tse_mac_control_port) ? 0 : last_cycle_master_0_master_granted_slave_tse_mac_control_port;
    end


  //master_0_master_continuerequest continued request, which is an e_mux
  assign master_0_master_continuerequest = last_cycle_master_0_master_granted_slave_tse_mac_control_port & master_0_requests_tse_mac_control_port;

  //tse_mac_control_port_any_continuerequest at least one master continues requesting, which is an e_mux
  assign tse_mac_control_port_any_continuerequest = master_0_master_continuerequest |
    ethernet_port_interface_0_avalon_master_1_continuerequest;

  assign ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port = ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port & ~((ethernet_port_interface_0_avalon_master_1_read & ((ethernet_port_interface_0_avalon_master_1_latency_counter != 0))) | master_0_master_arbiterlock);
  //local readdatavalid ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port = ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_read & ~tse_mac_control_port_waits_for_read;

  //tse_mac_control_port_writedata mux, which is an e_mux
  assign tse_mac_control_port_writedata = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port)? ethernet_port_interface_0_avalon_master_1_writedata :
    master_0_master_writedata;

  assign master_0_requests_tse_mac_control_port = ({master_0_master_address_to_slave[31 : 10] , 10'b0} == 32'h20000000) & (master_0_master_read | master_0_master_write);
  //ethernet_port_interface_0/avalon_master_1 granted tse_mac/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac_control_port <= 0;
      else 
        last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac_control_port <= ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac_control_port ? 1 : (tse_mac_control_port_arbitration_holdoff_internal | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port) ? 0 : last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac_control_port;
    end


  //ethernet_port_interface_0_avalon_master_1_continuerequest continued request, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_continuerequest = last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port;

  assign master_0_qualified_request_tse_mac_control_port = master_0_requests_tse_mac_control_port & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))) | ethernet_port_interface_0_avalon_master_1_arbiterlock);
  //local readdatavalid master_0_read_data_valid_tse_mac_control_port, which is an e_mux
  assign master_0_read_data_valid_tse_mac_control_port = master_0_granted_tse_mac_control_port & master_0_master_read & ~tse_mac_control_port_waits_for_read;

  //allow new arb cycle for tse_mac/control_port, which is an e_assign
  assign tse_mac_control_port_allow_new_arb_cycle = ~ethernet_port_interface_0_avalon_master_1_arbiterlock & ~master_0_master_arbiterlock;

  //master_0/master assignment into master qualified-requests vector for tse_mac/control_port, which is an e_assign
  assign tse_mac_control_port_master_qreq_vector[0] = master_0_qualified_request_tse_mac_control_port;

  //master_0/master grant tse_mac/control_port, which is an e_assign
  assign master_0_granted_tse_mac_control_port = tse_mac_control_port_grant_vector[0];

  //master_0/master saved-grant tse_mac/control_port, which is an e_assign
  assign master_0_saved_grant_tse_mac_control_port = tse_mac_control_port_arb_winner[0] && master_0_requests_tse_mac_control_port;

  //ethernet_port_interface_0/avalon_master_1 assignment into master qualified-requests vector for tse_mac/control_port, which is an e_assign
  assign tse_mac_control_port_master_qreq_vector[1] = ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port;

  //ethernet_port_interface_0/avalon_master_1 grant tse_mac/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port = tse_mac_control_port_grant_vector[1];

  //ethernet_port_interface_0/avalon_master_1 saved-grant tse_mac/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac_control_port = tse_mac_control_port_arb_winner[1] && ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port;

  //tse_mac/control_port chosen-master double-vector, which is an e_assign
  assign tse_mac_control_port_chosen_master_double_vector = {tse_mac_control_port_master_qreq_vector, tse_mac_control_port_master_qreq_vector} & ({~tse_mac_control_port_master_qreq_vector, ~tse_mac_control_port_master_qreq_vector} + tse_mac_control_port_arb_addend);

  //stable onehot encoding of arb winner
  assign tse_mac_control_port_arb_winner = (tse_mac_control_port_allow_new_arb_cycle & | tse_mac_control_port_grant_vector) ? tse_mac_control_port_grant_vector : tse_mac_control_port_saved_chosen_master_vector;

  //saved tse_mac_control_port_grant_vector, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac_control_port_saved_chosen_master_vector <= 0;
      else if (tse_mac_control_port_allow_new_arb_cycle)
          tse_mac_control_port_saved_chosen_master_vector <= |tse_mac_control_port_grant_vector ? tse_mac_control_port_grant_vector : tse_mac_control_port_saved_chosen_master_vector;
    end


  //onehot encoding of chosen master
  assign tse_mac_control_port_grant_vector = {(tse_mac_control_port_chosen_master_double_vector[1] | tse_mac_control_port_chosen_master_double_vector[3]),
    (tse_mac_control_port_chosen_master_double_vector[0] | tse_mac_control_port_chosen_master_double_vector[2])};

  //tse_mac/control_port chosen master rotated left, which is an e_assign
  assign tse_mac_control_port_chosen_master_rot_left = (tse_mac_control_port_arb_winner << 1) ? (tse_mac_control_port_arb_winner << 1) : 1;

  //tse_mac/control_port's addend for next-master-grant
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac_control_port_arb_addend <= 1;
      else if (|tse_mac_control_port_grant_vector)
          tse_mac_control_port_arb_addend <= tse_mac_control_port_end_xfer? tse_mac_control_port_chosen_master_rot_left : tse_mac_control_port_grant_vector;
    end


  //~tse_mac_control_port_reset assignment, which is an e_assign
  assign tse_mac_control_port_reset = ~reset_n;

  //tse_mac_control_port_firsttransfer first transaction, which is an e_assign
  assign tse_mac_control_port_firsttransfer = tse_mac_control_port_begins_xfer ? tse_mac_control_port_unreg_firsttransfer : tse_mac_control_port_reg_firsttransfer;

  //tse_mac_control_port_unreg_firsttransfer first transaction, which is an e_assign
  assign tse_mac_control_port_unreg_firsttransfer = ~(tse_mac_control_port_slavearbiterlockenable & tse_mac_control_port_any_continuerequest);

  //tse_mac_control_port_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac_control_port_reg_firsttransfer <= 1'b1;
      else if (tse_mac_control_port_begins_xfer)
          tse_mac_control_port_reg_firsttransfer <= tse_mac_control_port_unreg_firsttransfer;
    end


  //tse_mac_control_port_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign tse_mac_control_port_beginbursttransfer_internal = tse_mac_control_port_begins_xfer;

  //tse_mac_control_port_arbitration_holdoff_internal arbitration_holdoff, which is an e_assign
  assign tse_mac_control_port_arbitration_holdoff_internal = tse_mac_control_port_begins_xfer & tse_mac_control_port_firsttransfer;

  //tse_mac_control_port_read assignment, which is an e_mux
  assign tse_mac_control_port_read = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac_control_port & master_0_master_read);

  //tse_mac_control_port_write assignment, which is an e_mux
  assign tse_mac_control_port_write = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac_control_port & master_0_master_write);

  assign shifted_address_to_tse_mac_control_port_from_ethernet_port_interface_0_avalon_master_1 = ethernet_port_interface_0_avalon_master_1_address_to_slave;
  //tse_mac_control_port_address mux, which is an e_mux
  assign tse_mac_control_port_address = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port)? (shifted_address_to_tse_mac_control_port_from_ethernet_port_interface_0_avalon_master_1 >> 2) :
    (shifted_address_to_tse_mac_control_port_from_master_0_master >> 2);

  assign shifted_address_to_tse_mac_control_port_from_master_0_master = master_0_master_address_to_slave;
  //d1_tse_mac_control_port_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_tse_mac_control_port_end_xfer <= 1;
      else 
        d1_tse_mac_control_port_end_xfer <= tse_mac_control_port_end_xfer;
    end


  //tse_mac_control_port_waits_for_read in a cycle, which is an e_mux
  assign tse_mac_control_port_waits_for_read = tse_mac_control_port_in_a_read_cycle & tse_mac_control_port_waitrequest_from_sa;

  //tse_mac_control_port_in_a_read_cycle assignment, which is an e_assign
  assign tse_mac_control_port_in_a_read_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac_control_port & master_0_master_read);

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = tse_mac_control_port_in_a_read_cycle;

  //tse_mac_control_port_waits_for_write in a cycle, which is an e_mux
  assign tse_mac_control_port_waits_for_write = tse_mac_control_port_in_a_write_cycle & tse_mac_control_port_waitrequest_from_sa;

  //tse_mac_control_port_in_a_write_cycle assignment, which is an e_assign
  assign tse_mac_control_port_in_a_write_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac_control_port & master_0_master_write);

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = tse_mac_control_port_in_a_write_cycle;

  assign wait_for_tse_mac_control_port_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //tse_mac/control_port enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port + master_0_granted_tse_mac_control_port > 1)
        begin
          $write("%0d ns: > 1 of grant signals are active simultaneously", $time);
          $stop;
        end
    end


  //saved_grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac_control_port + master_0_saved_grant_tse_mac_control_port > 1)
        begin
          $write("%0d ns: > 1 of saved_grant signals are active simultaneously", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac_transmit_arbitrator (
                                     // inputs:
                                      clk,
                                      ethernet_port_interface_0_avalon_streaming_source_data,
                                      ethernet_port_interface_0_avalon_streaming_source_endofpacket,
                                      ethernet_port_interface_0_avalon_streaming_source_error,
                                      ethernet_port_interface_0_avalon_streaming_source_startofpacket,
                                      ethernet_port_interface_0_avalon_streaming_source_valid,
                                      reset_n,
                                      tse_mac_transmit_ready,

                                     // outputs:
                                      tse_mac_transmit_data,
                                      tse_mac_transmit_endofpacket,
                                      tse_mac_transmit_error,
                                      tse_mac_transmit_ready_from_sa,
                                      tse_mac_transmit_startofpacket,
                                      tse_mac_transmit_valid
                                   )
;

  output  [  7: 0] tse_mac_transmit_data;
  output           tse_mac_transmit_endofpacket;
  output           tse_mac_transmit_error;
  output           tse_mac_transmit_ready_from_sa;
  output           tse_mac_transmit_startofpacket;
  output           tse_mac_transmit_valid;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_data;
  input            ethernet_port_interface_0_avalon_streaming_source_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_error;
  input            ethernet_port_interface_0_avalon_streaming_source_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_valid;
  input            reset_n;
  input            tse_mac_transmit_ready;

  wire    [  7: 0] tse_mac_transmit_data;
  wire             tse_mac_transmit_endofpacket;
  wire             tse_mac_transmit_error;
  wire             tse_mac_transmit_ready_from_sa;
  wire             tse_mac_transmit_startofpacket;
  wire             tse_mac_transmit_valid;
  //mux tse_mac_transmit_data, which is an e_mux
  assign tse_mac_transmit_data = ethernet_port_interface_0_avalon_streaming_source_data;

  //mux tse_mac_transmit_endofpacket, which is an e_mux
  assign tse_mac_transmit_endofpacket = ethernet_port_interface_0_avalon_streaming_source_endofpacket;

  //mux tse_mac_transmit_error, which is an e_mux
  assign tse_mac_transmit_error = ethernet_port_interface_0_avalon_streaming_source_error;

  //assign tse_mac_transmit_ready_from_sa = tse_mac_transmit_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac_transmit_ready_from_sa = tse_mac_transmit_ready;

  //mux tse_mac_transmit_startofpacket, which is an e_mux
  assign tse_mac_transmit_startofpacket = ethernet_port_interface_0_avalon_streaming_source_startofpacket;

  //mux tse_mac_transmit_valid, which is an e_mux
  assign tse_mac_transmit_valid = ethernet_port_interface_0_avalon_streaming_source_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac_receive_arbitrator (
                                    // inputs:
                                     clk,
                                     ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa,
                                     reset_n,
                                     tse_mac_receive_data,
                                     tse_mac_receive_endofpacket,
                                     tse_mac_receive_error,
                                     tse_mac_receive_startofpacket,
                                     tse_mac_receive_valid,

                                    // outputs:
                                     tse_mac_receive_ready
                                  )
;

  output           tse_mac_receive_ready;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa;
  input            reset_n;
  input   [  7: 0] tse_mac_receive_data;
  input            tse_mac_receive_endofpacket;
  input   [  5: 0] tse_mac_receive_error;
  input            tse_mac_receive_startofpacket;
  input            tse_mac_receive_valid;

  wire             tse_mac_receive_ready;
  //mux tse_mac_receive_ready, which is an e_mux
  assign tse_mac_receive_ready = ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac1_control_port_arbitrator (
                                          // inputs:
                                           clk,
                                           ethernet_port_interface_0_avalon_master_1_address_to_slave,
                                           ethernet_port_interface_0_avalon_master_1_latency_counter,
                                           ethernet_port_interface_0_avalon_master_1_read,
                                           ethernet_port_interface_0_avalon_master_1_write,
                                           ethernet_port_interface_0_avalon_master_1_writedata,
                                           master_0_latency_counter,
                                           master_0_master_address_to_slave,
                                           master_0_master_read,
                                           master_0_master_write,
                                           master_0_master_writedata,
                                           master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                           reset_n,
                                           tse_mac1_control_port_readdata,
                                           tse_mac1_control_port_waitrequest,

                                          // outputs:
                                           d1_tse_mac1_control_port_end_xfer,
                                           ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port,
                                           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port,
                                           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port,
                                           ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port,
                                           master_0_granted_tse_mac1_control_port,
                                           master_0_qualified_request_tse_mac1_control_port,
                                           master_0_read_data_valid_tse_mac1_control_port,
                                           master_0_requests_tse_mac1_control_port,
                                           tse_mac1_control_port_address,
                                           tse_mac1_control_port_read,
                                           tse_mac1_control_port_readdata_from_sa,
                                           tse_mac1_control_port_reset,
                                           tse_mac1_control_port_waitrequest_from_sa,
                                           tse_mac1_control_port_write,
                                           tse_mac1_control_port_writedata
                                        )
;

  output           d1_tse_mac1_control_port_end_xfer;
  output           ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port;
  output           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port;
  output           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port;
  output           ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port;
  output           master_0_granted_tse_mac1_control_port;
  output           master_0_qualified_request_tse_mac1_control_port;
  output           master_0_read_data_valid_tse_mac1_control_port;
  output           master_0_requests_tse_mac1_control_port;
  output  [  7: 0] tse_mac1_control_port_address;
  output           tse_mac1_control_port_read;
  output  [ 31: 0] tse_mac1_control_port_readdata_from_sa;
  output           tse_mac1_control_port_reset;
  output           tse_mac1_control_port_waitrequest_from_sa;
  output           tse_mac1_control_port_write;
  output  [ 31: 0] tse_mac1_control_port_writedata;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  input            ethernet_port_interface_0_avalon_master_1_latency_counter;
  input            ethernet_port_interface_0_avalon_master_1_read;
  input            ethernet_port_interface_0_avalon_master_1_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;
  input   [ 31: 0] tse_mac1_control_port_readdata;
  input            tse_mac1_control_port_waitrequest;

  reg              d1_reasons_to_wait;
  reg              d1_tse_mac1_control_port_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock2;
  wire             ethernet_port_interface_0_avalon_master_1_continuerequest;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac1_control_port;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  reg              last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac1_control_port;
  reg              last_cycle_master_0_master_granted_slave_tse_mac1_control_port;
  wire             master_0_granted_tse_mac1_control_port;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_tse_mac1_control_port;
  wire             master_0_read_data_valid_tse_mac1_control_port;
  wire             master_0_requests_tse_mac1_control_port;
  wire             master_0_saved_grant_tse_mac1_control_port;
  wire    [ 31: 0] shifted_address_to_tse_mac1_control_port_from_ethernet_port_interface_0_avalon_master_1;
  wire    [ 31: 0] shifted_address_to_tse_mac1_control_port_from_master_0_master;
  wire    [  7: 0] tse_mac1_control_port_address;
  wire             tse_mac1_control_port_allgrants;
  wire             tse_mac1_control_port_allow_new_arb_cycle;
  wire             tse_mac1_control_port_any_bursting_master_saved_grant;
  wire             tse_mac1_control_port_any_continuerequest;
  reg     [  1: 0] tse_mac1_control_port_arb_addend;
  wire             tse_mac1_control_port_arb_counter_enable;
  reg              tse_mac1_control_port_arb_share_counter;
  wire             tse_mac1_control_port_arb_share_counter_next_value;
  wire             tse_mac1_control_port_arb_share_set_values;
  wire    [  1: 0] tse_mac1_control_port_arb_winner;
  wire             tse_mac1_control_port_arbitration_holdoff_internal;
  wire             tse_mac1_control_port_beginbursttransfer_internal;
  wire             tse_mac1_control_port_begins_xfer;
  wire    [  3: 0] tse_mac1_control_port_chosen_master_double_vector;
  wire    [  1: 0] tse_mac1_control_port_chosen_master_rot_left;
  wire             tse_mac1_control_port_end_xfer;
  wire             tse_mac1_control_port_firsttransfer;
  wire    [  1: 0] tse_mac1_control_port_grant_vector;
  wire             tse_mac1_control_port_in_a_read_cycle;
  wire             tse_mac1_control_port_in_a_write_cycle;
  wire    [  1: 0] tse_mac1_control_port_master_qreq_vector;
  wire             tse_mac1_control_port_non_bursting_master_requests;
  wire             tse_mac1_control_port_read;
  wire    [ 31: 0] tse_mac1_control_port_readdata_from_sa;
  reg              tse_mac1_control_port_reg_firsttransfer;
  wire             tse_mac1_control_port_reset;
  reg     [  1: 0] tse_mac1_control_port_saved_chosen_master_vector;
  reg              tse_mac1_control_port_slavearbiterlockenable;
  wire             tse_mac1_control_port_slavearbiterlockenable2;
  wire             tse_mac1_control_port_unreg_firsttransfer;
  wire             tse_mac1_control_port_waitrequest_from_sa;
  wire             tse_mac1_control_port_waits_for_read;
  wire             tse_mac1_control_port_waits_for_write;
  wire             tse_mac1_control_port_write;
  wire    [ 31: 0] tse_mac1_control_port_writedata;
  wire             wait_for_tse_mac1_control_port_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~tse_mac1_control_port_end_xfer;
    end


  assign tse_mac1_control_port_begins_xfer = ~d1_reasons_to_wait & ((ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port | master_0_qualified_request_tse_mac1_control_port));
  //assign tse_mac1_control_port_readdata_from_sa = tse_mac1_control_port_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac1_control_port_readdata_from_sa = tse_mac1_control_port_readdata;

  assign ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port = ({ethernet_port_interface_0_avalon_master_1_address_to_slave[31 : 10] , 10'b0} == 32'h20000400) & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write);
  //assign tse_mac1_control_port_waitrequest_from_sa = tse_mac1_control_port_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac1_control_port_waitrequest_from_sa = tse_mac1_control_port_waitrequest;

  //tse_mac1_control_port_arb_share_counter set values, which is an e_mux
  assign tse_mac1_control_port_arb_share_set_values = 1;

  //tse_mac1_control_port_non_bursting_master_requests mux, which is an e_mux
  assign tse_mac1_control_port_non_bursting_master_requests = ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port |
    master_0_requests_tse_mac1_control_port |
    ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port |
    master_0_requests_tse_mac1_control_port;

  //tse_mac1_control_port_any_bursting_master_saved_grant mux, which is an e_mux
  assign tse_mac1_control_port_any_bursting_master_saved_grant = 0;

  //tse_mac1_control_port_arb_share_counter_next_value assignment, which is an e_assign
  assign tse_mac1_control_port_arb_share_counter_next_value = tse_mac1_control_port_firsttransfer ? (tse_mac1_control_port_arb_share_set_values - 1) : |tse_mac1_control_port_arb_share_counter ? (tse_mac1_control_port_arb_share_counter - 1) : 0;

  //tse_mac1_control_port_allgrants all slave grants, which is an e_mux
  assign tse_mac1_control_port_allgrants = (|tse_mac1_control_port_grant_vector) |
    (|tse_mac1_control_port_grant_vector) |
    (|tse_mac1_control_port_grant_vector) |
    (|tse_mac1_control_port_grant_vector);

  //tse_mac1_control_port_end_xfer assignment, which is an e_assign
  assign tse_mac1_control_port_end_xfer = ~(tse_mac1_control_port_waits_for_read | tse_mac1_control_port_waits_for_write);

  //end_xfer_arb_share_counter_term_tse_mac1_control_port arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_tse_mac1_control_port = tse_mac1_control_port_end_xfer & (~tse_mac1_control_port_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //tse_mac1_control_port_arb_share_counter arbitration counter enable, which is an e_assign
  assign tse_mac1_control_port_arb_counter_enable = (end_xfer_arb_share_counter_term_tse_mac1_control_port & tse_mac1_control_port_allgrants) | (end_xfer_arb_share_counter_term_tse_mac1_control_port & ~tse_mac1_control_port_non_bursting_master_requests);

  //tse_mac1_control_port_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac1_control_port_arb_share_counter <= 0;
      else if (tse_mac1_control_port_arb_counter_enable)
          tse_mac1_control_port_arb_share_counter <= tse_mac1_control_port_arb_share_counter_next_value;
    end


  //tse_mac1_control_port_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac1_control_port_slavearbiterlockenable <= 0;
      else if ((|tse_mac1_control_port_master_qreq_vector & end_xfer_arb_share_counter_term_tse_mac1_control_port) | (end_xfer_arb_share_counter_term_tse_mac1_control_port & ~tse_mac1_control_port_non_bursting_master_requests))
          tse_mac1_control_port_slavearbiterlockenable <= |tse_mac1_control_port_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0/avalon_master_1 tse_mac1/control_port arbiterlock, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock = tse_mac1_control_port_slavearbiterlockenable & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //tse_mac1_control_port_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign tse_mac1_control_port_slavearbiterlockenable2 = |tse_mac1_control_port_arb_share_counter_next_value;

  //ethernet_port_interface_0/avalon_master_1 tse_mac1/control_port arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock2 = tse_mac1_control_port_slavearbiterlockenable2 & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //master_0/master tse_mac1/control_port arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = tse_mac1_control_port_slavearbiterlockenable & master_0_master_continuerequest;

  //master_0/master tse_mac1/control_port arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = tse_mac1_control_port_slavearbiterlockenable2 & master_0_master_continuerequest;

  //master_0/master granted tse_mac1/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_master_0_master_granted_slave_tse_mac1_control_port <= 0;
      else 
        last_cycle_master_0_master_granted_slave_tse_mac1_control_port <= master_0_saved_grant_tse_mac1_control_port ? 1 : (tse_mac1_control_port_arbitration_holdoff_internal | ~master_0_requests_tse_mac1_control_port) ? 0 : last_cycle_master_0_master_granted_slave_tse_mac1_control_port;
    end


  //master_0_master_continuerequest continued request, which is an e_mux
  assign master_0_master_continuerequest = last_cycle_master_0_master_granted_slave_tse_mac1_control_port & master_0_requests_tse_mac1_control_port;

  //tse_mac1_control_port_any_continuerequest at least one master continues requesting, which is an e_mux
  assign tse_mac1_control_port_any_continuerequest = master_0_master_continuerequest |
    ethernet_port_interface_0_avalon_master_1_continuerequest;

  assign ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port = ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port & ~((ethernet_port_interface_0_avalon_master_1_read & ((ethernet_port_interface_0_avalon_master_1_latency_counter != 0))) | master_0_master_arbiterlock);
  //local readdatavalid ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port = ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_read & ~tse_mac1_control_port_waits_for_read;

  //tse_mac1_control_port_writedata mux, which is an e_mux
  assign tse_mac1_control_port_writedata = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port)? ethernet_port_interface_0_avalon_master_1_writedata :
    master_0_master_writedata;

  assign master_0_requests_tse_mac1_control_port = ({master_0_master_address_to_slave[31 : 10] , 10'b0} == 32'h20000400) & (master_0_master_read | master_0_master_write);
  //ethernet_port_interface_0/avalon_master_1 granted tse_mac1/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac1_control_port <= 0;
      else 
        last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac1_control_port <= ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac1_control_port ? 1 : (tse_mac1_control_port_arbitration_holdoff_internal | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port) ? 0 : last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac1_control_port;
    end


  //ethernet_port_interface_0_avalon_master_1_continuerequest continued request, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_continuerequest = last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port;

  assign master_0_qualified_request_tse_mac1_control_port = master_0_requests_tse_mac1_control_port & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))) | ethernet_port_interface_0_avalon_master_1_arbiterlock);
  //local readdatavalid master_0_read_data_valid_tse_mac1_control_port, which is an e_mux
  assign master_0_read_data_valid_tse_mac1_control_port = master_0_granted_tse_mac1_control_port & master_0_master_read & ~tse_mac1_control_port_waits_for_read;

  //allow new arb cycle for tse_mac1/control_port, which is an e_assign
  assign tse_mac1_control_port_allow_new_arb_cycle = ~ethernet_port_interface_0_avalon_master_1_arbiterlock & ~master_0_master_arbiterlock;

  //master_0/master assignment into master qualified-requests vector for tse_mac1/control_port, which is an e_assign
  assign tse_mac1_control_port_master_qreq_vector[0] = master_0_qualified_request_tse_mac1_control_port;

  //master_0/master grant tse_mac1/control_port, which is an e_assign
  assign master_0_granted_tse_mac1_control_port = tse_mac1_control_port_grant_vector[0];

  //master_0/master saved-grant tse_mac1/control_port, which is an e_assign
  assign master_0_saved_grant_tse_mac1_control_port = tse_mac1_control_port_arb_winner[0] && master_0_requests_tse_mac1_control_port;

  //ethernet_port_interface_0/avalon_master_1 assignment into master qualified-requests vector for tse_mac1/control_port, which is an e_assign
  assign tse_mac1_control_port_master_qreq_vector[1] = ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port;

  //ethernet_port_interface_0/avalon_master_1 grant tse_mac1/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port = tse_mac1_control_port_grant_vector[1];

  //ethernet_port_interface_0/avalon_master_1 saved-grant tse_mac1/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac1_control_port = tse_mac1_control_port_arb_winner[1] && ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port;

  //tse_mac1/control_port chosen-master double-vector, which is an e_assign
  assign tse_mac1_control_port_chosen_master_double_vector = {tse_mac1_control_port_master_qreq_vector, tse_mac1_control_port_master_qreq_vector} & ({~tse_mac1_control_port_master_qreq_vector, ~tse_mac1_control_port_master_qreq_vector} + tse_mac1_control_port_arb_addend);

  //stable onehot encoding of arb winner
  assign tse_mac1_control_port_arb_winner = (tse_mac1_control_port_allow_new_arb_cycle & | tse_mac1_control_port_grant_vector) ? tse_mac1_control_port_grant_vector : tse_mac1_control_port_saved_chosen_master_vector;

  //saved tse_mac1_control_port_grant_vector, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac1_control_port_saved_chosen_master_vector <= 0;
      else if (tse_mac1_control_port_allow_new_arb_cycle)
          tse_mac1_control_port_saved_chosen_master_vector <= |tse_mac1_control_port_grant_vector ? tse_mac1_control_port_grant_vector : tse_mac1_control_port_saved_chosen_master_vector;
    end


  //onehot encoding of chosen master
  assign tse_mac1_control_port_grant_vector = {(tse_mac1_control_port_chosen_master_double_vector[1] | tse_mac1_control_port_chosen_master_double_vector[3]),
    (tse_mac1_control_port_chosen_master_double_vector[0] | tse_mac1_control_port_chosen_master_double_vector[2])};

  //tse_mac1/control_port chosen master rotated left, which is an e_assign
  assign tse_mac1_control_port_chosen_master_rot_left = (tse_mac1_control_port_arb_winner << 1) ? (tse_mac1_control_port_arb_winner << 1) : 1;

  //tse_mac1/control_port's addend for next-master-grant
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac1_control_port_arb_addend <= 1;
      else if (|tse_mac1_control_port_grant_vector)
          tse_mac1_control_port_arb_addend <= tse_mac1_control_port_end_xfer? tse_mac1_control_port_chosen_master_rot_left : tse_mac1_control_port_grant_vector;
    end


  //~tse_mac1_control_port_reset assignment, which is an e_assign
  assign tse_mac1_control_port_reset = ~reset_n;

  //tse_mac1_control_port_firsttransfer first transaction, which is an e_assign
  assign tse_mac1_control_port_firsttransfer = tse_mac1_control_port_begins_xfer ? tse_mac1_control_port_unreg_firsttransfer : tse_mac1_control_port_reg_firsttransfer;

  //tse_mac1_control_port_unreg_firsttransfer first transaction, which is an e_assign
  assign tse_mac1_control_port_unreg_firsttransfer = ~(tse_mac1_control_port_slavearbiterlockenable & tse_mac1_control_port_any_continuerequest);

  //tse_mac1_control_port_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac1_control_port_reg_firsttransfer <= 1'b1;
      else if (tse_mac1_control_port_begins_xfer)
          tse_mac1_control_port_reg_firsttransfer <= tse_mac1_control_port_unreg_firsttransfer;
    end


  //tse_mac1_control_port_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign tse_mac1_control_port_beginbursttransfer_internal = tse_mac1_control_port_begins_xfer;

  //tse_mac1_control_port_arbitration_holdoff_internal arbitration_holdoff, which is an e_assign
  assign tse_mac1_control_port_arbitration_holdoff_internal = tse_mac1_control_port_begins_xfer & tse_mac1_control_port_firsttransfer;

  //tse_mac1_control_port_read assignment, which is an e_mux
  assign tse_mac1_control_port_read = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac1_control_port & master_0_master_read);

  //tse_mac1_control_port_write assignment, which is an e_mux
  assign tse_mac1_control_port_write = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac1_control_port & master_0_master_write);

  assign shifted_address_to_tse_mac1_control_port_from_ethernet_port_interface_0_avalon_master_1 = ethernet_port_interface_0_avalon_master_1_address_to_slave;
  //tse_mac1_control_port_address mux, which is an e_mux
  assign tse_mac1_control_port_address = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port)? (shifted_address_to_tse_mac1_control_port_from_ethernet_port_interface_0_avalon_master_1 >> 2) :
    (shifted_address_to_tse_mac1_control_port_from_master_0_master >> 2);

  assign shifted_address_to_tse_mac1_control_port_from_master_0_master = master_0_master_address_to_slave;
  //d1_tse_mac1_control_port_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_tse_mac1_control_port_end_xfer <= 1;
      else 
        d1_tse_mac1_control_port_end_xfer <= tse_mac1_control_port_end_xfer;
    end


  //tse_mac1_control_port_waits_for_read in a cycle, which is an e_mux
  assign tse_mac1_control_port_waits_for_read = tse_mac1_control_port_in_a_read_cycle & tse_mac1_control_port_waitrequest_from_sa;

  //tse_mac1_control_port_in_a_read_cycle assignment, which is an e_assign
  assign tse_mac1_control_port_in_a_read_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac1_control_port & master_0_master_read);

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = tse_mac1_control_port_in_a_read_cycle;

  //tse_mac1_control_port_waits_for_write in a cycle, which is an e_mux
  assign tse_mac1_control_port_waits_for_write = tse_mac1_control_port_in_a_write_cycle & tse_mac1_control_port_waitrequest_from_sa;

  //tse_mac1_control_port_in_a_write_cycle assignment, which is an e_assign
  assign tse_mac1_control_port_in_a_write_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac1_control_port & master_0_master_write);

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = tse_mac1_control_port_in_a_write_cycle;

  assign wait_for_tse_mac1_control_port_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //tse_mac1/control_port enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port + master_0_granted_tse_mac1_control_port > 1)
        begin
          $write("%0d ns: > 1 of grant signals are active simultaneously", $time);
          $stop;
        end
    end


  //saved_grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac1_control_port + master_0_saved_grant_tse_mac1_control_port > 1)
        begin
          $write("%0d ns: > 1 of saved_grant signals are active simultaneously", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac1_transmit_arbitrator (
                                      // inputs:
                                       clk,
                                       ethernet_port_interface_0_avalon_streaming_source_1_data,
                                       ethernet_port_interface_0_avalon_streaming_source_1_endofpacket,
                                       ethernet_port_interface_0_avalon_streaming_source_1_error,
                                       ethernet_port_interface_0_avalon_streaming_source_1_startofpacket,
                                       ethernet_port_interface_0_avalon_streaming_source_1_valid,
                                       reset_n,
                                       tse_mac1_transmit_ready,

                                      // outputs:
                                       tse_mac1_transmit_data,
                                       tse_mac1_transmit_endofpacket,
                                       tse_mac1_transmit_error,
                                       tse_mac1_transmit_ready_from_sa,
                                       tse_mac1_transmit_startofpacket,
                                       tse_mac1_transmit_valid
                                    )
;

  output  [  7: 0] tse_mac1_transmit_data;
  output           tse_mac1_transmit_endofpacket;
  output           tse_mac1_transmit_error;
  output           tse_mac1_transmit_ready_from_sa;
  output           tse_mac1_transmit_startofpacket;
  output           tse_mac1_transmit_valid;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_1_data;
  input            ethernet_port_interface_0_avalon_streaming_source_1_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_1_error;
  input            ethernet_port_interface_0_avalon_streaming_source_1_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_1_valid;
  input            reset_n;
  input            tse_mac1_transmit_ready;

  wire    [  7: 0] tse_mac1_transmit_data;
  wire             tse_mac1_transmit_endofpacket;
  wire             tse_mac1_transmit_error;
  wire             tse_mac1_transmit_ready_from_sa;
  wire             tse_mac1_transmit_startofpacket;
  wire             tse_mac1_transmit_valid;
  //mux tse_mac1_transmit_data, which is an e_mux
  assign tse_mac1_transmit_data = ethernet_port_interface_0_avalon_streaming_source_1_data;

  //mux tse_mac1_transmit_endofpacket, which is an e_mux
  assign tse_mac1_transmit_endofpacket = ethernet_port_interface_0_avalon_streaming_source_1_endofpacket;

  //mux tse_mac1_transmit_error, which is an e_mux
  assign tse_mac1_transmit_error = ethernet_port_interface_0_avalon_streaming_source_1_error;

  //assign tse_mac1_transmit_ready_from_sa = tse_mac1_transmit_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac1_transmit_ready_from_sa = tse_mac1_transmit_ready;

  //mux tse_mac1_transmit_startofpacket, which is an e_mux
  assign tse_mac1_transmit_startofpacket = ethernet_port_interface_0_avalon_streaming_source_1_startofpacket;

  //mux tse_mac1_transmit_valid, which is an e_mux
  assign tse_mac1_transmit_valid = ethernet_port_interface_0_avalon_streaming_source_1_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac1_receive_arbitrator (
                                     // inputs:
                                      clk,
                                      ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa,
                                      reset_n,
                                      tse_mac1_receive_data,
                                      tse_mac1_receive_endofpacket,
                                      tse_mac1_receive_error,
                                      tse_mac1_receive_startofpacket,
                                      tse_mac1_receive_valid,

                                     // outputs:
                                      tse_mac1_receive_ready
                                   )
;

  output           tse_mac1_receive_ready;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa;
  input            reset_n;
  input   [  7: 0] tse_mac1_receive_data;
  input            tse_mac1_receive_endofpacket;
  input   [  5: 0] tse_mac1_receive_error;
  input            tse_mac1_receive_startofpacket;
  input            tse_mac1_receive_valid;

  wire             tse_mac1_receive_ready;
  //mux tse_mac1_receive_ready, which is an e_mux
  assign tse_mac1_receive_ready = ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac2_control_port_arbitrator (
                                          // inputs:
                                           clk,
                                           ethernet_port_interface_0_avalon_master_1_address_to_slave,
                                           ethernet_port_interface_0_avalon_master_1_latency_counter,
                                           ethernet_port_interface_0_avalon_master_1_read,
                                           ethernet_port_interface_0_avalon_master_1_write,
                                           ethernet_port_interface_0_avalon_master_1_writedata,
                                           master_0_latency_counter,
                                           master_0_master_address_to_slave,
                                           master_0_master_read,
                                           master_0_master_write,
                                           master_0_master_writedata,
                                           master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                           reset_n,
                                           tse_mac2_control_port_readdata,
                                           tse_mac2_control_port_waitrequest,

                                          // outputs:
                                           d1_tse_mac2_control_port_end_xfer,
                                           ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port,
                                           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port,
                                           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port,
                                           ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port,
                                           master_0_granted_tse_mac2_control_port,
                                           master_0_qualified_request_tse_mac2_control_port,
                                           master_0_read_data_valid_tse_mac2_control_port,
                                           master_0_requests_tse_mac2_control_port,
                                           tse_mac2_control_port_address,
                                           tse_mac2_control_port_read,
                                           tse_mac2_control_port_readdata_from_sa,
                                           tse_mac2_control_port_reset,
                                           tse_mac2_control_port_waitrequest_from_sa,
                                           tse_mac2_control_port_write,
                                           tse_mac2_control_port_writedata
                                        )
;

  output           d1_tse_mac2_control_port_end_xfer;
  output           ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port;
  output           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port;
  output           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port;
  output           ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port;
  output           master_0_granted_tse_mac2_control_port;
  output           master_0_qualified_request_tse_mac2_control_port;
  output           master_0_read_data_valid_tse_mac2_control_port;
  output           master_0_requests_tse_mac2_control_port;
  output  [  7: 0] tse_mac2_control_port_address;
  output           tse_mac2_control_port_read;
  output  [ 31: 0] tse_mac2_control_port_readdata_from_sa;
  output           tse_mac2_control_port_reset;
  output           tse_mac2_control_port_waitrequest_from_sa;
  output           tse_mac2_control_port_write;
  output  [ 31: 0] tse_mac2_control_port_writedata;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  input            ethernet_port_interface_0_avalon_master_1_latency_counter;
  input            ethernet_port_interface_0_avalon_master_1_read;
  input            ethernet_port_interface_0_avalon_master_1_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;
  input   [ 31: 0] tse_mac2_control_port_readdata;
  input            tse_mac2_control_port_waitrequest;

  reg              d1_reasons_to_wait;
  reg              d1_tse_mac2_control_port_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock2;
  wire             ethernet_port_interface_0_avalon_master_1_continuerequest;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac2_control_port;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  reg              last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac2_control_port;
  reg              last_cycle_master_0_master_granted_slave_tse_mac2_control_port;
  wire             master_0_granted_tse_mac2_control_port;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_tse_mac2_control_port;
  wire             master_0_read_data_valid_tse_mac2_control_port;
  wire             master_0_requests_tse_mac2_control_port;
  wire             master_0_saved_grant_tse_mac2_control_port;
  wire    [ 31: 0] shifted_address_to_tse_mac2_control_port_from_ethernet_port_interface_0_avalon_master_1;
  wire    [ 31: 0] shifted_address_to_tse_mac2_control_port_from_master_0_master;
  wire    [  7: 0] tse_mac2_control_port_address;
  wire             tse_mac2_control_port_allgrants;
  wire             tse_mac2_control_port_allow_new_arb_cycle;
  wire             tse_mac2_control_port_any_bursting_master_saved_grant;
  wire             tse_mac2_control_port_any_continuerequest;
  reg     [  1: 0] tse_mac2_control_port_arb_addend;
  wire             tse_mac2_control_port_arb_counter_enable;
  reg              tse_mac2_control_port_arb_share_counter;
  wire             tse_mac2_control_port_arb_share_counter_next_value;
  wire             tse_mac2_control_port_arb_share_set_values;
  wire    [  1: 0] tse_mac2_control_port_arb_winner;
  wire             tse_mac2_control_port_arbitration_holdoff_internal;
  wire             tse_mac2_control_port_beginbursttransfer_internal;
  wire             tse_mac2_control_port_begins_xfer;
  wire    [  3: 0] tse_mac2_control_port_chosen_master_double_vector;
  wire    [  1: 0] tse_mac2_control_port_chosen_master_rot_left;
  wire             tse_mac2_control_port_end_xfer;
  wire             tse_mac2_control_port_firsttransfer;
  wire    [  1: 0] tse_mac2_control_port_grant_vector;
  wire             tse_mac2_control_port_in_a_read_cycle;
  wire             tse_mac2_control_port_in_a_write_cycle;
  wire    [  1: 0] tse_mac2_control_port_master_qreq_vector;
  wire             tse_mac2_control_port_non_bursting_master_requests;
  wire             tse_mac2_control_port_read;
  wire    [ 31: 0] tse_mac2_control_port_readdata_from_sa;
  reg              tse_mac2_control_port_reg_firsttransfer;
  wire             tse_mac2_control_port_reset;
  reg     [  1: 0] tse_mac2_control_port_saved_chosen_master_vector;
  reg              tse_mac2_control_port_slavearbiterlockenable;
  wire             tse_mac2_control_port_slavearbiterlockenable2;
  wire             tse_mac2_control_port_unreg_firsttransfer;
  wire             tse_mac2_control_port_waitrequest_from_sa;
  wire             tse_mac2_control_port_waits_for_read;
  wire             tse_mac2_control_port_waits_for_write;
  wire             tse_mac2_control_port_write;
  wire    [ 31: 0] tse_mac2_control_port_writedata;
  wire             wait_for_tse_mac2_control_port_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~tse_mac2_control_port_end_xfer;
    end


  assign tse_mac2_control_port_begins_xfer = ~d1_reasons_to_wait & ((ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port | master_0_qualified_request_tse_mac2_control_port));
  //assign tse_mac2_control_port_readdata_from_sa = tse_mac2_control_port_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac2_control_port_readdata_from_sa = tse_mac2_control_port_readdata;

  assign ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port = ({ethernet_port_interface_0_avalon_master_1_address_to_slave[31 : 10] , 10'b0} == 32'h20000800) & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write);
  //assign tse_mac2_control_port_waitrequest_from_sa = tse_mac2_control_port_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac2_control_port_waitrequest_from_sa = tse_mac2_control_port_waitrequest;

  //tse_mac2_control_port_arb_share_counter set values, which is an e_mux
  assign tse_mac2_control_port_arb_share_set_values = 1;

  //tse_mac2_control_port_non_bursting_master_requests mux, which is an e_mux
  assign tse_mac2_control_port_non_bursting_master_requests = ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port |
    master_0_requests_tse_mac2_control_port |
    ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port |
    master_0_requests_tse_mac2_control_port;

  //tse_mac2_control_port_any_bursting_master_saved_grant mux, which is an e_mux
  assign tse_mac2_control_port_any_bursting_master_saved_grant = 0;

  //tse_mac2_control_port_arb_share_counter_next_value assignment, which is an e_assign
  assign tse_mac2_control_port_arb_share_counter_next_value = tse_mac2_control_port_firsttransfer ? (tse_mac2_control_port_arb_share_set_values - 1) : |tse_mac2_control_port_arb_share_counter ? (tse_mac2_control_port_arb_share_counter - 1) : 0;

  //tse_mac2_control_port_allgrants all slave grants, which is an e_mux
  assign tse_mac2_control_port_allgrants = (|tse_mac2_control_port_grant_vector) |
    (|tse_mac2_control_port_grant_vector) |
    (|tse_mac2_control_port_grant_vector) |
    (|tse_mac2_control_port_grant_vector);

  //tse_mac2_control_port_end_xfer assignment, which is an e_assign
  assign tse_mac2_control_port_end_xfer = ~(tse_mac2_control_port_waits_for_read | tse_mac2_control_port_waits_for_write);

  //end_xfer_arb_share_counter_term_tse_mac2_control_port arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_tse_mac2_control_port = tse_mac2_control_port_end_xfer & (~tse_mac2_control_port_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //tse_mac2_control_port_arb_share_counter arbitration counter enable, which is an e_assign
  assign tse_mac2_control_port_arb_counter_enable = (end_xfer_arb_share_counter_term_tse_mac2_control_port & tse_mac2_control_port_allgrants) | (end_xfer_arb_share_counter_term_tse_mac2_control_port & ~tse_mac2_control_port_non_bursting_master_requests);

  //tse_mac2_control_port_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac2_control_port_arb_share_counter <= 0;
      else if (tse_mac2_control_port_arb_counter_enable)
          tse_mac2_control_port_arb_share_counter <= tse_mac2_control_port_arb_share_counter_next_value;
    end


  //tse_mac2_control_port_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac2_control_port_slavearbiterlockenable <= 0;
      else if ((|tse_mac2_control_port_master_qreq_vector & end_xfer_arb_share_counter_term_tse_mac2_control_port) | (end_xfer_arb_share_counter_term_tse_mac2_control_port & ~tse_mac2_control_port_non_bursting_master_requests))
          tse_mac2_control_port_slavearbiterlockenable <= |tse_mac2_control_port_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0/avalon_master_1 tse_mac2/control_port arbiterlock, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock = tse_mac2_control_port_slavearbiterlockenable & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //tse_mac2_control_port_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign tse_mac2_control_port_slavearbiterlockenable2 = |tse_mac2_control_port_arb_share_counter_next_value;

  //ethernet_port_interface_0/avalon_master_1 tse_mac2/control_port arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock2 = tse_mac2_control_port_slavearbiterlockenable2 & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //master_0/master tse_mac2/control_port arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = tse_mac2_control_port_slavearbiterlockenable & master_0_master_continuerequest;

  //master_0/master tse_mac2/control_port arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = tse_mac2_control_port_slavearbiterlockenable2 & master_0_master_continuerequest;

  //master_0/master granted tse_mac2/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_master_0_master_granted_slave_tse_mac2_control_port <= 0;
      else 
        last_cycle_master_0_master_granted_slave_tse_mac2_control_port <= master_0_saved_grant_tse_mac2_control_port ? 1 : (tse_mac2_control_port_arbitration_holdoff_internal | ~master_0_requests_tse_mac2_control_port) ? 0 : last_cycle_master_0_master_granted_slave_tse_mac2_control_port;
    end


  //master_0_master_continuerequest continued request, which is an e_mux
  assign master_0_master_continuerequest = last_cycle_master_0_master_granted_slave_tse_mac2_control_port & master_0_requests_tse_mac2_control_port;

  //tse_mac2_control_port_any_continuerequest at least one master continues requesting, which is an e_mux
  assign tse_mac2_control_port_any_continuerequest = master_0_master_continuerequest |
    ethernet_port_interface_0_avalon_master_1_continuerequest;

  assign ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port = ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port & ~((ethernet_port_interface_0_avalon_master_1_read & ((ethernet_port_interface_0_avalon_master_1_latency_counter != 0))) | master_0_master_arbiterlock);
  //local readdatavalid ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port = ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_read & ~tse_mac2_control_port_waits_for_read;

  //tse_mac2_control_port_writedata mux, which is an e_mux
  assign tse_mac2_control_port_writedata = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port)? ethernet_port_interface_0_avalon_master_1_writedata :
    master_0_master_writedata;

  assign master_0_requests_tse_mac2_control_port = ({master_0_master_address_to_slave[31 : 10] , 10'b0} == 32'h20000800) & (master_0_master_read | master_0_master_write);
  //ethernet_port_interface_0/avalon_master_1 granted tse_mac2/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac2_control_port <= 0;
      else 
        last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac2_control_port <= ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac2_control_port ? 1 : (tse_mac2_control_port_arbitration_holdoff_internal | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port) ? 0 : last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac2_control_port;
    end


  //ethernet_port_interface_0_avalon_master_1_continuerequest continued request, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_continuerequest = last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port;

  assign master_0_qualified_request_tse_mac2_control_port = master_0_requests_tse_mac2_control_port & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))) | ethernet_port_interface_0_avalon_master_1_arbiterlock);
  //local readdatavalid master_0_read_data_valid_tse_mac2_control_port, which is an e_mux
  assign master_0_read_data_valid_tse_mac2_control_port = master_0_granted_tse_mac2_control_port & master_0_master_read & ~tse_mac2_control_port_waits_for_read;

  //allow new arb cycle for tse_mac2/control_port, which is an e_assign
  assign tse_mac2_control_port_allow_new_arb_cycle = ~ethernet_port_interface_0_avalon_master_1_arbiterlock & ~master_0_master_arbiterlock;

  //master_0/master assignment into master qualified-requests vector for tse_mac2/control_port, which is an e_assign
  assign tse_mac2_control_port_master_qreq_vector[0] = master_0_qualified_request_tse_mac2_control_port;

  //master_0/master grant tse_mac2/control_port, which is an e_assign
  assign master_0_granted_tse_mac2_control_port = tse_mac2_control_port_grant_vector[0];

  //master_0/master saved-grant tse_mac2/control_port, which is an e_assign
  assign master_0_saved_grant_tse_mac2_control_port = tse_mac2_control_port_arb_winner[0] && master_0_requests_tse_mac2_control_port;

  //ethernet_port_interface_0/avalon_master_1 assignment into master qualified-requests vector for tse_mac2/control_port, which is an e_assign
  assign tse_mac2_control_port_master_qreq_vector[1] = ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port;

  //ethernet_port_interface_0/avalon_master_1 grant tse_mac2/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port = tse_mac2_control_port_grant_vector[1];

  //ethernet_port_interface_0/avalon_master_1 saved-grant tse_mac2/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac2_control_port = tse_mac2_control_port_arb_winner[1] && ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port;

  //tse_mac2/control_port chosen-master double-vector, which is an e_assign
  assign tse_mac2_control_port_chosen_master_double_vector = {tse_mac2_control_port_master_qreq_vector, tse_mac2_control_port_master_qreq_vector} & ({~tse_mac2_control_port_master_qreq_vector, ~tse_mac2_control_port_master_qreq_vector} + tse_mac2_control_port_arb_addend);

  //stable onehot encoding of arb winner
  assign tse_mac2_control_port_arb_winner = (tse_mac2_control_port_allow_new_arb_cycle & | tse_mac2_control_port_grant_vector) ? tse_mac2_control_port_grant_vector : tse_mac2_control_port_saved_chosen_master_vector;

  //saved tse_mac2_control_port_grant_vector, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac2_control_port_saved_chosen_master_vector <= 0;
      else if (tse_mac2_control_port_allow_new_arb_cycle)
          tse_mac2_control_port_saved_chosen_master_vector <= |tse_mac2_control_port_grant_vector ? tse_mac2_control_port_grant_vector : tse_mac2_control_port_saved_chosen_master_vector;
    end


  //onehot encoding of chosen master
  assign tse_mac2_control_port_grant_vector = {(tse_mac2_control_port_chosen_master_double_vector[1] | tse_mac2_control_port_chosen_master_double_vector[3]),
    (tse_mac2_control_port_chosen_master_double_vector[0] | tse_mac2_control_port_chosen_master_double_vector[2])};

  //tse_mac2/control_port chosen master rotated left, which is an e_assign
  assign tse_mac2_control_port_chosen_master_rot_left = (tse_mac2_control_port_arb_winner << 1) ? (tse_mac2_control_port_arb_winner << 1) : 1;

  //tse_mac2/control_port's addend for next-master-grant
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac2_control_port_arb_addend <= 1;
      else if (|tse_mac2_control_port_grant_vector)
          tse_mac2_control_port_arb_addend <= tse_mac2_control_port_end_xfer? tse_mac2_control_port_chosen_master_rot_left : tse_mac2_control_port_grant_vector;
    end


  //~tse_mac2_control_port_reset assignment, which is an e_assign
  assign tse_mac2_control_port_reset = ~reset_n;

  //tse_mac2_control_port_firsttransfer first transaction, which is an e_assign
  assign tse_mac2_control_port_firsttransfer = tse_mac2_control_port_begins_xfer ? tse_mac2_control_port_unreg_firsttransfer : tse_mac2_control_port_reg_firsttransfer;

  //tse_mac2_control_port_unreg_firsttransfer first transaction, which is an e_assign
  assign tse_mac2_control_port_unreg_firsttransfer = ~(tse_mac2_control_port_slavearbiterlockenable & tse_mac2_control_port_any_continuerequest);

  //tse_mac2_control_port_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac2_control_port_reg_firsttransfer <= 1'b1;
      else if (tse_mac2_control_port_begins_xfer)
          tse_mac2_control_port_reg_firsttransfer <= tse_mac2_control_port_unreg_firsttransfer;
    end


  //tse_mac2_control_port_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign tse_mac2_control_port_beginbursttransfer_internal = tse_mac2_control_port_begins_xfer;

  //tse_mac2_control_port_arbitration_holdoff_internal arbitration_holdoff, which is an e_assign
  assign tse_mac2_control_port_arbitration_holdoff_internal = tse_mac2_control_port_begins_xfer & tse_mac2_control_port_firsttransfer;

  //tse_mac2_control_port_read assignment, which is an e_mux
  assign tse_mac2_control_port_read = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac2_control_port & master_0_master_read);

  //tse_mac2_control_port_write assignment, which is an e_mux
  assign tse_mac2_control_port_write = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac2_control_port & master_0_master_write);

  assign shifted_address_to_tse_mac2_control_port_from_ethernet_port_interface_0_avalon_master_1 = ethernet_port_interface_0_avalon_master_1_address_to_slave;
  //tse_mac2_control_port_address mux, which is an e_mux
  assign tse_mac2_control_port_address = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port)? (shifted_address_to_tse_mac2_control_port_from_ethernet_port_interface_0_avalon_master_1 >> 2) :
    (shifted_address_to_tse_mac2_control_port_from_master_0_master >> 2);

  assign shifted_address_to_tse_mac2_control_port_from_master_0_master = master_0_master_address_to_slave;
  //d1_tse_mac2_control_port_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_tse_mac2_control_port_end_xfer <= 1;
      else 
        d1_tse_mac2_control_port_end_xfer <= tse_mac2_control_port_end_xfer;
    end


  //tse_mac2_control_port_waits_for_read in a cycle, which is an e_mux
  assign tse_mac2_control_port_waits_for_read = tse_mac2_control_port_in_a_read_cycle & tse_mac2_control_port_waitrequest_from_sa;

  //tse_mac2_control_port_in_a_read_cycle assignment, which is an e_assign
  assign tse_mac2_control_port_in_a_read_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac2_control_port & master_0_master_read);

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = tse_mac2_control_port_in_a_read_cycle;

  //tse_mac2_control_port_waits_for_write in a cycle, which is an e_mux
  assign tse_mac2_control_port_waits_for_write = tse_mac2_control_port_in_a_write_cycle & tse_mac2_control_port_waitrequest_from_sa;

  //tse_mac2_control_port_in_a_write_cycle assignment, which is an e_assign
  assign tse_mac2_control_port_in_a_write_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac2_control_port & master_0_master_write);

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = tse_mac2_control_port_in_a_write_cycle;

  assign wait_for_tse_mac2_control_port_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //tse_mac2/control_port enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port + master_0_granted_tse_mac2_control_port > 1)
        begin
          $write("%0d ns: > 1 of grant signals are active simultaneously", $time);
          $stop;
        end
    end


  //saved_grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac2_control_port + master_0_saved_grant_tse_mac2_control_port > 1)
        begin
          $write("%0d ns: > 1 of saved_grant signals are active simultaneously", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac2_transmit_arbitrator (
                                      // inputs:
                                       clk,
                                       ethernet_port_interface_0_avalon_streaming_source_2_data,
                                       ethernet_port_interface_0_avalon_streaming_source_2_endofpacket,
                                       ethernet_port_interface_0_avalon_streaming_source_2_error,
                                       ethernet_port_interface_0_avalon_streaming_source_2_startofpacket,
                                       ethernet_port_interface_0_avalon_streaming_source_2_valid,
                                       reset_n,
                                       tse_mac2_transmit_ready,

                                      // outputs:
                                       tse_mac2_transmit_data,
                                       tse_mac2_transmit_endofpacket,
                                       tse_mac2_transmit_error,
                                       tse_mac2_transmit_ready_from_sa,
                                       tse_mac2_transmit_startofpacket,
                                       tse_mac2_transmit_valid
                                    )
;

  output  [  7: 0] tse_mac2_transmit_data;
  output           tse_mac2_transmit_endofpacket;
  output           tse_mac2_transmit_error;
  output           tse_mac2_transmit_ready_from_sa;
  output           tse_mac2_transmit_startofpacket;
  output           tse_mac2_transmit_valid;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_2_data;
  input            ethernet_port_interface_0_avalon_streaming_source_2_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_2_error;
  input            ethernet_port_interface_0_avalon_streaming_source_2_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_2_valid;
  input            reset_n;
  input            tse_mac2_transmit_ready;

  wire    [  7: 0] tse_mac2_transmit_data;
  wire             tse_mac2_transmit_endofpacket;
  wire             tse_mac2_transmit_error;
  wire             tse_mac2_transmit_ready_from_sa;
  wire             tse_mac2_transmit_startofpacket;
  wire             tse_mac2_transmit_valid;
  //mux tse_mac2_transmit_data, which is an e_mux
  assign tse_mac2_transmit_data = ethernet_port_interface_0_avalon_streaming_source_2_data;

  //mux tse_mac2_transmit_endofpacket, which is an e_mux
  assign tse_mac2_transmit_endofpacket = ethernet_port_interface_0_avalon_streaming_source_2_endofpacket;

  //mux tse_mac2_transmit_error, which is an e_mux
  assign tse_mac2_transmit_error = ethernet_port_interface_0_avalon_streaming_source_2_error;

  //assign tse_mac2_transmit_ready_from_sa = tse_mac2_transmit_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac2_transmit_ready_from_sa = tse_mac2_transmit_ready;

  //mux tse_mac2_transmit_startofpacket, which is an e_mux
  assign tse_mac2_transmit_startofpacket = ethernet_port_interface_0_avalon_streaming_source_2_startofpacket;

  //mux tse_mac2_transmit_valid, which is an e_mux
  assign tse_mac2_transmit_valid = ethernet_port_interface_0_avalon_streaming_source_2_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac2_receive_arbitrator (
                                     // inputs:
                                      clk,
                                      ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa,
                                      reset_n,
                                      tse_mac2_receive_data,
                                      tse_mac2_receive_endofpacket,
                                      tse_mac2_receive_error,
                                      tse_mac2_receive_startofpacket,
                                      tse_mac2_receive_valid,

                                     // outputs:
                                      tse_mac2_receive_ready
                                   )
;

  output           tse_mac2_receive_ready;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa;
  input            reset_n;
  input   [  7: 0] tse_mac2_receive_data;
  input            tse_mac2_receive_endofpacket;
  input   [  5: 0] tse_mac2_receive_error;
  input            tse_mac2_receive_startofpacket;
  input            tse_mac2_receive_valid;

  wire             tse_mac2_receive_ready;
  //mux tse_mac2_receive_ready, which is an e_mux
  assign tse_mac2_receive_ready = ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac3_control_port_arbitrator (
                                          // inputs:
                                           clk,
                                           ethernet_port_interface_0_avalon_master_1_address_to_slave,
                                           ethernet_port_interface_0_avalon_master_1_latency_counter,
                                           ethernet_port_interface_0_avalon_master_1_read,
                                           ethernet_port_interface_0_avalon_master_1_write,
                                           ethernet_port_interface_0_avalon_master_1_writedata,
                                           master_0_latency_counter,
                                           master_0_master_address_to_slave,
                                           master_0_master_read,
                                           master_0_master_write,
                                           master_0_master_writedata,
                                           master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register,
                                           reset_n,
                                           tse_mac3_control_port_readdata,
                                           tse_mac3_control_port_waitrequest,

                                          // outputs:
                                           d1_tse_mac3_control_port_end_xfer,
                                           ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port,
                                           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port,
                                           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port,
                                           ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port,
                                           master_0_granted_tse_mac3_control_port,
                                           master_0_qualified_request_tse_mac3_control_port,
                                           master_0_read_data_valid_tse_mac3_control_port,
                                           master_0_requests_tse_mac3_control_port,
                                           tse_mac3_control_port_address,
                                           tse_mac3_control_port_read,
                                           tse_mac3_control_port_readdata_from_sa,
                                           tse_mac3_control_port_reset,
                                           tse_mac3_control_port_waitrequest_from_sa,
                                           tse_mac3_control_port_write,
                                           tse_mac3_control_port_writedata
                                        )
;

  output           d1_tse_mac3_control_port_end_xfer;
  output           ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port;
  output           ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port;
  output           ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port;
  output           ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port;
  output           master_0_granted_tse_mac3_control_port;
  output           master_0_qualified_request_tse_mac3_control_port;
  output           master_0_read_data_valid_tse_mac3_control_port;
  output           master_0_requests_tse_mac3_control_port;
  output  [  7: 0] tse_mac3_control_port_address;
  output           tse_mac3_control_port_read;
  output  [ 31: 0] tse_mac3_control_port_readdata_from_sa;
  output           tse_mac3_control_port_reset;
  output           tse_mac3_control_port_waitrequest_from_sa;
  output           tse_mac3_control_port_write;
  output  [ 31: 0] tse_mac3_control_port_writedata;
  input            clk;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  input            ethernet_port_interface_0_avalon_master_1_latency_counter;
  input            ethernet_port_interface_0_avalon_master_1_read;
  input            ethernet_port_interface_0_avalon_master_1_write;
  input   [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata;
  input            master_0_latency_counter;
  input   [ 31: 0] master_0_master_address_to_slave;
  input            master_0_master_read;
  input            master_0_master_write;
  input   [ 31: 0] master_0_master_writedata;
  input            master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  input            reset_n;
  input   [ 31: 0] tse_mac3_control_port_readdata;
  input            tse_mac3_control_port_waitrequest;

  reg              d1_reasons_to_wait;
  reg              d1_tse_mac3_control_port_end_xfer;
  reg              enable_nonzero_assertions;
  wire             end_xfer_arb_share_counter_term_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock;
  wire             ethernet_port_interface_0_avalon_master_1_arbiterlock2;
  wire             ethernet_port_interface_0_avalon_master_1_continuerequest;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac3_control_port;
  wire             in_a_read_cycle;
  wire             in_a_write_cycle;
  reg              last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac3_control_port;
  reg              last_cycle_master_0_master_granted_slave_tse_mac3_control_port;
  wire             master_0_granted_tse_mac3_control_port;
  wire             master_0_master_arbiterlock;
  wire             master_0_master_arbiterlock2;
  wire             master_0_master_continuerequest;
  wire             master_0_qualified_request_tse_mac3_control_port;
  wire             master_0_read_data_valid_tse_mac3_control_port;
  wire             master_0_requests_tse_mac3_control_port;
  wire             master_0_saved_grant_tse_mac3_control_port;
  wire    [ 31: 0] shifted_address_to_tse_mac3_control_port_from_ethernet_port_interface_0_avalon_master_1;
  wire    [ 31: 0] shifted_address_to_tse_mac3_control_port_from_master_0_master;
  wire    [  7: 0] tse_mac3_control_port_address;
  wire             tse_mac3_control_port_allgrants;
  wire             tse_mac3_control_port_allow_new_arb_cycle;
  wire             tse_mac3_control_port_any_bursting_master_saved_grant;
  wire             tse_mac3_control_port_any_continuerequest;
  reg     [  1: 0] tse_mac3_control_port_arb_addend;
  wire             tse_mac3_control_port_arb_counter_enable;
  reg              tse_mac3_control_port_arb_share_counter;
  wire             tse_mac3_control_port_arb_share_counter_next_value;
  wire             tse_mac3_control_port_arb_share_set_values;
  wire    [  1: 0] tse_mac3_control_port_arb_winner;
  wire             tse_mac3_control_port_arbitration_holdoff_internal;
  wire             tse_mac3_control_port_beginbursttransfer_internal;
  wire             tse_mac3_control_port_begins_xfer;
  wire    [  3: 0] tse_mac3_control_port_chosen_master_double_vector;
  wire    [  1: 0] tse_mac3_control_port_chosen_master_rot_left;
  wire             tse_mac3_control_port_end_xfer;
  wire             tse_mac3_control_port_firsttransfer;
  wire    [  1: 0] tse_mac3_control_port_grant_vector;
  wire             tse_mac3_control_port_in_a_read_cycle;
  wire             tse_mac3_control_port_in_a_write_cycle;
  wire    [  1: 0] tse_mac3_control_port_master_qreq_vector;
  wire             tse_mac3_control_port_non_bursting_master_requests;
  wire             tse_mac3_control_port_read;
  wire    [ 31: 0] tse_mac3_control_port_readdata_from_sa;
  reg              tse_mac3_control_port_reg_firsttransfer;
  wire             tse_mac3_control_port_reset;
  reg     [  1: 0] tse_mac3_control_port_saved_chosen_master_vector;
  reg              tse_mac3_control_port_slavearbiterlockenable;
  wire             tse_mac3_control_port_slavearbiterlockenable2;
  wire             tse_mac3_control_port_unreg_firsttransfer;
  wire             tse_mac3_control_port_waitrequest_from_sa;
  wire             tse_mac3_control_port_waits_for_read;
  wire             tse_mac3_control_port_waits_for_write;
  wire             tse_mac3_control_port_write;
  wire    [ 31: 0] tse_mac3_control_port_writedata;
  wire             wait_for_tse_mac3_control_port_counter;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_reasons_to_wait <= 0;
      else 
        d1_reasons_to_wait <= ~tse_mac3_control_port_end_xfer;
    end


  assign tse_mac3_control_port_begins_xfer = ~d1_reasons_to_wait & ((ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port | master_0_qualified_request_tse_mac3_control_port));
  //assign tse_mac3_control_port_readdata_from_sa = tse_mac3_control_port_readdata so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac3_control_port_readdata_from_sa = tse_mac3_control_port_readdata;

  assign ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port = ({ethernet_port_interface_0_avalon_master_1_address_to_slave[31 : 10] , 10'b0} == 32'h20000c00) & (ethernet_port_interface_0_avalon_master_1_read | ethernet_port_interface_0_avalon_master_1_write);
  //assign tse_mac3_control_port_waitrequest_from_sa = tse_mac3_control_port_waitrequest so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac3_control_port_waitrequest_from_sa = tse_mac3_control_port_waitrequest;

  //tse_mac3_control_port_arb_share_counter set values, which is an e_mux
  assign tse_mac3_control_port_arb_share_set_values = 1;

  //tse_mac3_control_port_non_bursting_master_requests mux, which is an e_mux
  assign tse_mac3_control_port_non_bursting_master_requests = ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port |
    master_0_requests_tse_mac3_control_port |
    ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port |
    master_0_requests_tse_mac3_control_port;

  //tse_mac3_control_port_any_bursting_master_saved_grant mux, which is an e_mux
  assign tse_mac3_control_port_any_bursting_master_saved_grant = 0;

  //tse_mac3_control_port_arb_share_counter_next_value assignment, which is an e_assign
  assign tse_mac3_control_port_arb_share_counter_next_value = tse_mac3_control_port_firsttransfer ? (tse_mac3_control_port_arb_share_set_values - 1) : |tse_mac3_control_port_arb_share_counter ? (tse_mac3_control_port_arb_share_counter - 1) : 0;

  //tse_mac3_control_port_allgrants all slave grants, which is an e_mux
  assign tse_mac3_control_port_allgrants = (|tse_mac3_control_port_grant_vector) |
    (|tse_mac3_control_port_grant_vector) |
    (|tse_mac3_control_port_grant_vector) |
    (|tse_mac3_control_port_grant_vector);

  //tse_mac3_control_port_end_xfer assignment, which is an e_assign
  assign tse_mac3_control_port_end_xfer = ~(tse_mac3_control_port_waits_for_read | tse_mac3_control_port_waits_for_write);

  //end_xfer_arb_share_counter_term_tse_mac3_control_port arb share counter enable term, which is an e_assign
  assign end_xfer_arb_share_counter_term_tse_mac3_control_port = tse_mac3_control_port_end_xfer & (~tse_mac3_control_port_any_bursting_master_saved_grant | in_a_read_cycle | in_a_write_cycle);

  //tse_mac3_control_port_arb_share_counter arbitration counter enable, which is an e_assign
  assign tse_mac3_control_port_arb_counter_enable = (end_xfer_arb_share_counter_term_tse_mac3_control_port & tse_mac3_control_port_allgrants) | (end_xfer_arb_share_counter_term_tse_mac3_control_port & ~tse_mac3_control_port_non_bursting_master_requests);

  //tse_mac3_control_port_arb_share_counter counter, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac3_control_port_arb_share_counter <= 0;
      else if (tse_mac3_control_port_arb_counter_enable)
          tse_mac3_control_port_arb_share_counter <= tse_mac3_control_port_arb_share_counter_next_value;
    end


  //tse_mac3_control_port_slavearbiterlockenable slave enables arbiterlock, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac3_control_port_slavearbiterlockenable <= 0;
      else if ((|tse_mac3_control_port_master_qreq_vector & end_xfer_arb_share_counter_term_tse_mac3_control_port) | (end_xfer_arb_share_counter_term_tse_mac3_control_port & ~tse_mac3_control_port_non_bursting_master_requests))
          tse_mac3_control_port_slavearbiterlockenable <= |tse_mac3_control_port_arb_share_counter_next_value;
    end


  //ethernet_port_interface_0/avalon_master_1 tse_mac3/control_port arbiterlock, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock = tse_mac3_control_port_slavearbiterlockenable & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //tse_mac3_control_port_slavearbiterlockenable2 slave enables arbiterlock2, which is an e_assign
  assign tse_mac3_control_port_slavearbiterlockenable2 = |tse_mac3_control_port_arb_share_counter_next_value;

  //ethernet_port_interface_0/avalon_master_1 tse_mac3/control_port arbiterlock2, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_arbiterlock2 = tse_mac3_control_port_slavearbiterlockenable2 & ethernet_port_interface_0_avalon_master_1_continuerequest;

  //master_0/master tse_mac3/control_port arbiterlock, which is an e_assign
  assign master_0_master_arbiterlock = tse_mac3_control_port_slavearbiterlockenable & master_0_master_continuerequest;

  //master_0/master tse_mac3/control_port arbiterlock2, which is an e_assign
  assign master_0_master_arbiterlock2 = tse_mac3_control_port_slavearbiterlockenable2 & master_0_master_continuerequest;

  //master_0/master granted tse_mac3/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_master_0_master_granted_slave_tse_mac3_control_port <= 0;
      else 
        last_cycle_master_0_master_granted_slave_tse_mac3_control_port <= master_0_saved_grant_tse_mac3_control_port ? 1 : (tse_mac3_control_port_arbitration_holdoff_internal | ~master_0_requests_tse_mac3_control_port) ? 0 : last_cycle_master_0_master_granted_slave_tse_mac3_control_port;
    end


  //master_0_master_continuerequest continued request, which is an e_mux
  assign master_0_master_continuerequest = last_cycle_master_0_master_granted_slave_tse_mac3_control_port & master_0_requests_tse_mac3_control_port;

  //tse_mac3_control_port_any_continuerequest at least one master continues requesting, which is an e_mux
  assign tse_mac3_control_port_any_continuerequest = master_0_master_continuerequest |
    ethernet_port_interface_0_avalon_master_1_continuerequest;

  assign ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port = ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port & ~((ethernet_port_interface_0_avalon_master_1_read & ((ethernet_port_interface_0_avalon_master_1_latency_counter != 0))) | master_0_master_arbiterlock);
  //local readdatavalid ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port = ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_read & ~tse_mac3_control_port_waits_for_read;

  //tse_mac3_control_port_writedata mux, which is an e_mux
  assign tse_mac3_control_port_writedata = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port)? ethernet_port_interface_0_avalon_master_1_writedata :
    master_0_master_writedata;

  assign master_0_requests_tse_mac3_control_port = ({master_0_master_address_to_slave[31 : 10] , 10'b0} == 32'h20000c00) & (master_0_master_read | master_0_master_write);
  //ethernet_port_interface_0/avalon_master_1 granted tse_mac3/control_port last time, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac3_control_port <= 0;
      else 
        last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac3_control_port <= ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac3_control_port ? 1 : (tse_mac3_control_port_arbitration_holdoff_internal | ~ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port) ? 0 : last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac3_control_port;
    end


  //ethernet_port_interface_0_avalon_master_1_continuerequest continued request, which is an e_mux
  assign ethernet_port_interface_0_avalon_master_1_continuerequest = last_cycle_ethernet_port_interface_0_avalon_master_1_granted_slave_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port;

  assign master_0_qualified_request_tse_mac3_control_port = master_0_requests_tse_mac3_control_port & ~((master_0_master_read & ((master_0_latency_counter != 0) | (|master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register))) | ethernet_port_interface_0_avalon_master_1_arbiterlock);
  //local readdatavalid master_0_read_data_valid_tse_mac3_control_port, which is an e_mux
  assign master_0_read_data_valid_tse_mac3_control_port = master_0_granted_tse_mac3_control_port & master_0_master_read & ~tse_mac3_control_port_waits_for_read;

  //allow new arb cycle for tse_mac3/control_port, which is an e_assign
  assign tse_mac3_control_port_allow_new_arb_cycle = ~ethernet_port_interface_0_avalon_master_1_arbiterlock & ~master_0_master_arbiterlock;

  //master_0/master assignment into master qualified-requests vector for tse_mac3/control_port, which is an e_assign
  assign tse_mac3_control_port_master_qreq_vector[0] = master_0_qualified_request_tse_mac3_control_port;

  //master_0/master grant tse_mac3/control_port, which is an e_assign
  assign master_0_granted_tse_mac3_control_port = tse_mac3_control_port_grant_vector[0];

  //master_0/master saved-grant tse_mac3/control_port, which is an e_assign
  assign master_0_saved_grant_tse_mac3_control_port = tse_mac3_control_port_arb_winner[0] && master_0_requests_tse_mac3_control_port;

  //ethernet_port_interface_0/avalon_master_1 assignment into master qualified-requests vector for tse_mac3/control_port, which is an e_assign
  assign tse_mac3_control_port_master_qreq_vector[1] = ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port;

  //ethernet_port_interface_0/avalon_master_1 grant tse_mac3/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port = tse_mac3_control_port_grant_vector[1];

  //ethernet_port_interface_0/avalon_master_1 saved-grant tse_mac3/control_port, which is an e_assign
  assign ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac3_control_port = tse_mac3_control_port_arb_winner[1] && ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port;

  //tse_mac3/control_port chosen-master double-vector, which is an e_assign
  assign tse_mac3_control_port_chosen_master_double_vector = {tse_mac3_control_port_master_qreq_vector, tse_mac3_control_port_master_qreq_vector} & ({~tse_mac3_control_port_master_qreq_vector, ~tse_mac3_control_port_master_qreq_vector} + tse_mac3_control_port_arb_addend);

  //stable onehot encoding of arb winner
  assign tse_mac3_control_port_arb_winner = (tse_mac3_control_port_allow_new_arb_cycle & | tse_mac3_control_port_grant_vector) ? tse_mac3_control_port_grant_vector : tse_mac3_control_port_saved_chosen_master_vector;

  //saved tse_mac3_control_port_grant_vector, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac3_control_port_saved_chosen_master_vector <= 0;
      else if (tse_mac3_control_port_allow_new_arb_cycle)
          tse_mac3_control_port_saved_chosen_master_vector <= |tse_mac3_control_port_grant_vector ? tse_mac3_control_port_grant_vector : tse_mac3_control_port_saved_chosen_master_vector;
    end


  //onehot encoding of chosen master
  assign tse_mac3_control_port_grant_vector = {(tse_mac3_control_port_chosen_master_double_vector[1] | tse_mac3_control_port_chosen_master_double_vector[3]),
    (tse_mac3_control_port_chosen_master_double_vector[0] | tse_mac3_control_port_chosen_master_double_vector[2])};

  //tse_mac3/control_port chosen master rotated left, which is an e_assign
  assign tse_mac3_control_port_chosen_master_rot_left = (tse_mac3_control_port_arb_winner << 1) ? (tse_mac3_control_port_arb_winner << 1) : 1;

  //tse_mac3/control_port's addend for next-master-grant
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac3_control_port_arb_addend <= 1;
      else if (|tse_mac3_control_port_grant_vector)
          tse_mac3_control_port_arb_addend <= tse_mac3_control_port_end_xfer? tse_mac3_control_port_chosen_master_rot_left : tse_mac3_control_port_grant_vector;
    end


  //~tse_mac3_control_port_reset assignment, which is an e_assign
  assign tse_mac3_control_port_reset = ~reset_n;

  //tse_mac3_control_port_firsttransfer first transaction, which is an e_assign
  assign tse_mac3_control_port_firsttransfer = tse_mac3_control_port_begins_xfer ? tse_mac3_control_port_unreg_firsttransfer : tse_mac3_control_port_reg_firsttransfer;

  //tse_mac3_control_port_unreg_firsttransfer first transaction, which is an e_assign
  assign tse_mac3_control_port_unreg_firsttransfer = ~(tse_mac3_control_port_slavearbiterlockenable & tse_mac3_control_port_any_continuerequest);

  //tse_mac3_control_port_reg_firsttransfer first transaction, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          tse_mac3_control_port_reg_firsttransfer <= 1'b1;
      else if (tse_mac3_control_port_begins_xfer)
          tse_mac3_control_port_reg_firsttransfer <= tse_mac3_control_port_unreg_firsttransfer;
    end


  //tse_mac3_control_port_beginbursttransfer_internal begin burst transfer, which is an e_assign
  assign tse_mac3_control_port_beginbursttransfer_internal = tse_mac3_control_port_begins_xfer;

  //tse_mac3_control_port_arbitration_holdoff_internal arbitration_holdoff, which is an e_assign
  assign tse_mac3_control_port_arbitration_holdoff_internal = tse_mac3_control_port_begins_xfer & tse_mac3_control_port_firsttransfer;

  //tse_mac3_control_port_read assignment, which is an e_mux
  assign tse_mac3_control_port_read = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac3_control_port & master_0_master_read);

  //tse_mac3_control_port_write assignment, which is an e_mux
  assign tse_mac3_control_port_write = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac3_control_port & master_0_master_write);

  assign shifted_address_to_tse_mac3_control_port_from_ethernet_port_interface_0_avalon_master_1 = ethernet_port_interface_0_avalon_master_1_address_to_slave;
  //tse_mac3_control_port_address mux, which is an e_mux
  assign tse_mac3_control_port_address = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port)? (shifted_address_to_tse_mac3_control_port_from_ethernet_port_interface_0_avalon_master_1 >> 2) :
    (shifted_address_to_tse_mac3_control_port_from_master_0_master >> 2);

  assign shifted_address_to_tse_mac3_control_port_from_master_0_master = master_0_master_address_to_slave;
  //d1_tse_mac3_control_port_end_xfer register, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          d1_tse_mac3_control_port_end_xfer <= 1;
      else 
        d1_tse_mac3_control_port_end_xfer <= tse_mac3_control_port_end_xfer;
    end


  //tse_mac3_control_port_waits_for_read in a cycle, which is an e_mux
  assign tse_mac3_control_port_waits_for_read = tse_mac3_control_port_in_a_read_cycle & tse_mac3_control_port_waitrequest_from_sa;

  //tse_mac3_control_port_in_a_read_cycle assignment, which is an e_assign
  assign tse_mac3_control_port_in_a_read_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_read) | (master_0_granted_tse_mac3_control_port & master_0_master_read);

  //in_a_read_cycle assignment, which is an e_mux
  assign in_a_read_cycle = tse_mac3_control_port_in_a_read_cycle;

  //tse_mac3_control_port_waits_for_write in a cycle, which is an e_mux
  assign tse_mac3_control_port_waits_for_write = tse_mac3_control_port_in_a_write_cycle & tse_mac3_control_port_waitrequest_from_sa;

  //tse_mac3_control_port_in_a_write_cycle assignment, which is an e_assign
  assign tse_mac3_control_port_in_a_write_cycle = (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port & ethernet_port_interface_0_avalon_master_1_write) | (master_0_granted_tse_mac3_control_port & master_0_master_write);

  //in_a_write_cycle assignment, which is an e_mux
  assign in_a_write_cycle = tse_mac3_control_port_in_a_write_cycle;

  assign wait_for_tse_mac3_control_port_counter = 0;

//synthesis translate_off
//////////////// SIMULATION-ONLY CONTENTS
  //tse_mac3/control_port enable non-zero assertions, which is an e_register
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          enable_nonzero_assertions <= 0;
      else 
        enable_nonzero_assertions <= 1'b1;
    end


  //grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port + master_0_granted_tse_mac3_control_port > 1)
        begin
          $write("%0d ns: > 1 of grant signals are active simultaneously", $time);
          $stop;
        end
    end


  //saved_grant signals are active simultaneously, which is an e_process
  always @(posedge clk)
    begin
      if (ethernet_port_interface_0_avalon_master_1_saved_grant_tse_mac3_control_port + master_0_saved_grant_tse_mac3_control_port > 1)
        begin
          $write("%0d ns: > 1 of saved_grant signals are active simultaneously", $time);
          $stop;
        end
    end



//////////////// END SIMULATION-ONLY CONTENTS

//synthesis translate_on

endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac3_transmit_arbitrator (
                                      // inputs:
                                       clk,
                                       ethernet_port_interface_0_avalon_streaming_source_3_data,
                                       ethernet_port_interface_0_avalon_streaming_source_3_endofpacket,
                                       ethernet_port_interface_0_avalon_streaming_source_3_error,
                                       ethernet_port_interface_0_avalon_streaming_source_3_startofpacket,
                                       ethernet_port_interface_0_avalon_streaming_source_3_valid,
                                       reset_n,
                                       tse_mac3_transmit_ready,

                                      // outputs:
                                       tse_mac3_transmit_data,
                                       tse_mac3_transmit_endofpacket,
                                       tse_mac3_transmit_error,
                                       tse_mac3_transmit_ready_from_sa,
                                       tse_mac3_transmit_startofpacket,
                                       tse_mac3_transmit_valid
                                    )
;

  output  [  7: 0] tse_mac3_transmit_data;
  output           tse_mac3_transmit_endofpacket;
  output           tse_mac3_transmit_error;
  output           tse_mac3_transmit_ready_from_sa;
  output           tse_mac3_transmit_startofpacket;
  output           tse_mac3_transmit_valid;
  input            clk;
  input   [  7: 0] ethernet_port_interface_0_avalon_streaming_source_3_data;
  input            ethernet_port_interface_0_avalon_streaming_source_3_endofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_3_error;
  input            ethernet_port_interface_0_avalon_streaming_source_3_startofpacket;
  input            ethernet_port_interface_0_avalon_streaming_source_3_valid;
  input            reset_n;
  input            tse_mac3_transmit_ready;

  wire    [  7: 0] tse_mac3_transmit_data;
  wire             tse_mac3_transmit_endofpacket;
  wire             tse_mac3_transmit_error;
  wire             tse_mac3_transmit_ready_from_sa;
  wire             tse_mac3_transmit_startofpacket;
  wire             tse_mac3_transmit_valid;
  //mux tse_mac3_transmit_data, which is an e_mux
  assign tse_mac3_transmit_data = ethernet_port_interface_0_avalon_streaming_source_3_data;

  //mux tse_mac3_transmit_endofpacket, which is an e_mux
  assign tse_mac3_transmit_endofpacket = ethernet_port_interface_0_avalon_streaming_source_3_endofpacket;

  //mux tse_mac3_transmit_error, which is an e_mux
  assign tse_mac3_transmit_error = ethernet_port_interface_0_avalon_streaming_source_3_error;

  //assign tse_mac3_transmit_ready_from_sa = tse_mac3_transmit_ready so that symbol knows where to group signals which may go to master only, which is an e_assign
  assign tse_mac3_transmit_ready_from_sa = tse_mac3_transmit_ready;

  //mux tse_mac3_transmit_startofpacket, which is an e_mux
  assign tse_mac3_transmit_startofpacket = ethernet_port_interface_0_avalon_streaming_source_3_startofpacket;

  //mux tse_mac3_transmit_valid, which is an e_mux
  assign tse_mac3_transmit_valid = ethernet_port_interface_0_avalon_streaming_source_3_valid;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module tse_mac3_receive_arbitrator (
                                     // inputs:
                                      clk,
                                      ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa,
                                      reset_n,
                                      tse_mac3_receive_data,
                                      tse_mac3_receive_endofpacket,
                                      tse_mac3_receive_error,
                                      tse_mac3_receive_startofpacket,
                                      tse_mac3_receive_valid,

                                     // outputs:
                                      tse_mac3_receive_ready
                                   )
;

  output           tse_mac3_receive_ready;
  input            clk;
  input            ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa;
  input            reset_n;
  input   [  7: 0] tse_mac3_receive_data;
  input            tse_mac3_receive_endofpacket;
  input   [  5: 0] tse_mac3_receive_error;
  input            tse_mac3_receive_startofpacket;
  input            tse_mac3_receive_valid;

  wire             tse_mac3_receive_ready;
  //mux tse_mac3_receive_ready, which is an e_mux
  assign tse_mac3_receive_ready = ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa;


endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_reset_pll_sys_clk_domain_synch_module (
                                                        // inputs:
                                                         clk,
                                                         data_in,
                                                         reset_n,

                                                        // outputs:
                                                         data_out
                                                      )
;

  output           data_out;
  input            clk;
  input            data_in;
  input            reset_n;

  reg              data_in_d1 /* synthesis ALTERA_ATTRIBUTE = "{-from \"*\"} CUT=ON ; PRESERVE_REGISTER=ON ; SUPPRESS_DA_RULE_INTERNAL=R101"  */;
  reg              data_out /* synthesis ALTERA_ATTRIBUTE = "PRESERVE_REGISTER=ON ; SUPPRESS_DA_RULE_INTERNAL=R101"  */;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          data_in_d1 <= 0;
      else 
        data_in_d1 <= data_in;
    end


  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          data_out <= 0;
      else 
        data_out <= data_in_d1;
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_reset_pll_c1_out_domain_synch_module (
                                                       // inputs:
                                                        clk,
                                                        data_in,
                                                        reset_n,

                                                       // outputs:
                                                        data_out
                                                     )
;

  output           data_out;
  input            clk;
  input            data_in;
  input            reset_n;

  reg              data_in_d1 /* synthesis ALTERA_ATTRIBUTE = "{-from \"*\"} CUT=ON ; PRESERVE_REGISTER=ON ; SUPPRESS_DA_RULE_INTERNAL=R101"  */;
  reg              data_out /* synthesis ALTERA_ATTRIBUTE = "PRESERVE_REGISTER=ON ; SUPPRESS_DA_RULE_INTERNAL=R101"  */;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          data_in_d1 <= 0;
      else 
        data_in_d1 <= data_in;
    end


  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          data_out <= 0;
      else 
        data_out <= data_in_d1;
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC_reset_ext_clk_domain_synch_module (
                                                    // inputs:
                                                     clk,
                                                     data_in,
                                                     reset_n,

                                                    // outputs:
                                                     data_out
                                                  )
;

  output           data_out;
  input            clk;
  input            data_in;
  input            reset_n;

  reg              data_in_d1 /* synthesis ALTERA_ATTRIBUTE = "{-from \"*\"} CUT=ON ; PRESERVE_REGISTER=ON ; SUPPRESS_DA_RULE_INTERNAL=R101"  */;
  reg              data_out /* synthesis ALTERA_ATTRIBUTE = "PRESERVE_REGISTER=ON ; SUPPRESS_DA_RULE_INTERNAL=R101"  */;
  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          data_in_d1 <= 0;
      else 
        data_in_d1 <= data_in;
    end


  always @(posedge clk or negedge reset_n)
    begin
      if (reset_n == 0)
          data_out <= 0;
      else 
        data_out <= data_in_d1;
    end



endmodule


// synthesis translate_off
`timescale 1ns / 1ps
// synthesis translate_on

// turn off superfluous verilog processor warnings 
// altera message_level Level1 
// altera message_off 10034 10035 10036 10037 10230 10240 10030 

module DE4_SOPC (
                  // 1) global signals:
                   cal_blk_clk_0,
                   ext_clk,
                   pll_c1_out,
                   pll_sys_clk,
                   reset_n,

                  // the_ethernet_port_interface_0
                   protocol_to_the_ethernet_port_interface_0,
                   user_sw_to_the_ethernet_port_interface_0,

                  // the_led_pio
                   out_port_from_the_led_pio,

                  // the_pb_pio
                   in_port_to_the_pb_pio,

                  // the_pcie_compiler_0
                   busy_altgxb_reconfig_pcie_compiler_0,
                   clk125_out_pcie_compiler_0,
                   clk250_out_pcie_compiler_0,
                   clk500_out_pcie_compiler_0,
                   fixedclk_serdes_pcie_compiler_0,
                   gxb_powerdown_pcie_compiler_0,
                   pcie_rstn_pcie_compiler_0,
                   phystatus_ext_pcie_compiler_0,
                   pipe_mode_pcie_compiler_0,
                   pll_powerdown_pcie_compiler_0,
                   powerdown_ext_pcie_compiler_0,
                   rate_ext_pcie_compiler_0,
                   reconfig_clk_pcie_compiler_0,
                   reconfig_fromgxb_pcie_compiler_0,
                   reconfig_togxb_pcie_compiler_0,
                   refclk_pcie_compiler_0,
                   rx_in0_pcie_compiler_0,
                   rxdata0_ext_pcie_compiler_0,
                   rxdatak0_ext_pcie_compiler_0,
                   rxelecidle0_ext_pcie_compiler_0,
                   rxpolarity0_ext_pcie_compiler_0,
                   rxstatus0_ext_pcie_compiler_0,
                   rxvalid0_ext_pcie_compiler_0,
                   test_in_pcie_compiler_0,
                   test_out_pcie_compiler_0,
                   tx_out0_pcie_compiler_0,
                   txcompl0_ext_pcie_compiler_0,
                   txdata0_ext_pcie_compiler_0,
                   txdatak0_ext_pcie_compiler_0,
                   txdetectrx_ext_pcie_compiler_0,
                   txelecidle0_ext_pcie_compiler_0,

                  // the_seven_seg_pio
                   out_port_from_the_seven_seg_pio,

                  // the_sw_pio
                   in_port_to_the_sw_pio,

                  // the_tse_mac
                   led_an_from_the_tse_mac,
                   led_char_err_from_the_tse_mac,
                   led_col_from_the_tse_mac,
                   led_crs_from_the_tse_mac,
                   led_disp_err_from_the_tse_mac,
                   led_link_from_the_tse_mac,
                   mdc_from_the_tse_mac,
                   mdio_in_to_the_tse_mac,
                   mdio_oen_from_the_tse_mac,
                   mdio_out_from_the_tse_mac,
                   ref_clk_to_the_tse_mac,
                   rx_recovclkout_from_the_tse_mac,
                   rxp_to_the_tse_mac,
                   txp_from_the_tse_mac,

                  // the_tse_mac1
                   led_an_from_the_tse_mac1,
                   led_char_err_from_the_tse_mac1,
                   led_col_from_the_tse_mac1,
                   led_crs_from_the_tse_mac1,
                   led_disp_err_from_the_tse_mac1,
                   led_link_from_the_tse_mac1,
                   mdc_from_the_tse_mac1,
                   mdio_in_to_the_tse_mac1,
                   mdio_oen_from_the_tse_mac1,
                   mdio_out_from_the_tse_mac1,
                   ref_clk_to_the_tse_mac1,
                   rx_recovclkout_from_the_tse_mac1,
                   rxp_to_the_tse_mac1,
                   txp_from_the_tse_mac1,

                  // the_tse_mac2
                   led_an_from_the_tse_mac2,
                   led_char_err_from_the_tse_mac2,
                   led_col_from_the_tse_mac2,
                   led_crs_from_the_tse_mac2,
                   led_disp_err_from_the_tse_mac2,
                   led_link_from_the_tse_mac2,
                   mdc_from_the_tse_mac2,
                   mdio_in_to_the_tse_mac2,
                   mdio_oen_from_the_tse_mac2,
                   mdio_out_from_the_tse_mac2,
                   ref_clk_to_the_tse_mac2,
                   rx_recovclkout_from_the_tse_mac2,
                   rxp_to_the_tse_mac2,
                   txp_from_the_tse_mac2,

                  // the_tse_mac3
                   led_an_from_the_tse_mac3,
                   led_char_err_from_the_tse_mac3,
                   led_col_from_the_tse_mac3,
                   led_crs_from_the_tse_mac3,
                   led_disp_err_from_the_tse_mac3,
                   led_link_from_the_tse_mac3,
                   mdc_from_the_tse_mac3,
                   mdio_in_to_the_tse_mac3,
                   mdio_oen_from_the_tse_mac3,
                   mdio_out_from_the_tse_mac3,
                   ref_clk_to_the_tse_mac3,
                   rx_recovclkout_from_the_tse_mac3,
                   rxp_to_the_tse_mac3,
                   txp_from_the_tse_mac3
                )
;

  output           clk125_out_pcie_compiler_0;
  output           clk250_out_pcie_compiler_0;
  output           clk500_out_pcie_compiler_0;
  output           led_an_from_the_tse_mac;
  output           led_an_from_the_tse_mac1;
  output           led_an_from_the_tse_mac2;
  output           led_an_from_the_tse_mac3;
  output           led_char_err_from_the_tse_mac;
  output           led_char_err_from_the_tse_mac1;
  output           led_char_err_from_the_tse_mac2;
  output           led_char_err_from_the_tse_mac3;
  output           led_col_from_the_tse_mac;
  output           led_col_from_the_tse_mac1;
  output           led_col_from_the_tse_mac2;
  output           led_col_from_the_tse_mac3;
  output           led_crs_from_the_tse_mac;
  output           led_crs_from_the_tse_mac1;
  output           led_crs_from_the_tse_mac2;
  output           led_crs_from_the_tse_mac3;
  output           led_disp_err_from_the_tse_mac;
  output           led_disp_err_from_the_tse_mac1;
  output           led_disp_err_from_the_tse_mac2;
  output           led_disp_err_from_the_tse_mac3;
  output           led_link_from_the_tse_mac;
  output           led_link_from_the_tse_mac1;
  output           led_link_from_the_tse_mac2;
  output           led_link_from_the_tse_mac3;
  output           mdc_from_the_tse_mac;
  output           mdc_from_the_tse_mac1;
  output           mdc_from_the_tse_mac2;
  output           mdc_from_the_tse_mac3;
  output           mdio_oen_from_the_tse_mac;
  output           mdio_oen_from_the_tse_mac1;
  output           mdio_oen_from_the_tse_mac2;
  output           mdio_oen_from_the_tse_mac3;
  output           mdio_out_from_the_tse_mac;
  output           mdio_out_from_the_tse_mac1;
  output           mdio_out_from_the_tse_mac2;
  output           mdio_out_from_the_tse_mac3;
  output  [  7: 0] out_port_from_the_led_pio;
  output  [ 15: 0] out_port_from_the_seven_seg_pio;
  output           pll_c1_out;
  output           pll_sys_clk;
  output  [  1: 0] powerdown_ext_pcie_compiler_0;
  output           rate_ext_pcie_compiler_0;
  output  [ 16: 0] reconfig_fromgxb_pcie_compiler_0;
  output           rx_recovclkout_from_the_tse_mac;
  output           rx_recovclkout_from_the_tse_mac1;
  output           rx_recovclkout_from_the_tse_mac2;
  output           rx_recovclkout_from_the_tse_mac3;
  output           rxpolarity0_ext_pcie_compiler_0;
  output  [  8: 0] test_out_pcie_compiler_0;
  output           tx_out0_pcie_compiler_0;
  output           txcompl0_ext_pcie_compiler_0;
  output  [  7: 0] txdata0_ext_pcie_compiler_0;
  output           txdatak0_ext_pcie_compiler_0;
  output           txdetectrx_ext_pcie_compiler_0;
  output           txelecidle0_ext_pcie_compiler_0;
  output           txp_from_the_tse_mac;
  output           txp_from_the_tse_mac1;
  output           txp_from_the_tse_mac2;
  output           txp_from_the_tse_mac3;
  input            busy_altgxb_reconfig_pcie_compiler_0;
  input            cal_blk_clk_0;
  input            ext_clk;
  input            fixedclk_serdes_pcie_compiler_0;
  input            gxb_powerdown_pcie_compiler_0;
  input   [  3: 0] in_port_to_the_pb_pio;
  input   [  7: 0] in_port_to_the_sw_pio;
  input            mdio_in_to_the_tse_mac;
  input            mdio_in_to_the_tse_mac1;
  input            mdio_in_to_the_tse_mac2;
  input            mdio_in_to_the_tse_mac3;
  input            pcie_rstn_pcie_compiler_0;
  input            phystatus_ext_pcie_compiler_0;
  input            pipe_mode_pcie_compiler_0;
  input            pll_powerdown_pcie_compiler_0;
  input            protocol_to_the_ethernet_port_interface_0;
  input            reconfig_clk_pcie_compiler_0;
  input   [  3: 0] reconfig_togxb_pcie_compiler_0;
  input            ref_clk_to_the_tse_mac;
  input            ref_clk_to_the_tse_mac1;
  input            ref_clk_to_the_tse_mac2;
  input            ref_clk_to_the_tse_mac3;
  input            refclk_pcie_compiler_0;
  input            reset_n;
  input            rx_in0_pcie_compiler_0;
  input   [  7: 0] rxdata0_ext_pcie_compiler_0;
  input            rxdatak0_ext_pcie_compiler_0;
  input            rxelecidle0_ext_pcie_compiler_0;
  input            rxp_to_the_tse_mac;
  input            rxp_to_the_tse_mac1;
  input            rxp_to_the_tse_mac2;
  input            rxp_to_the_tse_mac3;
  input   [  2: 0] rxstatus0_ext_pcie_compiler_0;
  input            rxvalid0_ext_pcie_compiler_0;
  input   [ 39: 0] test_in_pcie_compiler_0;
  input            user_sw_to_the_ethernet_port_interface_0;

  wire    [ 28: 0] DE4_SOPC_burst_0_downstream_address;
  wire    [ 28: 0] DE4_SOPC_burst_0_downstream_address_to_slave;
  wire    [ 10: 0] DE4_SOPC_burst_0_downstream_arbitrationshare;
  wire             DE4_SOPC_burst_0_downstream_burstcount;
  wire    [  3: 0] DE4_SOPC_burst_0_downstream_byteenable;
  wire             DE4_SOPC_burst_0_downstream_debugaccess;
  wire             DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_latency_counter;
  wire    [ 28: 0] DE4_SOPC_burst_0_downstream_nativeaddress;
  wire             DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_read;
  wire             DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register;
  wire    [ 31: 0] DE4_SOPC_burst_0_downstream_readdata;
  wire             DE4_SOPC_burst_0_downstream_readdatavalid;
  wire             DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave;
  wire             DE4_SOPC_burst_0_downstream_reset_n;
  wire             DE4_SOPC_burst_0_downstream_waitrequest;
  wire             DE4_SOPC_burst_0_downstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_0_downstream_writedata;
  wire    [ 28: 0] DE4_SOPC_burst_0_upstream_address;
  wire    [  9: 0] DE4_SOPC_burst_0_upstream_burstcount;
  wire    [ 30: 0] DE4_SOPC_burst_0_upstream_byteaddress;
  wire    [  3: 0] DE4_SOPC_burst_0_upstream_byteenable;
  wire             DE4_SOPC_burst_0_upstream_debugaccess;
  wire             DE4_SOPC_burst_0_upstream_read;
  wire    [ 31: 0] DE4_SOPC_burst_0_upstream_readdata;
  wire    [ 31: 0] DE4_SOPC_burst_0_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_0_upstream_readdatavalid;
  wire             DE4_SOPC_burst_0_upstream_waitrequest;
  wire             DE4_SOPC_burst_0_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_0_upstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_0_upstream_writedata;
  wire    [ 28: 0] DE4_SOPC_burst_1_downstream_address;
  wire    [ 28: 0] DE4_SOPC_burst_1_downstream_address_to_slave;
  wire    [ 10: 0] DE4_SOPC_burst_1_downstream_arbitrationshare;
  wire             DE4_SOPC_burst_1_downstream_burstcount;
  wire    [  3: 0] DE4_SOPC_burst_1_downstream_byteenable;
  wire             DE4_SOPC_burst_1_downstream_debugaccess;
  wire             DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_latency_counter;
  wire    [ 28: 0] DE4_SOPC_burst_1_downstream_nativeaddress;
  wire             DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_read;
  wire             DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register;
  wire    [ 31: 0] DE4_SOPC_burst_1_downstream_readdata;
  wire             DE4_SOPC_burst_1_downstream_readdatavalid;
  wire             DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1;
  wire             DE4_SOPC_burst_1_downstream_reset_n;
  wire             DE4_SOPC_burst_1_downstream_waitrequest;
  wire             DE4_SOPC_burst_1_downstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_1_downstream_writedata;
  wire    [ 28: 0] DE4_SOPC_burst_1_upstream_address;
  wire    [  9: 0] DE4_SOPC_burst_1_upstream_burstcount;
  wire    [ 30: 0] DE4_SOPC_burst_1_upstream_byteaddress;
  wire    [  3: 0] DE4_SOPC_burst_1_upstream_byteenable;
  wire             DE4_SOPC_burst_1_upstream_debugaccess;
  wire             DE4_SOPC_burst_1_upstream_read;
  wire    [ 31: 0] DE4_SOPC_burst_1_upstream_readdata;
  wire    [ 31: 0] DE4_SOPC_burst_1_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_1_upstream_readdatavalid;
  wire             DE4_SOPC_burst_1_upstream_waitrequest;
  wire             DE4_SOPC_burst_1_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_1_upstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_1_upstream_writedata;
  wire    [ 24: 0] DE4_SOPC_burst_2_downstream_address;
  wire    [ 24: 0] DE4_SOPC_burst_2_downstream_address_to_slave;
  wire    [  9: 0] DE4_SOPC_burst_2_downstream_arbitrationshare;
  wire    [  9: 0] DE4_SOPC_burst_2_downstream_burstcount;
  wire    [  7: 0] DE4_SOPC_burst_2_downstream_byteenable;
  wire             DE4_SOPC_burst_2_downstream_debugaccess;
  wire             DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_latency_counter;
  wire    [ 24: 0] DE4_SOPC_burst_2_downstream_nativeaddress;
  wire             DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_read;
  wire             DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register;
  wire    [ 63: 0] DE4_SOPC_burst_2_downstream_readdata;
  wire             DE4_SOPC_burst_2_downstream_readdatavalid;
  wire             DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface;
  wire             DE4_SOPC_burst_2_downstream_reset_n;
  wire             DE4_SOPC_burst_2_downstream_waitrequest;
  wire             DE4_SOPC_burst_2_downstream_write;
  wire    [ 63: 0] DE4_SOPC_burst_2_downstream_writedata;
  wire    [ 24: 0] DE4_SOPC_burst_2_upstream_address;
  wire    [  9: 0] DE4_SOPC_burst_2_upstream_burstcount;
  wire    [ 27: 0] DE4_SOPC_burst_2_upstream_byteaddress;
  wire    [  7: 0] DE4_SOPC_burst_2_upstream_byteenable;
  wire             DE4_SOPC_burst_2_upstream_debugaccess;
  wire             DE4_SOPC_burst_2_upstream_read;
  wire    [ 63: 0] DE4_SOPC_burst_2_upstream_readdata;
  wire    [ 63: 0] DE4_SOPC_burst_2_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_2_upstream_readdatavalid;
  wire             DE4_SOPC_burst_2_upstream_waitrequest;
  wire             DE4_SOPC_burst_2_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_2_upstream_write;
  wire    [ 63: 0] DE4_SOPC_burst_2_upstream_writedata;
  wire    [ 13: 0] DE4_SOPC_burst_3_downstream_address;
  wire    [ 13: 0] DE4_SOPC_burst_3_downstream_address_to_slave;
  wire    [ 10: 0] DE4_SOPC_burst_3_downstream_arbitrationshare;
  wire             DE4_SOPC_burst_3_downstream_burstcount;
  wire    [  3: 0] DE4_SOPC_burst_3_downstream_byteenable;
  wire             DE4_SOPC_burst_3_downstream_debugaccess;
  wire             DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_latency_counter;
  wire    [ 13: 0] DE4_SOPC_burst_3_downstream_nativeaddress;
  wire             DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_read;
  wire             DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access;
  wire    [ 31: 0] DE4_SOPC_burst_3_downstream_readdata;
  wire             DE4_SOPC_burst_3_downstream_readdatavalid;
  wire             DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access;
  wire             DE4_SOPC_burst_3_downstream_reset_n;
  wire             DE4_SOPC_burst_3_downstream_waitrequest;
  wire             DE4_SOPC_burst_3_downstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_3_downstream_writedata;
  wire    [ 13: 0] DE4_SOPC_burst_3_upstream_address;
  wire    [  9: 0] DE4_SOPC_burst_3_upstream_burstcount;
  wire    [ 15: 0] DE4_SOPC_burst_3_upstream_byteaddress;
  wire    [  3: 0] DE4_SOPC_burst_3_upstream_byteenable;
  wire             DE4_SOPC_burst_3_upstream_debugaccess;
  wire             DE4_SOPC_burst_3_upstream_read;
  wire    [ 31: 0] DE4_SOPC_burst_3_upstream_readdata;
  wire    [ 31: 0] DE4_SOPC_burst_3_upstream_readdata_from_sa;
  wire             DE4_SOPC_burst_3_upstream_readdatavalid;
  wire             DE4_SOPC_burst_3_upstream_waitrequest;
  wire             DE4_SOPC_burst_3_upstream_waitrequest_from_sa;
  wire             DE4_SOPC_burst_3_upstream_write;
  wire    [ 31: 0] DE4_SOPC_burst_3_upstream_writedata;
  wire    [  3: 0] DE4_SOPC_clock_0_in_address;
  wire    [  1: 0] DE4_SOPC_clock_0_in_byteenable;
  wire             DE4_SOPC_clock_0_in_endofpacket;
  wire             DE4_SOPC_clock_0_in_endofpacket_from_sa;
  wire    [  2: 0] DE4_SOPC_clock_0_in_nativeaddress;
  wire             DE4_SOPC_clock_0_in_read;
  wire    [ 15: 0] DE4_SOPC_clock_0_in_readdata;
  wire    [ 15: 0] DE4_SOPC_clock_0_in_readdata_from_sa;
  wire             DE4_SOPC_clock_0_in_reset_n;
  wire             DE4_SOPC_clock_0_in_waitrequest;
  wire             DE4_SOPC_clock_0_in_waitrequest_from_sa;
  wire             DE4_SOPC_clock_0_in_write;
  wire    [ 15: 0] DE4_SOPC_clock_0_in_writedata;
  wire    [  3: 0] DE4_SOPC_clock_0_out_address;
  wire    [  3: 0] DE4_SOPC_clock_0_out_address_to_slave;
  wire    [  1: 0] DE4_SOPC_clock_0_out_byteenable;
  wire             DE4_SOPC_clock_0_out_endofpacket;
  wire             DE4_SOPC_clock_0_out_granted_pll_s1;
  wire    [  2: 0] DE4_SOPC_clock_0_out_nativeaddress;
  wire             DE4_SOPC_clock_0_out_qualified_request_pll_s1;
  wire             DE4_SOPC_clock_0_out_read;
  wire             DE4_SOPC_clock_0_out_read_data_valid_pll_s1;
  wire    [ 15: 0] DE4_SOPC_clock_0_out_readdata;
  wire             DE4_SOPC_clock_0_out_requests_pll_s1;
  wire             DE4_SOPC_clock_0_out_reset_n;
  wire             DE4_SOPC_clock_0_out_waitrequest;
  wire             DE4_SOPC_clock_0_out_write;
  wire    [ 15: 0] DE4_SOPC_clock_0_out_writedata;
  wire             clk125_out_pcie_compiler_0;
  wire             clk250_out_pcie_compiler_0;
  wire             clk500_out_pcie_compiler_0;
  wire             d1_DE4_SOPC_burst_0_upstream_end_xfer;
  wire             d1_DE4_SOPC_burst_1_upstream_end_xfer;
  wire             d1_DE4_SOPC_burst_2_upstream_end_xfer;
  wire             d1_DE4_SOPC_burst_3_upstream_end_xfer;
  wire             d1_DE4_SOPC_clock_0_in_end_xfer;
  wire             d1_ethernet_port_interface_0_avalon_slave_1_end_xfer;
  wire             d1_ethernet_port_interface_0_avalon_slave_end_xfer;
  wire             d1_ethernet_port_interface_0_control_port_end_xfer;
  wire             d1_high_res_timer_s1_end_xfer;
  wire             d1_jtag_uart_avalon_jtag_slave_end_xfer;
  wire             d1_led_pio_s1_end_xfer;
  wire             d1_pb_pio_s1_end_xfer;
  wire             d1_pcie_compiler_0_Control_Register_Access_end_xfer;
  wire             d1_pcie_compiler_0_Tx_Interface_end_xfer;
  wire             d1_peripheral_clock_crossing_s1_end_xfer;
  wire             d1_pll_s1_end_xfer;
  wire             d1_seven_seg_pio_s1_end_xfer;
  wire             d1_sw_pio_s1_end_xfer;
  wire             d1_sys_timer_s1_end_xfer;
  wire             d1_sysid_control_slave_end_xfer;
  wire             d1_tse_mac1_control_port_end_xfer;
  wire             d1_tse_mac2_control_port_end_xfer;
  wire             d1_tse_mac3_control_port_end_xfer;
  wire             d1_tse_mac_control_port_end_xfer;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_1_address;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_1_address_to_slave;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_latency_counter;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_1_readdata;
  wire             ethernet_port_interface_0_avalon_master_1_readdatavalid;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port;
  wire             ethernet_port_interface_0_avalon_master_1_waitrequest;
  wire             ethernet_port_interface_0_avalon_master_1_write;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_1_writedata;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_address;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_address_to_slave;
  wire    [  9: 0] ethernet_port_interface_0_avalon_master_burstcount;
  wire    [  3: 0] ethernet_port_interface_0_avalon_master_byteenable;
  wire             ethernet_port_interface_0_avalon_master_chipselect;
  wire             ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_latency_counter;
  wire             ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_read;
  wire             ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_readdata;
  wire             ethernet_port_interface_0_avalon_master_readdatavalid;
  wire             ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream;
  wire             ethernet_port_interface_0_avalon_master_waitrequest;
  wire             ethernet_port_interface_0_avalon_master_write;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_master_writedata;
  wire    [ 26: 0] ethernet_port_interface_0_avalon_slave_1_address;
  wire             ethernet_port_interface_0_avalon_slave_1_read;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_1_readdata;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_1_readdata_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_1_readdatavalid;
  wire             ethernet_port_interface_0_avalon_slave_1_waitrequest;
  wire             ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_1_write;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_1_writedata;
  wire    [ 26: 0] ethernet_port_interface_0_avalon_slave_address;
  wire             ethernet_port_interface_0_avalon_slave_irq;
  wire             ethernet_port_interface_0_avalon_slave_read;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_readdata;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_readdata_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_readdatavalid;
  wire             ethernet_port_interface_0_avalon_slave_waitrequest;
  wire             ethernet_port_interface_0_avalon_slave_waitrequest_from_sa;
  wire             ethernet_port_interface_0_avalon_slave_write;
  wire    [ 31: 0] ethernet_port_interface_0_avalon_slave_writedata;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_1_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_1_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_ready;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_1_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_2_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_2_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_ready;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_2_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_3_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_3_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_ready;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_3_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_sink_data;
  wire             ethernet_port_interface_0_avalon_streaming_sink_endofpacket;
  wire    [  5: 0] ethernet_port_interface_0_avalon_streaming_sink_error;
  wire             ethernet_port_interface_0_avalon_streaming_sink_ready;
  wire             ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa;
  wire             ethernet_port_interface_0_avalon_streaming_sink_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_sink_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_source_1_data;
  wire             ethernet_port_interface_0_avalon_streaming_source_1_endofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_1_error;
  wire             ethernet_port_interface_0_avalon_streaming_source_1_ready;
  wire             ethernet_port_interface_0_avalon_streaming_source_1_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_1_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_source_2_data;
  wire             ethernet_port_interface_0_avalon_streaming_source_2_endofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_2_error;
  wire             ethernet_port_interface_0_avalon_streaming_source_2_ready;
  wire             ethernet_port_interface_0_avalon_streaming_source_2_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_2_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_source_3_data;
  wire             ethernet_port_interface_0_avalon_streaming_source_3_endofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_3_error;
  wire             ethernet_port_interface_0_avalon_streaming_source_3_ready;
  wire             ethernet_port_interface_0_avalon_streaming_source_3_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_3_valid;
  wire    [  7: 0] ethernet_port_interface_0_avalon_streaming_source_data;
  wire             ethernet_port_interface_0_avalon_streaming_source_endofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_error;
  wire             ethernet_port_interface_0_avalon_streaming_source_ready;
  wire             ethernet_port_interface_0_avalon_streaming_source_startofpacket;
  wire             ethernet_port_interface_0_avalon_streaming_source_valid;
  wire    [ 26: 0] ethernet_port_interface_0_control_port_address;
  wire             ethernet_port_interface_0_control_port_read;
  wire    [ 31: 0] ethernet_port_interface_0_control_port_readdata;
  wire    [ 31: 0] ethernet_port_interface_0_control_port_readdata_from_sa;
  wire             ethernet_port_interface_0_control_port_reset;
  wire             ethernet_port_interface_0_control_port_waitrequest;
  wire             ethernet_port_interface_0_control_port_waitrequest_from_sa;
  wire             ethernet_port_interface_0_control_port_write;
  wire    [ 31: 0] ethernet_port_interface_0_control_port_writedata;
  wire             ext_clk_reset_n;
  wire    [  2: 0] high_res_timer_s1_address;
  wire             high_res_timer_s1_chipselect;
  wire             high_res_timer_s1_irq;
  wire    [ 15: 0] high_res_timer_s1_readdata;
  wire    [ 15: 0] high_res_timer_s1_readdata_from_sa;
  wire             high_res_timer_s1_reset_n;
  wire             high_res_timer_s1_write_n;
  wire    [ 15: 0] high_res_timer_s1_writedata;
  wire             jtag_uart_avalon_jtag_slave_address;
  wire             jtag_uart_avalon_jtag_slave_chipselect;
  wire             jtag_uart_avalon_jtag_slave_dataavailable;
  wire             jtag_uart_avalon_jtag_slave_dataavailable_from_sa;
  wire             jtag_uart_avalon_jtag_slave_irq;
  wire             jtag_uart_avalon_jtag_slave_read_n;
  wire    [ 31: 0] jtag_uart_avalon_jtag_slave_readdata;
  wire    [ 31: 0] jtag_uart_avalon_jtag_slave_readdata_from_sa;
  wire             jtag_uart_avalon_jtag_slave_readyfordata;
  wire             jtag_uart_avalon_jtag_slave_readyfordata_from_sa;
  wire             jtag_uart_avalon_jtag_slave_reset_n;
  wire             jtag_uart_avalon_jtag_slave_waitrequest;
  wire             jtag_uart_avalon_jtag_slave_waitrequest_from_sa;
  wire             jtag_uart_avalon_jtag_slave_write_n;
  wire    [ 31: 0] jtag_uart_avalon_jtag_slave_writedata;
  wire             led_an_from_the_tse_mac;
  wire             led_an_from_the_tse_mac1;
  wire             led_an_from_the_tse_mac2;
  wire             led_an_from_the_tse_mac3;
  wire             led_char_err_from_the_tse_mac;
  wire             led_char_err_from_the_tse_mac1;
  wire             led_char_err_from_the_tse_mac2;
  wire             led_char_err_from_the_tse_mac3;
  wire             led_col_from_the_tse_mac;
  wire             led_col_from_the_tse_mac1;
  wire             led_col_from_the_tse_mac2;
  wire             led_col_from_the_tse_mac3;
  wire             led_crs_from_the_tse_mac;
  wire             led_crs_from_the_tse_mac1;
  wire             led_crs_from_the_tse_mac2;
  wire             led_crs_from_the_tse_mac3;
  wire             led_disp_err_from_the_tse_mac;
  wire             led_disp_err_from_the_tse_mac1;
  wire             led_disp_err_from_the_tse_mac2;
  wire             led_disp_err_from_the_tse_mac3;
  wire             led_link_from_the_tse_mac;
  wire             led_link_from_the_tse_mac1;
  wire             led_link_from_the_tse_mac2;
  wire             led_link_from_the_tse_mac3;
  wire    [  1: 0] led_pio_s1_address;
  wire             led_pio_s1_chipselect;
  wire    [ 31: 0] led_pio_s1_readdata;
  wire    [ 31: 0] led_pio_s1_readdata_from_sa;
  wire             led_pio_s1_reset_n;
  wire             led_pio_s1_write_n;
  wire    [ 31: 0] led_pio_s1_writedata;
  wire             master_0_granted_DE4_SOPC_clock_0_in;
  wire             master_0_granted_ethernet_port_interface_0_control_port;
  wire             master_0_granted_high_res_timer_s1;
  wire             master_0_granted_jtag_uart_avalon_jtag_slave;
  wire             master_0_granted_peripheral_clock_crossing_s1;
  wire             master_0_granted_sys_timer_s1;
  wire             master_0_granted_sysid_control_slave;
  wire             master_0_granted_tse_mac1_control_port;
  wire             master_0_granted_tse_mac2_control_port;
  wire             master_0_granted_tse_mac3_control_port;
  wire             master_0_granted_tse_mac_control_port;
  wire             master_0_latency_counter;
  wire    [ 31: 0] master_0_master_address;
  wire    [ 31: 0] master_0_master_address_to_slave;
  wire    [  3: 0] master_0_master_byteenable;
  wire             master_0_master_read;
  wire    [ 31: 0] master_0_master_readdata;
  wire             master_0_master_readdatavalid;
  wire             master_0_master_reset;
  wire             master_0_master_resetrequest;
  wire             master_0_master_waitrequest;
  wire             master_0_master_write;
  wire    [ 31: 0] master_0_master_writedata;
  wire             master_0_qualified_request_DE4_SOPC_clock_0_in;
  wire             master_0_qualified_request_ethernet_port_interface_0_control_port;
  wire             master_0_qualified_request_high_res_timer_s1;
  wire             master_0_qualified_request_jtag_uart_avalon_jtag_slave;
  wire             master_0_qualified_request_peripheral_clock_crossing_s1;
  wire             master_0_qualified_request_sys_timer_s1;
  wire             master_0_qualified_request_sysid_control_slave;
  wire             master_0_qualified_request_tse_mac1_control_port;
  wire             master_0_qualified_request_tse_mac2_control_port;
  wire             master_0_qualified_request_tse_mac3_control_port;
  wire             master_0_qualified_request_tse_mac_control_port;
  wire             master_0_read_data_valid_DE4_SOPC_clock_0_in;
  wire             master_0_read_data_valid_ethernet_port_interface_0_control_port;
  wire             master_0_read_data_valid_high_res_timer_s1;
  wire             master_0_read_data_valid_jtag_uart_avalon_jtag_slave;
  wire             master_0_read_data_valid_peripheral_clock_crossing_s1;
  wire             master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register;
  wire             master_0_read_data_valid_sys_timer_s1;
  wire             master_0_read_data_valid_sysid_control_slave;
  wire             master_0_read_data_valid_tse_mac1_control_port;
  wire             master_0_read_data_valid_tse_mac2_control_port;
  wire             master_0_read_data_valid_tse_mac3_control_port;
  wire             master_0_read_data_valid_tse_mac_control_port;
  wire             master_0_requests_DE4_SOPC_clock_0_in;
  wire             master_0_requests_ethernet_port_interface_0_control_port;
  wire             master_0_requests_high_res_timer_s1;
  wire             master_0_requests_jtag_uart_avalon_jtag_slave;
  wire             master_0_requests_peripheral_clock_crossing_s1;
  wire             master_0_requests_sys_timer_s1;
  wire             master_0_requests_sysid_control_slave;
  wire             master_0_requests_tse_mac1_control_port;
  wire             master_0_requests_tse_mac2_control_port;
  wire             master_0_requests_tse_mac3_control_port;
  wire             master_0_requests_tse_mac_control_port;
  wire             mdc_from_the_tse_mac;
  wire             mdc_from_the_tse_mac1;
  wire             mdc_from_the_tse_mac2;
  wire             mdc_from_the_tse_mac3;
  wire             mdio_oen_from_the_tse_mac;
  wire             mdio_oen_from_the_tse_mac1;
  wire             mdio_oen_from_the_tse_mac2;
  wire             mdio_oen_from_the_tse_mac3;
  wire             mdio_out_from_the_tse_mac;
  wire             mdio_out_from_the_tse_mac1;
  wire             mdio_out_from_the_tse_mac2;
  wire             mdio_out_from_the_tse_mac3;
  wire             out_clk_pll_c0;
  wire             out_clk_pll_c1;
  wire    [  7: 0] out_port_from_the_led_pio;
  wire    [ 15: 0] out_port_from_the_seven_seg_pio;
  wire    [  1: 0] pb_pio_s1_address;
  wire    [ 31: 0] pb_pio_s1_readdata;
  wire    [ 31: 0] pb_pio_s1_readdata_from_sa;
  wire             pb_pio_s1_reset_n;
  wire    [ 11: 0] pcie_compiler_0_Control_Register_Access_address;
  wire    [  3: 0] pcie_compiler_0_Control_Register_Access_byteenable;
  wire             pcie_compiler_0_Control_Register_Access_chipselect;
  wire             pcie_compiler_0_Control_Register_Access_irq;
  wire             pcie_compiler_0_Control_Register_Access_read;
  wire    [ 31: 0] pcie_compiler_0_Control_Register_Access_readdata;
  wire    [ 31: 0] pcie_compiler_0_Control_Register_Access_readdata_from_sa;
  wire             pcie_compiler_0_Control_Register_Access_waitrequest;
  wire             pcie_compiler_0_Control_Register_Access_waitrequest_from_sa;
  wire             pcie_compiler_0_Control_Register_Access_write;
  wire    [ 31: 0] pcie_compiler_0_Control_Register_Access_writedata;
  wire    [ 31: 0] pcie_compiler_0_Rx_Interface_address;
  wire    [ 31: 0] pcie_compiler_0_Rx_Interface_address_to_slave;
  wire    [  9: 0] pcie_compiler_0_Rx_Interface_burstcount;
  wire    [  7: 0] pcie_compiler_0_Rx_Interface_byteenable;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream;
  wire    [  3: 0] pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream;
  wire    [  2: 0] pcie_compiler_0_Rx_Interface_dbs_address;
  wire    [ 31: 0] pcie_compiler_0_Rx_Interface_dbs_write_32;
  wire             pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_irq;
  wire    [  5: 0] pcie_compiler_0_Rx_Interface_irqnumber;
  wire             pcie_compiler_0_Rx_Interface_latency_counter;
  wire             pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_read;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register;
  wire    [ 63: 0] pcie_compiler_0_Rx_Interface_readdata;
  wire             pcie_compiler_0_Rx_Interface_readdatavalid;
  wire             pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream;
  wire             pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream;
  wire             pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream;
  wire             pcie_compiler_0_Rx_Interface_reset_n;
  wire             pcie_compiler_0_Rx_Interface_resetrequest;
  wire             pcie_compiler_0_Rx_Interface_waitrequest;
  wire             pcie_compiler_0_Rx_Interface_write;
  wire    [ 63: 0] pcie_compiler_0_Rx_Interface_writedata;
  wire    [ 21: 0] pcie_compiler_0_Tx_Interface_address;
  wire    [  9: 0] pcie_compiler_0_Tx_Interface_burstcount;
  wire    [  7: 0] pcie_compiler_0_Tx_Interface_byteenable;
  wire             pcie_compiler_0_Tx_Interface_chipselect;
  wire             pcie_compiler_0_Tx_Interface_read;
  wire    [ 63: 0] pcie_compiler_0_Tx_Interface_readdata;
  wire    [ 63: 0] pcie_compiler_0_Tx_Interface_readdata_from_sa;
  wire             pcie_compiler_0_Tx_Interface_readdatavalid;
  wire             pcie_compiler_0_Tx_Interface_waitrequest;
  wire             pcie_compiler_0_Tx_Interface_waitrequest_from_sa;
  wire             pcie_compiler_0_Tx_Interface_write;
  wire    [ 63: 0] pcie_compiler_0_Tx_Interface_writedata;
  wire    [ 29: 0] peripheral_clock_crossing_m1_address;
  wire    [ 29: 0] peripheral_clock_crossing_m1_address_to_slave;
  wire    [  3: 0] peripheral_clock_crossing_m1_byteenable;
  wire             peripheral_clock_crossing_m1_endofpacket;
  wire             peripheral_clock_crossing_m1_granted_led_pio_s1;
  wire             peripheral_clock_crossing_m1_granted_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_granted_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_granted_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_latency_counter;
  wire    [ 27: 0] peripheral_clock_crossing_m1_nativeaddress;
  wire             peripheral_clock_crossing_m1_qualified_request_led_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_qualified_request_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_read;
  wire             peripheral_clock_crossing_m1_read_data_valid_led_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1;
  wire    [ 31: 0] peripheral_clock_crossing_m1_readdata;
  wire             peripheral_clock_crossing_m1_readdatavalid;
  wire             peripheral_clock_crossing_m1_requests_led_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_pb_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_seven_seg_pio_s1;
  wire             peripheral_clock_crossing_m1_requests_sw_pio_s1;
  wire             peripheral_clock_crossing_m1_reset_n;
  wire             peripheral_clock_crossing_m1_waitrequest;
  wire             peripheral_clock_crossing_m1_write;
  wire    [ 31: 0] peripheral_clock_crossing_m1_writedata;
  wire    [ 27: 0] peripheral_clock_crossing_s1_address;
  wire    [  3: 0] peripheral_clock_crossing_s1_byteenable;
  wire             peripheral_clock_crossing_s1_endofpacket;
  wire             peripheral_clock_crossing_s1_endofpacket_from_sa;
  wire    [ 27: 0] peripheral_clock_crossing_s1_nativeaddress;
  wire             peripheral_clock_crossing_s1_read;
  wire    [ 31: 0] peripheral_clock_crossing_s1_readdata;
  wire    [ 31: 0] peripheral_clock_crossing_s1_readdata_from_sa;
  wire             peripheral_clock_crossing_s1_readdatavalid;
  wire             peripheral_clock_crossing_s1_reset_n;
  wire             peripheral_clock_crossing_s1_waitrequest;
  wire             peripheral_clock_crossing_s1_waitrequest_from_sa;
  wire             peripheral_clock_crossing_s1_write;
  wire    [ 31: 0] peripheral_clock_crossing_s1_writedata;
  wire             pll_c1_out;
  wire             pll_c1_out_reset_n;
  wire    [  2: 0] pll_s1_address;
  wire             pll_s1_chipselect;
  wire             pll_s1_read;
  wire    [ 15: 0] pll_s1_readdata;
  wire    [ 15: 0] pll_s1_readdata_from_sa;
  wire             pll_s1_reset_n;
  wire             pll_s1_resetrequest;
  wire             pll_s1_resetrequest_from_sa;
  wire             pll_s1_write;
  wire    [ 15: 0] pll_s1_writedata;
  wire             pll_sys_clk;
  wire             pll_sys_clk_reset_n;
  wire    [  1: 0] powerdown_ext_pcie_compiler_0;
  wire             rate_ext_pcie_compiler_0;
  wire    [ 16: 0] reconfig_fromgxb_pcie_compiler_0;
  wire             reset_n_sources;
  wire             rx_recovclkout_from_the_tse_mac;
  wire             rx_recovclkout_from_the_tse_mac1;
  wire             rx_recovclkout_from_the_tse_mac2;
  wire             rx_recovclkout_from_the_tse_mac3;
  wire             rxpolarity0_ext_pcie_compiler_0;
  wire    [  1: 0] seven_seg_pio_s1_address;
  wire             seven_seg_pio_s1_chipselect;
  wire    [ 31: 0] seven_seg_pio_s1_readdata;
  wire    [ 31: 0] seven_seg_pio_s1_readdata_from_sa;
  wire             seven_seg_pio_s1_reset_n;
  wire             seven_seg_pio_s1_write_n;
  wire    [ 31: 0] seven_seg_pio_s1_writedata;
  wire    [  1: 0] sw_pio_s1_address;
  wire    [ 31: 0] sw_pio_s1_readdata;
  wire    [ 31: 0] sw_pio_s1_readdata_from_sa;
  wire             sw_pio_s1_reset_n;
  wire    [  2: 0] sys_timer_s1_address;
  wire             sys_timer_s1_chipselect;
  wire             sys_timer_s1_irq;
  wire    [ 15: 0] sys_timer_s1_readdata;
  wire    [ 15: 0] sys_timer_s1_readdata_from_sa;
  wire             sys_timer_s1_reset_n;
  wire             sys_timer_s1_write_n;
  wire    [ 15: 0] sys_timer_s1_writedata;
  wire             sysid_control_slave_address;
  wire             sysid_control_slave_clock;
  wire    [ 31: 0] sysid_control_slave_readdata;
  wire    [ 31: 0] sysid_control_slave_readdata_from_sa;
  wire             sysid_control_slave_reset_n;
  wire    [  8: 0] test_out_pcie_compiler_0;
  wire    [  7: 0] tse_mac1_control_port_address;
  wire             tse_mac1_control_port_read;
  wire    [ 31: 0] tse_mac1_control_port_readdata;
  wire    [ 31: 0] tse_mac1_control_port_readdata_from_sa;
  wire             tse_mac1_control_port_reset;
  wire             tse_mac1_control_port_waitrequest;
  wire             tse_mac1_control_port_waitrequest_from_sa;
  wire             tse_mac1_control_port_write;
  wire    [ 31: 0] tse_mac1_control_port_writedata;
  wire    [  7: 0] tse_mac1_receive_data;
  wire             tse_mac1_receive_endofpacket;
  wire    [  5: 0] tse_mac1_receive_error;
  wire             tse_mac1_receive_ready;
  wire             tse_mac1_receive_startofpacket;
  wire             tse_mac1_receive_valid;
  wire    [  7: 0] tse_mac1_transmit_data;
  wire             tse_mac1_transmit_endofpacket;
  wire             tse_mac1_transmit_error;
  wire             tse_mac1_transmit_ready;
  wire             tse_mac1_transmit_ready_from_sa;
  wire             tse_mac1_transmit_startofpacket;
  wire             tse_mac1_transmit_valid;
  wire    [  7: 0] tse_mac2_control_port_address;
  wire             tse_mac2_control_port_read;
  wire    [ 31: 0] tse_mac2_control_port_readdata;
  wire    [ 31: 0] tse_mac2_control_port_readdata_from_sa;
  wire             tse_mac2_control_port_reset;
  wire             tse_mac2_control_port_waitrequest;
  wire             tse_mac2_control_port_waitrequest_from_sa;
  wire             tse_mac2_control_port_write;
  wire    [ 31: 0] tse_mac2_control_port_writedata;
  wire    [  7: 0] tse_mac2_receive_data;
  wire             tse_mac2_receive_endofpacket;
  wire    [  5: 0] tse_mac2_receive_error;
  wire             tse_mac2_receive_ready;
  wire             tse_mac2_receive_startofpacket;
  wire             tse_mac2_receive_valid;
  wire    [  7: 0] tse_mac2_transmit_data;
  wire             tse_mac2_transmit_endofpacket;
  wire             tse_mac2_transmit_error;
  wire             tse_mac2_transmit_ready;
  wire             tse_mac2_transmit_ready_from_sa;
  wire             tse_mac2_transmit_startofpacket;
  wire             tse_mac2_transmit_valid;
  wire    [  7: 0] tse_mac3_control_port_address;
  wire             tse_mac3_control_port_read;
  wire    [ 31: 0] tse_mac3_control_port_readdata;
  wire    [ 31: 0] tse_mac3_control_port_readdata_from_sa;
  wire             tse_mac3_control_port_reset;
  wire             tse_mac3_control_port_waitrequest;
  wire             tse_mac3_control_port_waitrequest_from_sa;
  wire             tse_mac3_control_port_write;
  wire    [ 31: 0] tse_mac3_control_port_writedata;
  wire    [  7: 0] tse_mac3_receive_data;
  wire             tse_mac3_receive_endofpacket;
  wire    [  5: 0] tse_mac3_receive_error;
  wire             tse_mac3_receive_ready;
  wire             tse_mac3_receive_startofpacket;
  wire             tse_mac3_receive_valid;
  wire    [  7: 0] tse_mac3_transmit_data;
  wire             tse_mac3_transmit_endofpacket;
  wire             tse_mac3_transmit_error;
  wire             tse_mac3_transmit_ready;
  wire             tse_mac3_transmit_ready_from_sa;
  wire             tse_mac3_transmit_startofpacket;
  wire             tse_mac3_transmit_valid;
  wire    [  7: 0] tse_mac_control_port_address;
  wire             tse_mac_control_port_read;
  wire    [ 31: 0] tse_mac_control_port_readdata;
  wire    [ 31: 0] tse_mac_control_port_readdata_from_sa;
  wire             tse_mac_control_port_reset;
  wire             tse_mac_control_port_waitrequest;
  wire             tse_mac_control_port_waitrequest_from_sa;
  wire             tse_mac_control_port_write;
  wire    [ 31: 0] tse_mac_control_port_writedata;
  wire    [  7: 0] tse_mac_receive_data;
  wire             tse_mac_receive_endofpacket;
  wire    [  5: 0] tse_mac_receive_error;
  wire             tse_mac_receive_ready;
  wire             tse_mac_receive_startofpacket;
  wire             tse_mac_receive_valid;
  wire    [  7: 0] tse_mac_transmit_data;
  wire             tse_mac_transmit_endofpacket;
  wire             tse_mac_transmit_error;
  wire             tse_mac_transmit_ready;
  wire             tse_mac_transmit_ready_from_sa;
  wire             tse_mac_transmit_startofpacket;
  wire             tse_mac_transmit_valid;
  wire             tx_out0_pcie_compiler_0;
  wire             txcompl0_ext_pcie_compiler_0;
  wire    [  7: 0] txdata0_ext_pcie_compiler_0;
  wire             txdatak0_ext_pcie_compiler_0;
  wire             txdetectrx_ext_pcie_compiler_0;
  wire             txelecidle0_ext_pcie_compiler_0;
  wire             txp_from_the_tse_mac;
  wire             txp_from_the_tse_mac1;
  wire             txp_from_the_tse_mac2;
  wire             txp_from_the_tse_mac3;
  DE4_SOPC_burst_0_upstream_arbitrator the_DE4_SOPC_burst_0_upstream
    (
      .DE4_SOPC_burst_0_upstream_address                                                     (DE4_SOPC_burst_0_upstream_address),
      .DE4_SOPC_burst_0_upstream_burstcount                                                  (DE4_SOPC_burst_0_upstream_burstcount),
      .DE4_SOPC_burst_0_upstream_byteaddress                                                 (DE4_SOPC_burst_0_upstream_byteaddress),
      .DE4_SOPC_burst_0_upstream_byteenable                                                  (DE4_SOPC_burst_0_upstream_byteenable),
      .DE4_SOPC_burst_0_upstream_debugaccess                                                 (DE4_SOPC_burst_0_upstream_debugaccess),
      .DE4_SOPC_burst_0_upstream_read                                                        (DE4_SOPC_burst_0_upstream_read),
      .DE4_SOPC_burst_0_upstream_readdata                                                    (DE4_SOPC_burst_0_upstream_readdata),
      .DE4_SOPC_burst_0_upstream_readdata_from_sa                                            (DE4_SOPC_burst_0_upstream_readdata_from_sa),
      .DE4_SOPC_burst_0_upstream_readdatavalid                                               (DE4_SOPC_burst_0_upstream_readdatavalid),
      .DE4_SOPC_burst_0_upstream_waitrequest                                                 (DE4_SOPC_burst_0_upstream_waitrequest),
      .DE4_SOPC_burst_0_upstream_waitrequest_from_sa                                         (DE4_SOPC_burst_0_upstream_waitrequest_from_sa),
      .DE4_SOPC_burst_0_upstream_write                                                       (DE4_SOPC_burst_0_upstream_write),
      .DE4_SOPC_burst_0_upstream_writedata                                                   (DE4_SOPC_burst_0_upstream_writedata),
      .clk                                                                                   (pll_sys_clk),
      .d1_DE4_SOPC_burst_0_upstream_end_xfer                                                 (d1_DE4_SOPC_burst_0_upstream_end_xfer),
      .pcie_compiler_0_Rx_Interface_address_to_slave                                         (pcie_compiler_0_Rx_Interface_address_to_slave),
      .pcie_compiler_0_Rx_Interface_burstcount                                               (pcie_compiler_0_Rx_Interface_burstcount),
      .pcie_compiler_0_Rx_Interface_byteenable                                               (pcie_compiler_0_Rx_Interface_byteenable),
      .pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream                     (pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_dbs_address                                              (pcie_compiler_0_Rx_Interface_dbs_address),
      .pcie_compiler_0_Rx_Interface_dbs_write_32                                             (pcie_compiler_0_Rx_Interface_dbs_write_32),
      .pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream                        (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_latency_counter                                          (pcie_compiler_0_Rx_Interface_latency_counter),
      .pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream              (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_read                                                     (pcie_compiler_0_Rx_Interface_read),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream                (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream                       (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_write                                                    (pcie_compiler_0_Rx_Interface_write),
      .reset_n                                                                               (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_0_downstream_arbitrator the_DE4_SOPC_burst_0_downstream
    (
      .DE4_SOPC_burst_0_downstream_address                                                               (DE4_SOPC_burst_0_downstream_address),
      .DE4_SOPC_burst_0_downstream_address_to_slave                                                      (DE4_SOPC_burst_0_downstream_address_to_slave),
      .DE4_SOPC_burst_0_downstream_burstcount                                                            (DE4_SOPC_burst_0_downstream_burstcount),
      .DE4_SOPC_burst_0_downstream_byteenable                                                            (DE4_SOPC_burst_0_downstream_byteenable),
      .DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave                        (DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_latency_counter                                                       (DE4_SOPC_burst_0_downstream_latency_counter),
      .DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave              (DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_read                                                                  (DE4_SOPC_burst_0_downstream_read),
      .DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave                (DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register (DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register),
      .DE4_SOPC_burst_0_downstream_readdata                                                              (DE4_SOPC_burst_0_downstream_readdata),
      .DE4_SOPC_burst_0_downstream_readdatavalid                                                         (DE4_SOPC_burst_0_downstream_readdatavalid),
      .DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave                       (DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_reset_n                                                               (DE4_SOPC_burst_0_downstream_reset_n),
      .DE4_SOPC_burst_0_downstream_waitrequest                                                           (DE4_SOPC_burst_0_downstream_waitrequest),
      .DE4_SOPC_burst_0_downstream_write                                                                 (DE4_SOPC_burst_0_downstream_write),
      .DE4_SOPC_burst_0_downstream_writedata                                                             (DE4_SOPC_burst_0_downstream_writedata),
      .clk                                                                                               (pll_sys_clk),
      .d1_ethernet_port_interface_0_avalon_slave_end_xfer                                                (d1_ethernet_port_interface_0_avalon_slave_end_xfer),
      .ethernet_port_interface_0_avalon_slave_readdata_from_sa                                           (ethernet_port_interface_0_avalon_slave_readdata_from_sa),
      .ethernet_port_interface_0_avalon_slave_waitrequest_from_sa                                        (ethernet_port_interface_0_avalon_slave_waitrequest_from_sa),
      .reset_n                                                                                           (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_0 the_DE4_SOPC_burst_0
    (
      .clk                         (pll_sys_clk),
      .downstream_address          (DE4_SOPC_burst_0_downstream_address),
      .downstream_arbitrationshare (DE4_SOPC_burst_0_downstream_arbitrationshare),
      .downstream_burstcount       (DE4_SOPC_burst_0_downstream_burstcount),
      .downstream_byteenable       (DE4_SOPC_burst_0_downstream_byteenable),
      .downstream_debugaccess      (DE4_SOPC_burst_0_downstream_debugaccess),
      .downstream_nativeaddress    (DE4_SOPC_burst_0_downstream_nativeaddress),
      .downstream_read             (DE4_SOPC_burst_0_downstream_read),
      .downstream_readdata         (DE4_SOPC_burst_0_downstream_readdata),
      .downstream_readdatavalid    (DE4_SOPC_burst_0_downstream_readdatavalid),
      .downstream_waitrequest      (DE4_SOPC_burst_0_downstream_waitrequest),
      .downstream_write            (DE4_SOPC_burst_0_downstream_write),
      .downstream_writedata        (DE4_SOPC_burst_0_downstream_writedata),
      .reset_n                     (DE4_SOPC_burst_0_downstream_reset_n),
      .upstream_address            (DE4_SOPC_burst_0_upstream_byteaddress),
      .upstream_burstcount         (DE4_SOPC_burst_0_upstream_burstcount),
      .upstream_byteenable         (DE4_SOPC_burst_0_upstream_byteenable),
      .upstream_debugaccess        (DE4_SOPC_burst_0_upstream_debugaccess),
      .upstream_nativeaddress      (DE4_SOPC_burst_0_upstream_address),
      .upstream_read               (DE4_SOPC_burst_0_upstream_read),
      .upstream_readdata           (DE4_SOPC_burst_0_upstream_readdata),
      .upstream_readdatavalid      (DE4_SOPC_burst_0_upstream_readdatavalid),
      .upstream_waitrequest        (DE4_SOPC_burst_0_upstream_waitrequest),
      .upstream_write              (DE4_SOPC_burst_0_upstream_write),
      .upstream_writedata          (DE4_SOPC_burst_0_upstream_writedata)
    );

  DE4_SOPC_burst_1_upstream_arbitrator the_DE4_SOPC_burst_1_upstream
    (
      .DE4_SOPC_burst_1_upstream_address                                                     (DE4_SOPC_burst_1_upstream_address),
      .DE4_SOPC_burst_1_upstream_burstcount                                                  (DE4_SOPC_burst_1_upstream_burstcount),
      .DE4_SOPC_burst_1_upstream_byteaddress                                                 (DE4_SOPC_burst_1_upstream_byteaddress),
      .DE4_SOPC_burst_1_upstream_byteenable                                                  (DE4_SOPC_burst_1_upstream_byteenable),
      .DE4_SOPC_burst_1_upstream_debugaccess                                                 (DE4_SOPC_burst_1_upstream_debugaccess),
      .DE4_SOPC_burst_1_upstream_read                                                        (DE4_SOPC_burst_1_upstream_read),
      .DE4_SOPC_burst_1_upstream_readdata                                                    (DE4_SOPC_burst_1_upstream_readdata),
      .DE4_SOPC_burst_1_upstream_readdata_from_sa                                            (DE4_SOPC_burst_1_upstream_readdata_from_sa),
      .DE4_SOPC_burst_1_upstream_readdatavalid                                               (DE4_SOPC_burst_1_upstream_readdatavalid),
      .DE4_SOPC_burst_1_upstream_waitrequest                                                 (DE4_SOPC_burst_1_upstream_waitrequest),
      .DE4_SOPC_burst_1_upstream_waitrequest_from_sa                                         (DE4_SOPC_burst_1_upstream_waitrequest_from_sa),
      .DE4_SOPC_burst_1_upstream_write                                                       (DE4_SOPC_burst_1_upstream_write),
      .DE4_SOPC_burst_1_upstream_writedata                                                   (DE4_SOPC_burst_1_upstream_writedata),
      .clk                                                                                   (pll_sys_clk),
      .d1_DE4_SOPC_burst_1_upstream_end_xfer                                                 (d1_DE4_SOPC_burst_1_upstream_end_xfer),
      .pcie_compiler_0_Rx_Interface_address_to_slave                                         (pcie_compiler_0_Rx_Interface_address_to_slave),
      .pcie_compiler_0_Rx_Interface_burstcount                                               (pcie_compiler_0_Rx_Interface_burstcount),
      .pcie_compiler_0_Rx_Interface_byteenable                                               (pcie_compiler_0_Rx_Interface_byteenable),
      .pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream                     (pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_dbs_address                                              (pcie_compiler_0_Rx_Interface_dbs_address),
      .pcie_compiler_0_Rx_Interface_dbs_write_32                                             (pcie_compiler_0_Rx_Interface_dbs_write_32),
      .pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream                        (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_latency_counter                                          (pcie_compiler_0_Rx_Interface_latency_counter),
      .pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream              (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_read                                                     (pcie_compiler_0_Rx_Interface_read),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream                (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream                       (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_write                                                    (pcie_compiler_0_Rx_Interface_write),
      .reset_n                                                                               (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_1_downstream_arbitrator the_DE4_SOPC_burst_1_downstream
    (
      .DE4_SOPC_burst_1_downstream_address                                                                 (DE4_SOPC_burst_1_downstream_address),
      .DE4_SOPC_burst_1_downstream_address_to_slave                                                        (DE4_SOPC_burst_1_downstream_address_to_slave),
      .DE4_SOPC_burst_1_downstream_burstcount                                                              (DE4_SOPC_burst_1_downstream_burstcount),
      .DE4_SOPC_burst_1_downstream_byteenable                                                              (DE4_SOPC_burst_1_downstream_byteenable),
      .DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1                        (DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_latency_counter                                                         (DE4_SOPC_burst_1_downstream_latency_counter),
      .DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1              (DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_read                                                                    (DE4_SOPC_burst_1_downstream_read),
      .DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1                (DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register (DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register),
      .DE4_SOPC_burst_1_downstream_readdata                                                                (DE4_SOPC_burst_1_downstream_readdata),
      .DE4_SOPC_burst_1_downstream_readdatavalid                                                           (DE4_SOPC_burst_1_downstream_readdatavalid),
      .DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1                       (DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_reset_n                                                                 (DE4_SOPC_burst_1_downstream_reset_n),
      .DE4_SOPC_burst_1_downstream_waitrequest                                                             (DE4_SOPC_burst_1_downstream_waitrequest),
      .DE4_SOPC_burst_1_downstream_write                                                                   (DE4_SOPC_burst_1_downstream_write),
      .DE4_SOPC_burst_1_downstream_writedata                                                               (DE4_SOPC_burst_1_downstream_writedata),
      .clk                                                                                                 (pll_sys_clk),
      .d1_ethernet_port_interface_0_avalon_slave_1_end_xfer                                                (d1_ethernet_port_interface_0_avalon_slave_1_end_xfer),
      .ethernet_port_interface_0_avalon_slave_1_readdata_from_sa                                           (ethernet_port_interface_0_avalon_slave_1_readdata_from_sa),
      .ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa                                        (ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa),
      .reset_n                                                                                             (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_1 the_DE4_SOPC_burst_1
    (
      .clk                         (pll_sys_clk),
      .downstream_address          (DE4_SOPC_burst_1_downstream_address),
      .downstream_arbitrationshare (DE4_SOPC_burst_1_downstream_arbitrationshare),
      .downstream_burstcount       (DE4_SOPC_burst_1_downstream_burstcount),
      .downstream_byteenable       (DE4_SOPC_burst_1_downstream_byteenable),
      .downstream_debugaccess      (DE4_SOPC_burst_1_downstream_debugaccess),
      .downstream_nativeaddress    (DE4_SOPC_burst_1_downstream_nativeaddress),
      .downstream_read             (DE4_SOPC_burst_1_downstream_read),
      .downstream_readdata         (DE4_SOPC_burst_1_downstream_readdata),
      .downstream_readdatavalid    (DE4_SOPC_burst_1_downstream_readdatavalid),
      .downstream_waitrequest      (DE4_SOPC_burst_1_downstream_waitrequest),
      .downstream_write            (DE4_SOPC_burst_1_downstream_write),
      .downstream_writedata        (DE4_SOPC_burst_1_downstream_writedata),
      .reset_n                     (DE4_SOPC_burst_1_downstream_reset_n),
      .upstream_address            (DE4_SOPC_burst_1_upstream_byteaddress),
      .upstream_burstcount         (DE4_SOPC_burst_1_upstream_burstcount),
      .upstream_byteenable         (DE4_SOPC_burst_1_upstream_byteenable),
      .upstream_debugaccess        (DE4_SOPC_burst_1_upstream_debugaccess),
      .upstream_nativeaddress      (DE4_SOPC_burst_1_upstream_address),
      .upstream_read               (DE4_SOPC_burst_1_upstream_read),
      .upstream_readdata           (DE4_SOPC_burst_1_upstream_readdata),
      .upstream_readdatavalid      (DE4_SOPC_burst_1_upstream_readdatavalid),
      .upstream_waitrequest        (DE4_SOPC_burst_1_upstream_waitrequest),
      .upstream_write              (DE4_SOPC_burst_1_upstream_write),
      .upstream_writedata          (DE4_SOPC_burst_1_upstream_writedata)
    );

  DE4_SOPC_burst_2_upstream_arbitrator the_DE4_SOPC_burst_2_upstream
    (
      .DE4_SOPC_burst_2_upstream_address                                                                (DE4_SOPC_burst_2_upstream_address),
      .DE4_SOPC_burst_2_upstream_burstcount                                                             (DE4_SOPC_burst_2_upstream_burstcount),
      .DE4_SOPC_burst_2_upstream_byteaddress                                                            (DE4_SOPC_burst_2_upstream_byteaddress),
      .DE4_SOPC_burst_2_upstream_byteenable                                                             (DE4_SOPC_burst_2_upstream_byteenable),
      .DE4_SOPC_burst_2_upstream_debugaccess                                                            (DE4_SOPC_burst_2_upstream_debugaccess),
      .DE4_SOPC_burst_2_upstream_read                                                                   (DE4_SOPC_burst_2_upstream_read),
      .DE4_SOPC_burst_2_upstream_readdata                                                               (DE4_SOPC_burst_2_upstream_readdata),
      .DE4_SOPC_burst_2_upstream_readdata_from_sa                                                       (DE4_SOPC_burst_2_upstream_readdata_from_sa),
      .DE4_SOPC_burst_2_upstream_readdatavalid                                                          (DE4_SOPC_burst_2_upstream_readdatavalid),
      .DE4_SOPC_burst_2_upstream_waitrequest                                                            (DE4_SOPC_burst_2_upstream_waitrequest),
      .DE4_SOPC_burst_2_upstream_waitrequest_from_sa                                                    (DE4_SOPC_burst_2_upstream_waitrequest_from_sa),
      .DE4_SOPC_burst_2_upstream_write                                                                  (DE4_SOPC_burst_2_upstream_write),
      .DE4_SOPC_burst_2_upstream_writedata                                                              (DE4_SOPC_burst_2_upstream_writedata),
      .clk                                                                                              (pll_sys_clk),
      .d1_DE4_SOPC_burst_2_upstream_end_xfer                                                            (d1_DE4_SOPC_burst_2_upstream_end_xfer),
      .ethernet_port_interface_0_avalon_master_address_to_slave                                         (ethernet_port_interface_0_avalon_master_address_to_slave),
      .ethernet_port_interface_0_avalon_master_burstcount                                               (ethernet_port_interface_0_avalon_master_burstcount),
      .ethernet_port_interface_0_avalon_master_byteenable                                               (ethernet_port_interface_0_avalon_master_byteenable),
      .ethernet_port_interface_0_avalon_master_chipselect                                               (ethernet_port_interface_0_avalon_master_chipselect),
      .ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream                        (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_latency_counter                                          (ethernet_port_interface_0_avalon_master_latency_counter),
      .ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream              (ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_read                                                     (ethernet_port_interface_0_avalon_master_read),
      .ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream                (ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register (ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register),
      .ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream                       (ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_write                                                    (ethernet_port_interface_0_avalon_master_write),
      .ethernet_port_interface_0_avalon_master_writedata                                                (ethernet_port_interface_0_avalon_master_writedata),
      .reset_n                                                                                          (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_2_downstream_arbitrator the_DE4_SOPC_burst_2_downstream
    (
      .DE4_SOPC_burst_2_downstream_address                                                     (DE4_SOPC_burst_2_downstream_address),
      .DE4_SOPC_burst_2_downstream_address_to_slave                                            (DE4_SOPC_burst_2_downstream_address_to_slave),
      .DE4_SOPC_burst_2_downstream_burstcount                                                  (DE4_SOPC_burst_2_downstream_burstcount),
      .DE4_SOPC_burst_2_downstream_byteenable                                                  (DE4_SOPC_burst_2_downstream_byteenable),
      .DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface                        (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_latency_counter                                             (DE4_SOPC_burst_2_downstream_latency_counter),
      .DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface              (DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_read                                                        (DE4_SOPC_burst_2_downstream_read),
      .DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface                (DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register (DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register),
      .DE4_SOPC_burst_2_downstream_readdata                                                    (DE4_SOPC_burst_2_downstream_readdata),
      .DE4_SOPC_burst_2_downstream_readdatavalid                                               (DE4_SOPC_burst_2_downstream_readdatavalid),
      .DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface                       (DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_reset_n                                                     (DE4_SOPC_burst_2_downstream_reset_n),
      .DE4_SOPC_burst_2_downstream_waitrequest                                                 (DE4_SOPC_burst_2_downstream_waitrequest),
      .DE4_SOPC_burst_2_downstream_write                                                       (DE4_SOPC_burst_2_downstream_write),
      .DE4_SOPC_burst_2_downstream_writedata                                                   (DE4_SOPC_burst_2_downstream_writedata),
      .clk                                                                                     (pll_sys_clk),
      .d1_pcie_compiler_0_Tx_Interface_end_xfer                                                (d1_pcie_compiler_0_Tx_Interface_end_xfer),
      .pcie_compiler_0_Tx_Interface_readdata_from_sa                                           (pcie_compiler_0_Tx_Interface_readdata_from_sa),
      .pcie_compiler_0_Tx_Interface_waitrequest_from_sa                                        (pcie_compiler_0_Tx_Interface_waitrequest_from_sa),
      .reset_n                                                                                 (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_2 the_DE4_SOPC_burst_2
    (
      .clk                         (pll_sys_clk),
      .downstream_address          (DE4_SOPC_burst_2_downstream_address),
      .downstream_arbitrationshare (DE4_SOPC_burst_2_downstream_arbitrationshare),
      .downstream_burstcount       (DE4_SOPC_burst_2_downstream_burstcount),
      .downstream_byteenable       (DE4_SOPC_burst_2_downstream_byteenable),
      .downstream_debugaccess      (DE4_SOPC_burst_2_downstream_debugaccess),
      .downstream_nativeaddress    (DE4_SOPC_burst_2_downstream_nativeaddress),
      .downstream_read             (DE4_SOPC_burst_2_downstream_read),
      .downstream_readdata         (DE4_SOPC_burst_2_downstream_readdata),
      .downstream_readdatavalid    (DE4_SOPC_burst_2_downstream_readdatavalid),
      .downstream_waitrequest      (DE4_SOPC_burst_2_downstream_waitrequest),
      .downstream_write            (DE4_SOPC_burst_2_downstream_write),
      .downstream_writedata        (DE4_SOPC_burst_2_downstream_writedata),
      .reset_n                     (DE4_SOPC_burst_2_downstream_reset_n),
      .upstream_address            (DE4_SOPC_burst_2_upstream_byteaddress),
      .upstream_burstcount         (DE4_SOPC_burst_2_upstream_burstcount),
      .upstream_byteenable         (DE4_SOPC_burst_2_upstream_byteenable),
      .upstream_debugaccess        (DE4_SOPC_burst_2_upstream_debugaccess),
      .upstream_nativeaddress      (DE4_SOPC_burst_2_upstream_address),
      .upstream_read               (DE4_SOPC_burst_2_upstream_read),
      .upstream_readdata           (DE4_SOPC_burst_2_upstream_readdata),
      .upstream_readdatavalid      (DE4_SOPC_burst_2_upstream_readdatavalid),
      .upstream_waitrequest        (DE4_SOPC_burst_2_upstream_waitrequest),
      .upstream_write              (DE4_SOPC_burst_2_upstream_write),
      .upstream_writedata          (DE4_SOPC_burst_2_upstream_writedata)
    );

  DE4_SOPC_burst_3_upstream_arbitrator the_DE4_SOPC_burst_3_upstream
    (
      .DE4_SOPC_burst_3_upstream_address                                                     (DE4_SOPC_burst_3_upstream_address),
      .DE4_SOPC_burst_3_upstream_burstcount                                                  (DE4_SOPC_burst_3_upstream_burstcount),
      .DE4_SOPC_burst_3_upstream_byteaddress                                                 (DE4_SOPC_burst_3_upstream_byteaddress),
      .DE4_SOPC_burst_3_upstream_byteenable                                                  (DE4_SOPC_burst_3_upstream_byteenable),
      .DE4_SOPC_burst_3_upstream_debugaccess                                                 (DE4_SOPC_burst_3_upstream_debugaccess),
      .DE4_SOPC_burst_3_upstream_read                                                        (DE4_SOPC_burst_3_upstream_read),
      .DE4_SOPC_burst_3_upstream_readdata                                                    (DE4_SOPC_burst_3_upstream_readdata),
      .DE4_SOPC_burst_3_upstream_readdata_from_sa                                            (DE4_SOPC_burst_3_upstream_readdata_from_sa),
      .DE4_SOPC_burst_3_upstream_readdatavalid                                               (DE4_SOPC_burst_3_upstream_readdatavalid),
      .DE4_SOPC_burst_3_upstream_waitrequest                                                 (DE4_SOPC_burst_3_upstream_waitrequest),
      .DE4_SOPC_burst_3_upstream_waitrequest_from_sa                                         (DE4_SOPC_burst_3_upstream_waitrequest_from_sa),
      .DE4_SOPC_burst_3_upstream_write                                                       (DE4_SOPC_burst_3_upstream_write),
      .DE4_SOPC_burst_3_upstream_writedata                                                   (DE4_SOPC_burst_3_upstream_writedata),
      .clk                                                                                   (pll_sys_clk),
      .d1_DE4_SOPC_burst_3_upstream_end_xfer                                                 (d1_DE4_SOPC_burst_3_upstream_end_xfer),
      .pcie_compiler_0_Rx_Interface_address_to_slave                                         (pcie_compiler_0_Rx_Interface_address_to_slave),
      .pcie_compiler_0_Rx_Interface_burstcount                                               (pcie_compiler_0_Rx_Interface_burstcount),
      .pcie_compiler_0_Rx_Interface_byteenable                                               (pcie_compiler_0_Rx_Interface_byteenable),
      .pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream                     (pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_dbs_address                                              (pcie_compiler_0_Rx_Interface_dbs_address),
      .pcie_compiler_0_Rx_Interface_dbs_write_32                                             (pcie_compiler_0_Rx_Interface_dbs_write_32),
      .pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream                        (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_latency_counter                                          (pcie_compiler_0_Rx_Interface_latency_counter),
      .pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream              (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_read                                                     (pcie_compiler_0_Rx_Interface_read),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream                (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream                       (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_write                                                    (pcie_compiler_0_Rx_Interface_write),
      .reset_n                                                                               (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_3_downstream_arbitrator the_DE4_SOPC_burst_3_downstream
    (
      .DE4_SOPC_burst_3_downstream_address                                                   (DE4_SOPC_burst_3_downstream_address),
      .DE4_SOPC_burst_3_downstream_address_to_slave                                          (DE4_SOPC_burst_3_downstream_address_to_slave),
      .DE4_SOPC_burst_3_downstream_burstcount                                                (DE4_SOPC_burst_3_downstream_burstcount),
      .DE4_SOPC_burst_3_downstream_byteenable                                                (DE4_SOPC_burst_3_downstream_byteenable),
      .DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access           (DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_latency_counter                                           (DE4_SOPC_burst_3_downstream_latency_counter),
      .DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access (DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_read                                                      (DE4_SOPC_burst_3_downstream_read),
      .DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access   (DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_readdata                                                  (DE4_SOPC_burst_3_downstream_readdata),
      .DE4_SOPC_burst_3_downstream_readdatavalid                                             (DE4_SOPC_burst_3_downstream_readdatavalid),
      .DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access          (DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_reset_n                                                   (DE4_SOPC_burst_3_downstream_reset_n),
      .DE4_SOPC_burst_3_downstream_waitrequest                                               (DE4_SOPC_burst_3_downstream_waitrequest),
      .DE4_SOPC_burst_3_downstream_write                                                     (DE4_SOPC_burst_3_downstream_write),
      .DE4_SOPC_burst_3_downstream_writedata                                                 (DE4_SOPC_burst_3_downstream_writedata),
      .clk                                                                                   (pll_sys_clk),
      .d1_pcie_compiler_0_Control_Register_Access_end_xfer                                   (d1_pcie_compiler_0_Control_Register_Access_end_xfer),
      .pcie_compiler_0_Control_Register_Access_readdata_from_sa                              (pcie_compiler_0_Control_Register_Access_readdata_from_sa),
      .pcie_compiler_0_Control_Register_Access_waitrequest_from_sa                           (pcie_compiler_0_Control_Register_Access_waitrequest_from_sa),
      .reset_n                                                                               (pll_sys_clk_reset_n)
    );

  DE4_SOPC_burst_3 the_DE4_SOPC_burst_3
    (
      .clk                         (pll_sys_clk),
      .downstream_address          (DE4_SOPC_burst_3_downstream_address),
      .downstream_arbitrationshare (DE4_SOPC_burst_3_downstream_arbitrationshare),
      .downstream_burstcount       (DE4_SOPC_burst_3_downstream_burstcount),
      .downstream_byteenable       (DE4_SOPC_burst_3_downstream_byteenable),
      .downstream_debugaccess      (DE4_SOPC_burst_3_downstream_debugaccess),
      .downstream_nativeaddress    (DE4_SOPC_burst_3_downstream_nativeaddress),
      .downstream_read             (DE4_SOPC_burst_3_downstream_read),
      .downstream_readdata         (DE4_SOPC_burst_3_downstream_readdata),
      .downstream_readdatavalid    (DE4_SOPC_burst_3_downstream_readdatavalid),
      .downstream_waitrequest      (DE4_SOPC_burst_3_downstream_waitrequest),
      .downstream_write            (DE4_SOPC_burst_3_downstream_write),
      .downstream_writedata        (DE4_SOPC_burst_3_downstream_writedata),
      .reset_n                     (DE4_SOPC_burst_3_downstream_reset_n),
      .upstream_address            (DE4_SOPC_burst_3_upstream_byteaddress),
      .upstream_burstcount         (DE4_SOPC_burst_3_upstream_burstcount),
      .upstream_byteenable         (DE4_SOPC_burst_3_upstream_byteenable),
      .upstream_debugaccess        (DE4_SOPC_burst_3_upstream_debugaccess),
      .upstream_nativeaddress      (DE4_SOPC_burst_3_upstream_address),
      .upstream_read               (DE4_SOPC_burst_3_upstream_read),
      .upstream_readdata           (DE4_SOPC_burst_3_upstream_readdata),
      .upstream_readdatavalid      (DE4_SOPC_burst_3_upstream_readdatavalid),
      .upstream_waitrequest        (DE4_SOPC_burst_3_upstream_waitrequest),
      .upstream_write              (DE4_SOPC_burst_3_upstream_write),
      .upstream_writedata          (DE4_SOPC_burst_3_upstream_writedata)
    );

  DE4_SOPC_clock_0_in_arbitrator the_DE4_SOPC_clock_0_in
    (
      .DE4_SOPC_clock_0_in_address                                          (DE4_SOPC_clock_0_in_address),
      .DE4_SOPC_clock_0_in_byteenable                                       (DE4_SOPC_clock_0_in_byteenable),
      .DE4_SOPC_clock_0_in_endofpacket                                      (DE4_SOPC_clock_0_in_endofpacket),
      .DE4_SOPC_clock_0_in_endofpacket_from_sa                              (DE4_SOPC_clock_0_in_endofpacket_from_sa),
      .DE4_SOPC_clock_0_in_nativeaddress                                    (DE4_SOPC_clock_0_in_nativeaddress),
      .DE4_SOPC_clock_0_in_read                                             (DE4_SOPC_clock_0_in_read),
      .DE4_SOPC_clock_0_in_readdata                                         (DE4_SOPC_clock_0_in_readdata),
      .DE4_SOPC_clock_0_in_readdata_from_sa                                 (DE4_SOPC_clock_0_in_readdata_from_sa),
      .DE4_SOPC_clock_0_in_reset_n                                          (DE4_SOPC_clock_0_in_reset_n),
      .DE4_SOPC_clock_0_in_waitrequest                                      (DE4_SOPC_clock_0_in_waitrequest),
      .DE4_SOPC_clock_0_in_waitrequest_from_sa                              (DE4_SOPC_clock_0_in_waitrequest_from_sa),
      .DE4_SOPC_clock_0_in_write                                            (DE4_SOPC_clock_0_in_write),
      .DE4_SOPC_clock_0_in_writedata                                        (DE4_SOPC_clock_0_in_writedata),
      .clk                                                                  (pll_sys_clk),
      .d1_DE4_SOPC_clock_0_in_end_xfer                                      (d1_DE4_SOPC_clock_0_in_end_xfer),
      .master_0_granted_DE4_SOPC_clock_0_in                                 (master_0_granted_DE4_SOPC_clock_0_in),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_byteenable                                           (master_0_master_byteenable),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_DE4_SOPC_clock_0_in                       (master_0_qualified_request_DE4_SOPC_clock_0_in),
      .master_0_read_data_valid_DE4_SOPC_clock_0_in                         (master_0_read_data_valid_DE4_SOPC_clock_0_in),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_requests_DE4_SOPC_clock_0_in                                (master_0_requests_DE4_SOPC_clock_0_in),
      .reset_n                                                              (pll_sys_clk_reset_n)
    );

  DE4_SOPC_clock_0_out_arbitrator the_DE4_SOPC_clock_0_out
    (
      .DE4_SOPC_clock_0_out_address                  (DE4_SOPC_clock_0_out_address),
      .DE4_SOPC_clock_0_out_address_to_slave         (DE4_SOPC_clock_0_out_address_to_slave),
      .DE4_SOPC_clock_0_out_byteenable               (DE4_SOPC_clock_0_out_byteenable),
      .DE4_SOPC_clock_0_out_granted_pll_s1           (DE4_SOPC_clock_0_out_granted_pll_s1),
      .DE4_SOPC_clock_0_out_qualified_request_pll_s1 (DE4_SOPC_clock_0_out_qualified_request_pll_s1),
      .DE4_SOPC_clock_0_out_read                     (DE4_SOPC_clock_0_out_read),
      .DE4_SOPC_clock_0_out_read_data_valid_pll_s1   (DE4_SOPC_clock_0_out_read_data_valid_pll_s1),
      .DE4_SOPC_clock_0_out_readdata                 (DE4_SOPC_clock_0_out_readdata),
      .DE4_SOPC_clock_0_out_requests_pll_s1          (DE4_SOPC_clock_0_out_requests_pll_s1),
      .DE4_SOPC_clock_0_out_reset_n                  (DE4_SOPC_clock_0_out_reset_n),
      .DE4_SOPC_clock_0_out_waitrequest              (DE4_SOPC_clock_0_out_waitrequest),
      .DE4_SOPC_clock_0_out_write                    (DE4_SOPC_clock_0_out_write),
      .DE4_SOPC_clock_0_out_writedata                (DE4_SOPC_clock_0_out_writedata),
      .clk                                           (ext_clk),
      .d1_pll_s1_end_xfer                            (d1_pll_s1_end_xfer),
      .pll_s1_readdata_from_sa                       (pll_s1_readdata_from_sa),
      .reset_n                                       (ext_clk_reset_n)
    );

  DE4_SOPC_clock_0 the_DE4_SOPC_clock_0
    (
      .master_address       (DE4_SOPC_clock_0_out_address),
      .master_byteenable    (DE4_SOPC_clock_0_out_byteenable),
      .master_clk           (ext_clk),
      .master_endofpacket   (DE4_SOPC_clock_0_out_endofpacket),
      .master_nativeaddress (DE4_SOPC_clock_0_out_nativeaddress),
      .master_read          (DE4_SOPC_clock_0_out_read),
      .master_readdata      (DE4_SOPC_clock_0_out_readdata),
      .master_reset_n       (DE4_SOPC_clock_0_out_reset_n),
      .master_waitrequest   (DE4_SOPC_clock_0_out_waitrequest),
      .master_write         (DE4_SOPC_clock_0_out_write),
      .master_writedata     (DE4_SOPC_clock_0_out_writedata),
      .slave_address        (DE4_SOPC_clock_0_in_address),
      .slave_byteenable     (DE4_SOPC_clock_0_in_byteenable),
      .slave_clk            (pll_sys_clk),
      .slave_endofpacket    (DE4_SOPC_clock_0_in_endofpacket),
      .slave_nativeaddress  (DE4_SOPC_clock_0_in_nativeaddress),
      .slave_read           (DE4_SOPC_clock_0_in_read),
      .slave_readdata       (DE4_SOPC_clock_0_in_readdata),
      .slave_reset_n        (DE4_SOPC_clock_0_in_reset_n),
      .slave_waitrequest    (DE4_SOPC_clock_0_in_waitrequest),
      .slave_write          (DE4_SOPC_clock_0_in_write),
      .slave_writedata      (DE4_SOPC_clock_0_in_writedata)
    );

  ethernet_port_interface_0_avalon_slave_arbitrator the_ethernet_port_interface_0_avalon_slave
    (
      .DE4_SOPC_burst_0_downstream_address_to_slave                                                      (DE4_SOPC_burst_0_downstream_address_to_slave),
      .DE4_SOPC_burst_0_downstream_arbitrationshare                                                      (DE4_SOPC_burst_0_downstream_arbitrationshare),
      .DE4_SOPC_burst_0_downstream_burstcount                                                            (DE4_SOPC_burst_0_downstream_burstcount),
      .DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave                        (DE4_SOPC_burst_0_downstream_granted_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_latency_counter                                                       (DE4_SOPC_burst_0_downstream_latency_counter),
      .DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave              (DE4_SOPC_burst_0_downstream_qualified_request_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_read                                                                  (DE4_SOPC_burst_0_downstream_read),
      .DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave                (DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register (DE4_SOPC_burst_0_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_shift_register),
      .DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave                       (DE4_SOPC_burst_0_downstream_requests_ethernet_port_interface_0_avalon_slave),
      .DE4_SOPC_burst_0_downstream_write                                                                 (DE4_SOPC_burst_0_downstream_write),
      .DE4_SOPC_burst_0_downstream_writedata                                                             (DE4_SOPC_burst_0_downstream_writedata),
      .clk                                                                                               (pll_sys_clk),
      .d1_ethernet_port_interface_0_avalon_slave_end_xfer                                                (d1_ethernet_port_interface_0_avalon_slave_end_xfer),
      .ethernet_port_interface_0_avalon_slave_address                                                    (ethernet_port_interface_0_avalon_slave_address),
      .ethernet_port_interface_0_avalon_slave_read                                                       (ethernet_port_interface_0_avalon_slave_read),
      .ethernet_port_interface_0_avalon_slave_readdata                                                   (ethernet_port_interface_0_avalon_slave_readdata),
      .ethernet_port_interface_0_avalon_slave_readdata_from_sa                                           (ethernet_port_interface_0_avalon_slave_readdata_from_sa),
      .ethernet_port_interface_0_avalon_slave_readdatavalid                                              (ethernet_port_interface_0_avalon_slave_readdatavalid),
      .ethernet_port_interface_0_avalon_slave_waitrequest                                                (ethernet_port_interface_0_avalon_slave_waitrequest),
      .ethernet_port_interface_0_avalon_slave_waitrequest_from_sa                                        (ethernet_port_interface_0_avalon_slave_waitrequest_from_sa),
      .ethernet_port_interface_0_avalon_slave_write                                                      (ethernet_port_interface_0_avalon_slave_write),
      .ethernet_port_interface_0_avalon_slave_writedata                                                  (ethernet_port_interface_0_avalon_slave_writedata),
      .reset_n                                                                                           (pll_sys_clk_reset_n)
    );

  ethernet_port_interface_0_avalon_slave_1_arbitrator the_ethernet_port_interface_0_avalon_slave_1
    (
      .DE4_SOPC_burst_1_downstream_address_to_slave                                                        (DE4_SOPC_burst_1_downstream_address_to_slave),
      .DE4_SOPC_burst_1_downstream_arbitrationshare                                                        (DE4_SOPC_burst_1_downstream_arbitrationshare),
      .DE4_SOPC_burst_1_downstream_burstcount                                                              (DE4_SOPC_burst_1_downstream_burstcount),
      .DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1                        (DE4_SOPC_burst_1_downstream_granted_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_latency_counter                                                         (DE4_SOPC_burst_1_downstream_latency_counter),
      .DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1              (DE4_SOPC_burst_1_downstream_qualified_request_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_read                                                                    (DE4_SOPC_burst_1_downstream_read),
      .DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1                (DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register (DE4_SOPC_burst_1_downstream_read_data_valid_ethernet_port_interface_0_avalon_slave_1_shift_register),
      .DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1                       (DE4_SOPC_burst_1_downstream_requests_ethernet_port_interface_0_avalon_slave_1),
      .DE4_SOPC_burst_1_downstream_write                                                                   (DE4_SOPC_burst_1_downstream_write),
      .DE4_SOPC_burst_1_downstream_writedata                                                               (DE4_SOPC_burst_1_downstream_writedata),
      .clk                                                                                                 (pll_sys_clk),
      .d1_ethernet_port_interface_0_avalon_slave_1_end_xfer                                                (d1_ethernet_port_interface_0_avalon_slave_1_end_xfer),
      .ethernet_port_interface_0_avalon_slave_1_address                                                    (ethernet_port_interface_0_avalon_slave_1_address),
      .ethernet_port_interface_0_avalon_slave_1_read                                                       (ethernet_port_interface_0_avalon_slave_1_read),
      .ethernet_port_interface_0_avalon_slave_1_readdata                                                   (ethernet_port_interface_0_avalon_slave_1_readdata),
      .ethernet_port_interface_0_avalon_slave_1_readdata_from_sa                                           (ethernet_port_interface_0_avalon_slave_1_readdata_from_sa),
      .ethernet_port_interface_0_avalon_slave_1_readdatavalid                                              (ethernet_port_interface_0_avalon_slave_1_readdatavalid),
      .ethernet_port_interface_0_avalon_slave_1_waitrequest                                                (ethernet_port_interface_0_avalon_slave_1_waitrequest),
      .ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa                                        (ethernet_port_interface_0_avalon_slave_1_waitrequest_from_sa),
      .ethernet_port_interface_0_avalon_slave_1_write                                                      (ethernet_port_interface_0_avalon_slave_1_write),
      .ethernet_port_interface_0_avalon_slave_1_writedata                                                  (ethernet_port_interface_0_avalon_slave_1_writedata),
      .reset_n                                                                                             (pll_sys_clk_reset_n)
    );

  ethernet_port_interface_0_avalon_streaming_sink_arbitrator the_ethernet_port_interface_0_avalon_streaming_sink
    (
      .clk                                                           (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_data          (ethernet_port_interface_0_avalon_streaming_sink_data),
      .ethernet_port_interface_0_avalon_streaming_sink_endofpacket   (ethernet_port_interface_0_avalon_streaming_sink_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_error         (ethernet_port_interface_0_avalon_streaming_sink_error),
      .ethernet_port_interface_0_avalon_streaming_sink_ready         (ethernet_port_interface_0_avalon_streaming_sink_ready),
      .ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa),
      .ethernet_port_interface_0_avalon_streaming_sink_startofpacket (ethernet_port_interface_0_avalon_streaming_sink_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_valid         (ethernet_port_interface_0_avalon_streaming_sink_valid),
      .reset_n                                                       (pll_sys_clk_reset_n),
      .tse_mac_receive_data                                          (tse_mac_receive_data),
      .tse_mac_receive_endofpacket                                   (tse_mac_receive_endofpacket),
      .tse_mac_receive_error                                         (tse_mac_receive_error),
      .tse_mac_receive_startofpacket                                 (tse_mac_receive_startofpacket),
      .tse_mac_receive_valid                                         (tse_mac_receive_valid)
    );

  ethernet_port_interface_0_avalon_streaming_sink_1_arbitrator the_ethernet_port_interface_0_avalon_streaming_sink_1
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_1_data          (ethernet_port_interface_0_avalon_streaming_sink_1_data),
      .ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket   (ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_1_error         (ethernet_port_interface_0_avalon_streaming_sink_1_error),
      .ethernet_port_interface_0_avalon_streaming_sink_1_ready         (ethernet_port_interface_0_avalon_streaming_sink_1_ready),
      .ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa),
      .ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket (ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_1_valid         (ethernet_port_interface_0_avalon_streaming_sink_1_valid),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac1_receive_data                                           (tse_mac1_receive_data),
      .tse_mac1_receive_endofpacket                                    (tse_mac1_receive_endofpacket),
      .tse_mac1_receive_error                                          (tse_mac1_receive_error),
      .tse_mac1_receive_startofpacket                                  (tse_mac1_receive_startofpacket),
      .tse_mac1_receive_valid                                          (tse_mac1_receive_valid)
    );

  ethernet_port_interface_0_avalon_streaming_sink_2_arbitrator the_ethernet_port_interface_0_avalon_streaming_sink_2
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_2_data          (ethernet_port_interface_0_avalon_streaming_sink_2_data),
      .ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket   (ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_2_error         (ethernet_port_interface_0_avalon_streaming_sink_2_error),
      .ethernet_port_interface_0_avalon_streaming_sink_2_ready         (ethernet_port_interface_0_avalon_streaming_sink_2_ready),
      .ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa),
      .ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket (ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_2_valid         (ethernet_port_interface_0_avalon_streaming_sink_2_valid),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac2_receive_data                                           (tse_mac2_receive_data),
      .tse_mac2_receive_endofpacket                                    (tse_mac2_receive_endofpacket),
      .tse_mac2_receive_error                                          (tse_mac2_receive_error),
      .tse_mac2_receive_startofpacket                                  (tse_mac2_receive_startofpacket),
      .tse_mac2_receive_valid                                          (tse_mac2_receive_valid)
    );

  ethernet_port_interface_0_avalon_streaming_sink_3_arbitrator the_ethernet_port_interface_0_avalon_streaming_sink_3
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_3_data          (ethernet_port_interface_0_avalon_streaming_sink_3_data),
      .ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket   (ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_3_error         (ethernet_port_interface_0_avalon_streaming_sink_3_error),
      .ethernet_port_interface_0_avalon_streaming_sink_3_ready         (ethernet_port_interface_0_avalon_streaming_sink_3_ready),
      .ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa),
      .ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket (ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_sink_3_valid         (ethernet_port_interface_0_avalon_streaming_sink_3_valid),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac3_receive_data                                           (tse_mac3_receive_data),
      .tse_mac3_receive_endofpacket                                    (tse_mac3_receive_endofpacket),
      .tse_mac3_receive_error                                          (tse_mac3_receive_error),
      .tse_mac3_receive_startofpacket                                  (tse_mac3_receive_startofpacket),
      .tse_mac3_receive_valid                                          (tse_mac3_receive_valid)
    );

  ethernet_port_interface_0_control_port_arbitrator the_ethernet_port_interface_0_control_port
    (
      .clk                                                                  (pll_sys_clk),
      .d1_ethernet_port_interface_0_control_port_end_xfer                   (d1_ethernet_port_interface_0_control_port_end_xfer),
      .ethernet_port_interface_0_control_port_address                       (ethernet_port_interface_0_control_port_address),
      .ethernet_port_interface_0_control_port_read                          (ethernet_port_interface_0_control_port_read),
      .ethernet_port_interface_0_control_port_readdata                      (ethernet_port_interface_0_control_port_readdata),
      .ethernet_port_interface_0_control_port_readdata_from_sa              (ethernet_port_interface_0_control_port_readdata_from_sa),
      .ethernet_port_interface_0_control_port_reset                         (ethernet_port_interface_0_control_port_reset),
      .ethernet_port_interface_0_control_port_waitrequest                   (ethernet_port_interface_0_control_port_waitrequest),
      .ethernet_port_interface_0_control_port_waitrequest_from_sa           (ethernet_port_interface_0_control_port_waitrequest_from_sa),
      .ethernet_port_interface_0_control_port_write                         (ethernet_port_interface_0_control_port_write),
      .ethernet_port_interface_0_control_port_writedata                     (ethernet_port_interface_0_control_port_writedata),
      .master_0_granted_ethernet_port_interface_0_control_port              (master_0_granted_ethernet_port_interface_0_control_port),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_ethernet_port_interface_0_control_port    (master_0_qualified_request_ethernet_port_interface_0_control_port),
      .master_0_read_data_valid_ethernet_port_interface_0_control_port      (master_0_read_data_valid_ethernet_port_interface_0_control_port),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_requests_ethernet_port_interface_0_control_port             (master_0_requests_ethernet_port_interface_0_control_port),
      .reset_n                                                              (pll_sys_clk_reset_n)
    );

  ethernet_port_interface_0_avalon_master_arbitrator the_ethernet_port_interface_0_avalon_master
    (
      .DE4_SOPC_burst_2_upstream_readdata_from_sa                                                       (DE4_SOPC_burst_2_upstream_readdata_from_sa),
      .DE4_SOPC_burst_2_upstream_waitrequest_from_sa                                                    (DE4_SOPC_burst_2_upstream_waitrequest_from_sa),
      .clk                                                                                              (pll_sys_clk),
      .d1_DE4_SOPC_burst_2_upstream_end_xfer                                                            (d1_DE4_SOPC_burst_2_upstream_end_xfer),
      .ethernet_port_interface_0_avalon_master_address                                                  (ethernet_port_interface_0_avalon_master_address),
      .ethernet_port_interface_0_avalon_master_address_to_slave                                         (ethernet_port_interface_0_avalon_master_address_to_slave),
      .ethernet_port_interface_0_avalon_master_burstcount                                               (ethernet_port_interface_0_avalon_master_burstcount),
      .ethernet_port_interface_0_avalon_master_byteenable                                               (ethernet_port_interface_0_avalon_master_byteenable),
      .ethernet_port_interface_0_avalon_master_chipselect                                               (ethernet_port_interface_0_avalon_master_chipselect),
      .ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream                        (ethernet_port_interface_0_avalon_master_granted_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_latency_counter                                          (ethernet_port_interface_0_avalon_master_latency_counter),
      .ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream              (ethernet_port_interface_0_avalon_master_qualified_request_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_read                                                     (ethernet_port_interface_0_avalon_master_read),
      .ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream                (ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register (ethernet_port_interface_0_avalon_master_read_data_valid_DE4_SOPC_burst_2_upstream_shift_register),
      .ethernet_port_interface_0_avalon_master_readdata                                                 (ethernet_port_interface_0_avalon_master_readdata),
      .ethernet_port_interface_0_avalon_master_readdatavalid                                            (ethernet_port_interface_0_avalon_master_readdatavalid),
      .ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream                       (ethernet_port_interface_0_avalon_master_requests_DE4_SOPC_burst_2_upstream),
      .ethernet_port_interface_0_avalon_master_waitrequest                                              (ethernet_port_interface_0_avalon_master_waitrequest),
      .ethernet_port_interface_0_avalon_master_write                                                    (ethernet_port_interface_0_avalon_master_write),
      .ethernet_port_interface_0_avalon_master_writedata                                                (ethernet_port_interface_0_avalon_master_writedata),
      .reset_n                                                                                          (pll_sys_clk_reset_n)
    );

  ethernet_port_interface_0_avalon_master_1_arbitrator the_ethernet_port_interface_0_avalon_master_1
    (
      .clk                                                                               (pll_sys_clk),
      .d1_tse_mac1_control_port_end_xfer                                                 (d1_tse_mac1_control_port_end_xfer),
      .d1_tse_mac2_control_port_end_xfer                                                 (d1_tse_mac2_control_port_end_xfer),
      .d1_tse_mac3_control_port_end_xfer                                                 (d1_tse_mac3_control_port_end_xfer),
      .d1_tse_mac_control_port_end_xfer                                                  (d1_tse_mac_control_port_end_xfer),
      .ethernet_port_interface_0_avalon_master_1_address                                 (ethernet_port_interface_0_avalon_master_1_address),
      .ethernet_port_interface_0_avalon_master_1_address_to_slave                        (ethernet_port_interface_0_avalon_master_1_address_to_slave),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port            (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_latency_counter                         (ethernet_port_interface_0_avalon_master_1_latency_counter),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port  (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_read                                    (ethernet_port_interface_0_avalon_master_1_read),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port    (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_readdata                                (ethernet_port_interface_0_avalon_master_1_readdata),
      .ethernet_port_interface_0_avalon_master_1_readdatavalid                           (ethernet_port_interface_0_avalon_master_1_readdatavalid),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port           (ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_waitrequest                             (ethernet_port_interface_0_avalon_master_1_waitrequest),
      .ethernet_port_interface_0_avalon_master_1_write                                   (ethernet_port_interface_0_avalon_master_1_write),
      .ethernet_port_interface_0_avalon_master_1_writedata                               (ethernet_port_interface_0_avalon_master_1_writedata),
      .reset_n                                                                           (pll_sys_clk_reset_n),
      .tse_mac1_control_port_readdata_from_sa                                            (tse_mac1_control_port_readdata_from_sa),
      .tse_mac1_control_port_waitrequest_from_sa                                         (tse_mac1_control_port_waitrequest_from_sa),
      .tse_mac2_control_port_readdata_from_sa                                            (tse_mac2_control_port_readdata_from_sa),
      .tse_mac2_control_port_waitrequest_from_sa                                         (tse_mac2_control_port_waitrequest_from_sa),
      .tse_mac3_control_port_readdata_from_sa                                            (tse_mac3_control_port_readdata_from_sa),
      .tse_mac3_control_port_waitrequest_from_sa                                         (tse_mac3_control_port_waitrequest_from_sa),
      .tse_mac_control_port_readdata_from_sa                                             (tse_mac_control_port_readdata_from_sa),
      .tse_mac_control_port_waitrequest_from_sa                                          (tse_mac_control_port_waitrequest_from_sa)
    );

  ethernet_port_interface_0_avalon_streaming_source_arbitrator the_ethernet_port_interface_0_avalon_streaming_source
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_data          (ethernet_port_interface_0_avalon_streaming_source_data),
      .ethernet_port_interface_0_avalon_streaming_source_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_error         (ethernet_port_interface_0_avalon_streaming_source_error),
      .ethernet_port_interface_0_avalon_streaming_source_ready         (ethernet_port_interface_0_avalon_streaming_source_ready),
      .ethernet_port_interface_0_avalon_streaming_source_startofpacket (ethernet_port_interface_0_avalon_streaming_source_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_valid         (ethernet_port_interface_0_avalon_streaming_source_valid),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac_transmit_ready_from_sa                                  (tse_mac_transmit_ready_from_sa)
    );

  ethernet_port_interface_0_avalon_streaming_source_1_arbitrator the_ethernet_port_interface_0_avalon_streaming_source_1
    (
      .clk                                                               (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_1_data          (ethernet_port_interface_0_avalon_streaming_source_1_data),
      .ethernet_port_interface_0_avalon_streaming_source_1_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_1_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_1_error         (ethernet_port_interface_0_avalon_streaming_source_1_error),
      .ethernet_port_interface_0_avalon_streaming_source_1_ready         (ethernet_port_interface_0_avalon_streaming_source_1_ready),
      .ethernet_port_interface_0_avalon_streaming_source_1_startofpacket (ethernet_port_interface_0_avalon_streaming_source_1_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_1_valid         (ethernet_port_interface_0_avalon_streaming_source_1_valid),
      .reset_n                                                           (pll_sys_clk_reset_n),
      .tse_mac1_transmit_ready_from_sa                                   (tse_mac1_transmit_ready_from_sa)
    );

  ethernet_port_interface_0_avalon_streaming_source_2_arbitrator the_ethernet_port_interface_0_avalon_streaming_source_2
    (
      .clk                                                               (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_2_data          (ethernet_port_interface_0_avalon_streaming_source_2_data),
      .ethernet_port_interface_0_avalon_streaming_source_2_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_2_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_2_error         (ethernet_port_interface_0_avalon_streaming_source_2_error),
      .ethernet_port_interface_0_avalon_streaming_source_2_ready         (ethernet_port_interface_0_avalon_streaming_source_2_ready),
      .ethernet_port_interface_0_avalon_streaming_source_2_startofpacket (ethernet_port_interface_0_avalon_streaming_source_2_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_2_valid         (ethernet_port_interface_0_avalon_streaming_source_2_valid),
      .reset_n                                                           (pll_sys_clk_reset_n),
      .tse_mac2_transmit_ready_from_sa                                   (tse_mac2_transmit_ready_from_sa)
    );

  ethernet_port_interface_0_avalon_streaming_source_3_arbitrator the_ethernet_port_interface_0_avalon_streaming_source_3
    (
      .clk                                                               (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_3_data          (ethernet_port_interface_0_avalon_streaming_source_3_data),
      .ethernet_port_interface_0_avalon_streaming_source_3_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_3_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_3_error         (ethernet_port_interface_0_avalon_streaming_source_3_error),
      .ethernet_port_interface_0_avalon_streaming_source_3_ready         (ethernet_port_interface_0_avalon_streaming_source_3_ready),
      .ethernet_port_interface_0_avalon_streaming_source_3_startofpacket (ethernet_port_interface_0_avalon_streaming_source_3_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_3_valid         (ethernet_port_interface_0_avalon_streaming_source_3_valid),
      .reset_n                                                           (pll_sys_clk_reset_n),
      .tse_mac3_transmit_ready_from_sa                                   (tse_mac3_transmit_ready_from_sa)
    );

  ethernet_port_interface_0 the_ethernet_port_interface_0
    (
      .clk                       (pll_sys_clk),
      .control_port_address      (ethernet_port_interface_0_control_port_address),
      .control_port_read         (ethernet_port_interface_0_control_port_read),
      .control_port_readdata     (ethernet_port_interface_0_control_port_readdata),
      .control_port_waitrequest  (ethernet_port_interface_0_control_port_waitrequest),
      .control_port_write        (ethernet_port_interface_0_control_port_write),
      .control_port_writedata    (ethernet_port_interface_0_control_port_writedata),
      .interrupt_request         (ethernet_port_interface_0_avalon_slave_irq),
      .protocol                  (protocol_to_the_ethernet_port_interface_0),
      .reset                     (ethernet_port_interface_0_control_port_reset),
      .rxm_address_bar_0_1       (ethernet_port_interface_0_avalon_slave_address),
      .rxm_address_bar_1         (ethernet_port_interface_0_avalon_slave_1_address),
      .rxm_address_bar_1_out     (ethernet_port_interface_0_avalon_master_1_address),
      .rxm_read_bar_0_1          (ethernet_port_interface_0_avalon_slave_read),
      .rxm_read_bar_1            (ethernet_port_interface_0_avalon_slave_1_read),
      .rxm_read_bar_1_out        (ethernet_port_interface_0_avalon_master_1_read),
      .rxm_read_valid_bar_0_1    (ethernet_port_interface_0_avalon_slave_readdatavalid),
      .rxm_read_valid_bar_1      (ethernet_port_interface_0_avalon_slave_1_readdatavalid),
      .rxm_read_valid_bar_1_in   (ethernet_port_interface_0_avalon_master_1_readdatavalid),
      .rxm_readdata_bar_0_1      (ethernet_port_interface_0_avalon_slave_readdata),
      .rxm_readdata_bar_1        (ethernet_port_interface_0_avalon_slave_1_readdata),
      .rxm_readdata_bar_1_in     (ethernet_port_interface_0_avalon_master_1_readdata),
      .rxm_wait_request_bar_0_1  (ethernet_port_interface_0_avalon_slave_waitrequest),
      .rxm_wait_request_bar_1    (ethernet_port_interface_0_avalon_slave_1_waitrequest),
      .rxm_wait_request_bar_1_in (ethernet_port_interface_0_avalon_master_1_waitrequest),
      .rxm_write_bar_0_1         (ethernet_port_interface_0_avalon_slave_write),
      .rxm_write_bar_1           (ethernet_port_interface_0_avalon_slave_1_write),
      .rxm_write_bar_1_out       (ethernet_port_interface_0_avalon_master_1_write),
      .rxm_writedata_bar_0_1     (ethernet_port_interface_0_avalon_slave_writedata),
      .rxm_writedata_bar_1       (ethernet_port_interface_0_avalon_slave_1_writedata),
      .rxm_writedata_bar_1_out   (ethernet_port_interface_0_avalon_master_1_writedata),
      .sink_data0                (ethernet_port_interface_0_avalon_streaming_sink_data),
      .sink_data1                (ethernet_port_interface_0_avalon_streaming_sink_1_data),
      .sink_data2                (ethernet_port_interface_0_avalon_streaming_sink_2_data),
      .sink_data3                (ethernet_port_interface_0_avalon_streaming_sink_3_data),
      .sink_endofpacket0         (ethernet_port_interface_0_avalon_streaming_sink_endofpacket),
      .sink_endofpacket1         (ethernet_port_interface_0_avalon_streaming_sink_1_endofpacket),
      .sink_endofpacket2         (ethernet_port_interface_0_avalon_streaming_sink_2_endofpacket),
      .sink_endofpacket3         (ethernet_port_interface_0_avalon_streaming_sink_3_endofpacket),
      .sink_error0               (ethernet_port_interface_0_avalon_streaming_sink_error),
      .sink_error1               (ethernet_port_interface_0_avalon_streaming_sink_1_error),
      .sink_error2               (ethernet_port_interface_0_avalon_streaming_sink_2_error),
      .sink_error3               (ethernet_port_interface_0_avalon_streaming_sink_3_error),
      .sink_ready0               (ethernet_port_interface_0_avalon_streaming_sink_ready),
      .sink_ready1               (ethernet_port_interface_0_avalon_streaming_sink_1_ready),
      .sink_ready2               (ethernet_port_interface_0_avalon_streaming_sink_2_ready),
      .sink_ready3               (ethernet_port_interface_0_avalon_streaming_sink_3_ready),
      .sink_startofpacket0       (ethernet_port_interface_0_avalon_streaming_sink_startofpacket),
      .sink_startofpacket1       (ethernet_port_interface_0_avalon_streaming_sink_1_startofpacket),
      .sink_startofpacket2       (ethernet_port_interface_0_avalon_streaming_sink_2_startofpacket),
      .sink_startofpacket3       (ethernet_port_interface_0_avalon_streaming_sink_3_startofpacket),
      .sink_valid0               (ethernet_port_interface_0_avalon_streaming_sink_valid),
      .sink_valid1               (ethernet_port_interface_0_avalon_streaming_sink_1_valid),
      .sink_valid2               (ethernet_port_interface_0_avalon_streaming_sink_2_valid),
      .sink_valid3               (ethernet_port_interface_0_avalon_streaming_sink_3_valid),
      .source_data0              (ethernet_port_interface_0_avalon_streaming_source_data),
      .source_data1              (ethernet_port_interface_0_avalon_streaming_source_1_data),
      .source_data2              (ethernet_port_interface_0_avalon_streaming_source_2_data),
      .source_data3              (ethernet_port_interface_0_avalon_streaming_source_3_data),
      .source_endofpacket0       (ethernet_port_interface_0_avalon_streaming_source_endofpacket),
      .source_endofpacket1       (ethernet_port_interface_0_avalon_streaming_source_1_endofpacket),
      .source_endofpacket2       (ethernet_port_interface_0_avalon_streaming_source_2_endofpacket),
      .source_endofpacket3       (ethernet_port_interface_0_avalon_streaming_source_3_endofpacket),
      .source_error0             (ethernet_port_interface_0_avalon_streaming_source_error),
      .source_error1             (ethernet_port_interface_0_avalon_streaming_source_1_error),
      .source_error2             (ethernet_port_interface_0_avalon_streaming_source_2_error),
      .source_error3             (ethernet_port_interface_0_avalon_streaming_source_3_error),
      .source_ready0             (ethernet_port_interface_0_avalon_streaming_source_ready),
      .source_ready1             (ethernet_port_interface_0_avalon_streaming_source_1_ready),
      .source_ready2             (ethernet_port_interface_0_avalon_streaming_source_2_ready),
      .source_ready3             (ethernet_port_interface_0_avalon_streaming_source_3_ready),
      .source_startofpacket0     (ethernet_port_interface_0_avalon_streaming_source_startofpacket),
      .source_startofpacket1     (ethernet_port_interface_0_avalon_streaming_source_1_startofpacket),
      .source_startofpacket2     (ethernet_port_interface_0_avalon_streaming_source_2_startofpacket),
      .source_startofpacket3     (ethernet_port_interface_0_avalon_streaming_source_3_startofpacket),
      .source_valid0             (ethernet_port_interface_0_avalon_streaming_source_valid),
      .source_valid1             (ethernet_port_interface_0_avalon_streaming_source_1_valid),
      .source_valid2             (ethernet_port_interface_0_avalon_streaming_source_2_valid),
      .source_valid3             (ethernet_port_interface_0_avalon_streaming_source_3_valid),
      .txs_address               (ethernet_port_interface_0_avalon_master_address),
      .txs_burst_count           (ethernet_port_interface_0_avalon_master_burstcount),
      .txs_byteenable            (ethernet_port_interface_0_avalon_master_byteenable),
      .txs_chip_select           (ethernet_port_interface_0_avalon_master_chipselect),
      .txs_read                  (ethernet_port_interface_0_avalon_master_read),
      .txs_read_valid            (ethernet_port_interface_0_avalon_master_readdatavalid),
      .txs_readdata              (ethernet_port_interface_0_avalon_master_readdata),
      .txs_wait_request          (ethernet_port_interface_0_avalon_master_waitrequest),
      .txs_write                 (ethernet_port_interface_0_avalon_master_write),
      .txs_writedata             (ethernet_port_interface_0_avalon_master_writedata),
      .user_sw                   (user_sw_to_the_ethernet_port_interface_0)
    );

  high_res_timer_s1_arbitrator the_high_res_timer_s1
    (
      .clk                                                                  (pll_sys_clk),
      .d1_high_res_timer_s1_end_xfer                                        (d1_high_res_timer_s1_end_xfer),
      .high_res_timer_s1_address                                            (high_res_timer_s1_address),
      .high_res_timer_s1_chipselect                                         (high_res_timer_s1_chipselect),
      .high_res_timer_s1_readdata                                           (high_res_timer_s1_readdata),
      .high_res_timer_s1_readdata_from_sa                                   (high_res_timer_s1_readdata_from_sa),
      .high_res_timer_s1_reset_n                                            (high_res_timer_s1_reset_n),
      .high_res_timer_s1_write_n                                            (high_res_timer_s1_write_n),
      .high_res_timer_s1_writedata                                          (high_res_timer_s1_writedata),
      .master_0_granted_high_res_timer_s1                                   (master_0_granted_high_res_timer_s1),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_high_res_timer_s1                         (master_0_qualified_request_high_res_timer_s1),
      .master_0_read_data_valid_high_res_timer_s1                           (master_0_read_data_valid_high_res_timer_s1),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_requests_high_res_timer_s1                                  (master_0_requests_high_res_timer_s1),
      .reset_n                                                              (pll_sys_clk_reset_n)
    );

  high_res_timer the_high_res_timer
    (
      .address    (high_res_timer_s1_address),
      .chipselect (high_res_timer_s1_chipselect),
      .clk        (pll_sys_clk),
      .irq        (high_res_timer_s1_irq),
      .readdata   (high_res_timer_s1_readdata),
      .reset_n    (high_res_timer_s1_reset_n),
      .write_n    (high_res_timer_s1_write_n),
      .writedata  (high_res_timer_s1_writedata)
    );

  jtag_uart_avalon_jtag_slave_arbitrator the_jtag_uart_avalon_jtag_slave
    (
      .clk                                                                  (pll_sys_clk),
      .d1_jtag_uart_avalon_jtag_slave_end_xfer                              (d1_jtag_uart_avalon_jtag_slave_end_xfer),
      .jtag_uart_avalon_jtag_slave_address                                  (jtag_uart_avalon_jtag_slave_address),
      .jtag_uart_avalon_jtag_slave_chipselect                               (jtag_uart_avalon_jtag_slave_chipselect),
      .jtag_uart_avalon_jtag_slave_dataavailable                            (jtag_uart_avalon_jtag_slave_dataavailable),
      .jtag_uart_avalon_jtag_slave_dataavailable_from_sa                    (jtag_uart_avalon_jtag_slave_dataavailable_from_sa),
      .jtag_uart_avalon_jtag_slave_read_n                                   (jtag_uart_avalon_jtag_slave_read_n),
      .jtag_uart_avalon_jtag_slave_readdata                                 (jtag_uart_avalon_jtag_slave_readdata),
      .jtag_uart_avalon_jtag_slave_readdata_from_sa                         (jtag_uart_avalon_jtag_slave_readdata_from_sa),
      .jtag_uart_avalon_jtag_slave_readyfordata                             (jtag_uart_avalon_jtag_slave_readyfordata),
      .jtag_uart_avalon_jtag_slave_readyfordata_from_sa                     (jtag_uart_avalon_jtag_slave_readyfordata_from_sa),
      .jtag_uart_avalon_jtag_slave_reset_n                                  (jtag_uart_avalon_jtag_slave_reset_n),
      .jtag_uart_avalon_jtag_slave_waitrequest                              (jtag_uart_avalon_jtag_slave_waitrequest),
      .jtag_uart_avalon_jtag_slave_waitrequest_from_sa                      (jtag_uart_avalon_jtag_slave_waitrequest_from_sa),
      .jtag_uart_avalon_jtag_slave_write_n                                  (jtag_uart_avalon_jtag_slave_write_n),
      .jtag_uart_avalon_jtag_slave_writedata                                (jtag_uart_avalon_jtag_slave_writedata),
      .master_0_granted_jtag_uart_avalon_jtag_slave                         (master_0_granted_jtag_uart_avalon_jtag_slave),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_jtag_uart_avalon_jtag_slave               (master_0_qualified_request_jtag_uart_avalon_jtag_slave),
      .master_0_read_data_valid_jtag_uart_avalon_jtag_slave                 (master_0_read_data_valid_jtag_uart_avalon_jtag_slave),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_requests_jtag_uart_avalon_jtag_slave                        (master_0_requests_jtag_uart_avalon_jtag_slave),
      .reset_n                                                              (pll_sys_clk_reset_n)
    );

  jtag_uart the_jtag_uart
    (
      .av_address     (jtag_uart_avalon_jtag_slave_address),
      .av_chipselect  (jtag_uart_avalon_jtag_slave_chipselect),
      .av_irq         (jtag_uart_avalon_jtag_slave_irq),
      .av_read_n      (jtag_uart_avalon_jtag_slave_read_n),
      .av_readdata    (jtag_uart_avalon_jtag_slave_readdata),
      .av_waitrequest (jtag_uart_avalon_jtag_slave_waitrequest),
      .av_write_n     (jtag_uart_avalon_jtag_slave_write_n),
      .av_writedata   (jtag_uart_avalon_jtag_slave_writedata),
      .clk            (pll_sys_clk),
      .dataavailable  (jtag_uart_avalon_jtag_slave_dataavailable),
      .readyfordata   (jtag_uart_avalon_jtag_slave_readyfordata),
      .rst_n          (jtag_uart_avalon_jtag_slave_reset_n)
    );

  led_pio_s1_arbitrator the_led_pio_s1
    (
      .clk                                                       (pll_c1_out),
      .d1_led_pio_s1_end_xfer                                    (d1_led_pio_s1_end_xfer),
      .led_pio_s1_address                                        (led_pio_s1_address),
      .led_pio_s1_chipselect                                     (led_pio_s1_chipselect),
      .led_pio_s1_readdata                                       (led_pio_s1_readdata),
      .led_pio_s1_readdata_from_sa                               (led_pio_s1_readdata_from_sa),
      .led_pio_s1_reset_n                                        (led_pio_s1_reset_n),
      .led_pio_s1_write_n                                        (led_pio_s1_write_n),
      .led_pio_s1_writedata                                      (led_pio_s1_writedata),
      .peripheral_clock_crossing_m1_address_to_slave             (peripheral_clock_crossing_m1_address_to_slave),
      .peripheral_clock_crossing_m1_granted_led_pio_s1           (peripheral_clock_crossing_m1_granted_led_pio_s1),
      .peripheral_clock_crossing_m1_latency_counter              (peripheral_clock_crossing_m1_latency_counter),
      .peripheral_clock_crossing_m1_nativeaddress                (peripheral_clock_crossing_m1_nativeaddress),
      .peripheral_clock_crossing_m1_qualified_request_led_pio_s1 (peripheral_clock_crossing_m1_qualified_request_led_pio_s1),
      .peripheral_clock_crossing_m1_read                         (peripheral_clock_crossing_m1_read),
      .peripheral_clock_crossing_m1_read_data_valid_led_pio_s1   (peripheral_clock_crossing_m1_read_data_valid_led_pio_s1),
      .peripheral_clock_crossing_m1_requests_led_pio_s1          (peripheral_clock_crossing_m1_requests_led_pio_s1),
      .peripheral_clock_crossing_m1_write                        (peripheral_clock_crossing_m1_write),
      .peripheral_clock_crossing_m1_writedata                    (peripheral_clock_crossing_m1_writedata),
      .reset_n                                                   (pll_c1_out_reset_n)
    );

  led_pio the_led_pio
    (
      .address    (led_pio_s1_address),
      .chipselect (led_pio_s1_chipselect),
      .clk        (pll_c1_out),
      .out_port   (out_port_from_the_led_pio),
      .readdata   (led_pio_s1_readdata),
      .reset_n    (led_pio_s1_reset_n),
      .write_n    (led_pio_s1_write_n),
      .writedata  (led_pio_s1_writedata)
    );

  master_0_master_arbitrator the_master_0_master
    (
      .DE4_SOPC_clock_0_in_readdata_from_sa                                 (DE4_SOPC_clock_0_in_readdata_from_sa),
      .DE4_SOPC_clock_0_in_waitrequest_from_sa                              (DE4_SOPC_clock_0_in_waitrequest_from_sa),
      .clk                                                                  (pll_sys_clk),
      .d1_DE4_SOPC_clock_0_in_end_xfer                                      (d1_DE4_SOPC_clock_0_in_end_xfer),
      .d1_ethernet_port_interface_0_control_port_end_xfer                   (d1_ethernet_port_interface_0_control_port_end_xfer),
      .d1_high_res_timer_s1_end_xfer                                        (d1_high_res_timer_s1_end_xfer),
      .d1_jtag_uart_avalon_jtag_slave_end_xfer                              (d1_jtag_uart_avalon_jtag_slave_end_xfer),
      .d1_peripheral_clock_crossing_s1_end_xfer                             (d1_peripheral_clock_crossing_s1_end_xfer),
      .d1_sys_timer_s1_end_xfer                                             (d1_sys_timer_s1_end_xfer),
      .d1_sysid_control_slave_end_xfer                                      (d1_sysid_control_slave_end_xfer),
      .d1_tse_mac1_control_port_end_xfer                                    (d1_tse_mac1_control_port_end_xfer),
      .d1_tse_mac2_control_port_end_xfer                                    (d1_tse_mac2_control_port_end_xfer),
      .d1_tse_mac3_control_port_end_xfer                                    (d1_tse_mac3_control_port_end_xfer),
      .d1_tse_mac_control_port_end_xfer                                     (d1_tse_mac_control_port_end_xfer),
      .ethernet_port_interface_0_control_port_readdata_from_sa              (ethernet_port_interface_0_control_port_readdata_from_sa),
      .ethernet_port_interface_0_control_port_waitrequest_from_sa           (ethernet_port_interface_0_control_port_waitrequest_from_sa),
      .high_res_timer_s1_readdata_from_sa                                   (high_res_timer_s1_readdata_from_sa),
      .jtag_uart_avalon_jtag_slave_readdata_from_sa                         (jtag_uart_avalon_jtag_slave_readdata_from_sa),
      .jtag_uart_avalon_jtag_slave_waitrequest_from_sa                      (jtag_uart_avalon_jtag_slave_waitrequest_from_sa),
      .master_0_granted_DE4_SOPC_clock_0_in                                 (master_0_granted_DE4_SOPC_clock_0_in),
      .master_0_granted_ethernet_port_interface_0_control_port              (master_0_granted_ethernet_port_interface_0_control_port),
      .master_0_granted_high_res_timer_s1                                   (master_0_granted_high_res_timer_s1),
      .master_0_granted_jtag_uart_avalon_jtag_slave                         (master_0_granted_jtag_uart_avalon_jtag_slave),
      .master_0_granted_peripheral_clock_crossing_s1                        (master_0_granted_peripheral_clock_crossing_s1),
      .master_0_granted_sys_timer_s1                                        (master_0_granted_sys_timer_s1),
      .master_0_granted_sysid_control_slave                                 (master_0_granted_sysid_control_slave),
      .master_0_granted_tse_mac1_control_port                               (master_0_granted_tse_mac1_control_port),
      .master_0_granted_tse_mac2_control_port                               (master_0_granted_tse_mac2_control_port),
      .master_0_granted_tse_mac3_control_port                               (master_0_granted_tse_mac3_control_port),
      .master_0_granted_tse_mac_control_port                                (master_0_granted_tse_mac_control_port),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address                                              (master_0_master_address),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_byteenable                                           (master_0_master_byteenable),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_readdata                                             (master_0_master_readdata),
      .master_0_master_readdatavalid                                        (master_0_master_readdatavalid),
      .master_0_master_reset                                                (master_0_master_reset),
      .master_0_master_waitrequest                                          (master_0_master_waitrequest),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_DE4_SOPC_clock_0_in                       (master_0_qualified_request_DE4_SOPC_clock_0_in),
      .master_0_qualified_request_ethernet_port_interface_0_control_port    (master_0_qualified_request_ethernet_port_interface_0_control_port),
      .master_0_qualified_request_high_res_timer_s1                         (master_0_qualified_request_high_res_timer_s1),
      .master_0_qualified_request_jtag_uart_avalon_jtag_slave               (master_0_qualified_request_jtag_uart_avalon_jtag_slave),
      .master_0_qualified_request_peripheral_clock_crossing_s1              (master_0_qualified_request_peripheral_clock_crossing_s1),
      .master_0_qualified_request_sys_timer_s1                              (master_0_qualified_request_sys_timer_s1),
      .master_0_qualified_request_sysid_control_slave                       (master_0_qualified_request_sysid_control_slave),
      .master_0_qualified_request_tse_mac1_control_port                     (master_0_qualified_request_tse_mac1_control_port),
      .master_0_qualified_request_tse_mac2_control_port                     (master_0_qualified_request_tse_mac2_control_port),
      .master_0_qualified_request_tse_mac3_control_port                     (master_0_qualified_request_tse_mac3_control_port),
      .master_0_qualified_request_tse_mac_control_port                      (master_0_qualified_request_tse_mac_control_port),
      .master_0_read_data_valid_DE4_SOPC_clock_0_in                         (master_0_read_data_valid_DE4_SOPC_clock_0_in),
      .master_0_read_data_valid_ethernet_port_interface_0_control_port      (master_0_read_data_valid_ethernet_port_interface_0_control_port),
      .master_0_read_data_valid_high_res_timer_s1                           (master_0_read_data_valid_high_res_timer_s1),
      .master_0_read_data_valid_jtag_uart_avalon_jtag_slave                 (master_0_read_data_valid_jtag_uart_avalon_jtag_slave),
      .master_0_read_data_valid_peripheral_clock_crossing_s1                (master_0_read_data_valid_peripheral_clock_crossing_s1),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_sys_timer_s1                                (master_0_read_data_valid_sys_timer_s1),
      .master_0_read_data_valid_sysid_control_slave                         (master_0_read_data_valid_sysid_control_slave),
      .master_0_read_data_valid_tse_mac1_control_port                       (master_0_read_data_valid_tse_mac1_control_port),
      .master_0_read_data_valid_tse_mac2_control_port                       (master_0_read_data_valid_tse_mac2_control_port),
      .master_0_read_data_valid_tse_mac3_control_port                       (master_0_read_data_valid_tse_mac3_control_port),
      .master_0_read_data_valid_tse_mac_control_port                        (master_0_read_data_valid_tse_mac_control_port),
      .master_0_requests_DE4_SOPC_clock_0_in                                (master_0_requests_DE4_SOPC_clock_0_in),
      .master_0_requests_ethernet_port_interface_0_control_port             (master_0_requests_ethernet_port_interface_0_control_port),
      .master_0_requests_high_res_timer_s1                                  (master_0_requests_high_res_timer_s1),
      .master_0_requests_jtag_uart_avalon_jtag_slave                        (master_0_requests_jtag_uart_avalon_jtag_slave),
      .master_0_requests_peripheral_clock_crossing_s1                       (master_0_requests_peripheral_clock_crossing_s1),
      .master_0_requests_sys_timer_s1                                       (master_0_requests_sys_timer_s1),
      .master_0_requests_sysid_control_slave                                (master_0_requests_sysid_control_slave),
      .master_0_requests_tse_mac1_control_port                              (master_0_requests_tse_mac1_control_port),
      .master_0_requests_tse_mac2_control_port                              (master_0_requests_tse_mac2_control_port),
      .master_0_requests_tse_mac3_control_port                              (master_0_requests_tse_mac3_control_port),
      .master_0_requests_tse_mac_control_port                               (master_0_requests_tse_mac_control_port),
      .peripheral_clock_crossing_s1_readdata_from_sa                        (peripheral_clock_crossing_s1_readdata_from_sa),
      .peripheral_clock_crossing_s1_waitrequest_from_sa                     (peripheral_clock_crossing_s1_waitrequest_from_sa),
      .reset_n                                                              (pll_sys_clk_reset_n),
      .sys_timer_s1_readdata_from_sa                                        (sys_timer_s1_readdata_from_sa),
      .sysid_control_slave_readdata_from_sa                                 (sysid_control_slave_readdata_from_sa),
      .tse_mac1_control_port_readdata_from_sa                               (tse_mac1_control_port_readdata_from_sa),
      .tse_mac1_control_port_waitrequest_from_sa                            (tse_mac1_control_port_waitrequest_from_sa),
      .tse_mac2_control_port_readdata_from_sa                               (tse_mac2_control_port_readdata_from_sa),
      .tse_mac2_control_port_waitrequest_from_sa                            (tse_mac2_control_port_waitrequest_from_sa),
      .tse_mac3_control_port_readdata_from_sa                               (tse_mac3_control_port_readdata_from_sa),
      .tse_mac3_control_port_waitrequest_from_sa                            (tse_mac3_control_port_waitrequest_from_sa),
      .tse_mac_control_port_readdata_from_sa                                (tse_mac_control_port_readdata_from_sa),
      .tse_mac_control_port_waitrequest_from_sa                             (tse_mac_control_port_waitrequest_from_sa)
    );

  master_0 the_master_0
    (
      .clk_clk              (pll_sys_clk),
      .clk_reset_reset      (master_0_master_reset),
      .master_address       (master_0_master_address),
      .master_byteenable    (master_0_master_byteenable),
      .master_read          (master_0_master_read),
      .master_readdata      (master_0_master_readdata),
      .master_readdatavalid (master_0_master_readdatavalid),
      .master_reset_reset   (master_0_master_resetrequest),
      .master_waitrequest   (master_0_master_waitrequest),
      .master_write         (master_0_master_write),
      .master_writedata     (master_0_master_writedata)
    );

  pb_pio_s1_arbitrator the_pb_pio_s1
    (
      .clk                                                      (pll_c1_out),
      .d1_pb_pio_s1_end_xfer                                    (d1_pb_pio_s1_end_xfer),
      .pb_pio_s1_address                                        (pb_pio_s1_address),
      .pb_pio_s1_readdata                                       (pb_pio_s1_readdata),
      .pb_pio_s1_readdata_from_sa                               (pb_pio_s1_readdata_from_sa),
      .pb_pio_s1_reset_n                                        (pb_pio_s1_reset_n),
      .peripheral_clock_crossing_m1_address_to_slave            (peripheral_clock_crossing_m1_address_to_slave),
      .peripheral_clock_crossing_m1_granted_pb_pio_s1           (peripheral_clock_crossing_m1_granted_pb_pio_s1),
      .peripheral_clock_crossing_m1_latency_counter             (peripheral_clock_crossing_m1_latency_counter),
      .peripheral_clock_crossing_m1_nativeaddress               (peripheral_clock_crossing_m1_nativeaddress),
      .peripheral_clock_crossing_m1_qualified_request_pb_pio_s1 (peripheral_clock_crossing_m1_qualified_request_pb_pio_s1),
      .peripheral_clock_crossing_m1_read                        (peripheral_clock_crossing_m1_read),
      .peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1   (peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1),
      .peripheral_clock_crossing_m1_requests_pb_pio_s1          (peripheral_clock_crossing_m1_requests_pb_pio_s1),
      .peripheral_clock_crossing_m1_write                       (peripheral_clock_crossing_m1_write),
      .reset_n                                                  (pll_c1_out_reset_n)
    );

  pb_pio the_pb_pio
    (
      .address  (pb_pio_s1_address),
      .clk      (pll_c1_out),
      .in_port  (in_port_to_the_pb_pio),
      .readdata (pb_pio_s1_readdata),
      .reset_n  (pb_pio_s1_reset_n)
    );

  pcie_compiler_0_Control_Register_Access_arbitrator the_pcie_compiler_0_Control_Register_Access
    (
      .DE4_SOPC_burst_3_downstream_address_to_slave                                          (DE4_SOPC_burst_3_downstream_address_to_slave),
      .DE4_SOPC_burst_3_downstream_arbitrationshare                                          (DE4_SOPC_burst_3_downstream_arbitrationshare),
      .DE4_SOPC_burst_3_downstream_burstcount                                                (DE4_SOPC_burst_3_downstream_burstcount),
      .DE4_SOPC_burst_3_downstream_byteenable                                                (DE4_SOPC_burst_3_downstream_byteenable),
      .DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access           (DE4_SOPC_burst_3_downstream_granted_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_latency_counter                                           (DE4_SOPC_burst_3_downstream_latency_counter),
      .DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access (DE4_SOPC_burst_3_downstream_qualified_request_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_read                                                      (DE4_SOPC_burst_3_downstream_read),
      .DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access   (DE4_SOPC_burst_3_downstream_read_data_valid_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access          (DE4_SOPC_burst_3_downstream_requests_pcie_compiler_0_Control_Register_Access),
      .DE4_SOPC_burst_3_downstream_write                                                     (DE4_SOPC_burst_3_downstream_write),
      .DE4_SOPC_burst_3_downstream_writedata                                                 (DE4_SOPC_burst_3_downstream_writedata),
      .clk                                                                                   (pll_sys_clk),
      .d1_pcie_compiler_0_Control_Register_Access_end_xfer                                   (d1_pcie_compiler_0_Control_Register_Access_end_xfer),
      .pcie_compiler_0_Control_Register_Access_address                                       (pcie_compiler_0_Control_Register_Access_address),
      .pcie_compiler_0_Control_Register_Access_byteenable                                    (pcie_compiler_0_Control_Register_Access_byteenable),
      .pcie_compiler_0_Control_Register_Access_chipselect                                    (pcie_compiler_0_Control_Register_Access_chipselect),
      .pcie_compiler_0_Control_Register_Access_read                                          (pcie_compiler_0_Control_Register_Access_read),
      .pcie_compiler_0_Control_Register_Access_readdata                                      (pcie_compiler_0_Control_Register_Access_readdata),
      .pcie_compiler_0_Control_Register_Access_readdata_from_sa                              (pcie_compiler_0_Control_Register_Access_readdata_from_sa),
      .pcie_compiler_0_Control_Register_Access_waitrequest                                   (pcie_compiler_0_Control_Register_Access_waitrequest),
      .pcie_compiler_0_Control_Register_Access_waitrequest_from_sa                           (pcie_compiler_0_Control_Register_Access_waitrequest_from_sa),
      .pcie_compiler_0_Control_Register_Access_write                                         (pcie_compiler_0_Control_Register_Access_write),
      .pcie_compiler_0_Control_Register_Access_writedata                                     (pcie_compiler_0_Control_Register_Access_writedata),
      .reset_n                                                                               (pll_sys_clk_reset_n)
    );

  pcie_compiler_0_Tx_Interface_arbitrator the_pcie_compiler_0_Tx_Interface
    (
      .DE4_SOPC_burst_2_downstream_address_to_slave                                            (DE4_SOPC_burst_2_downstream_address_to_slave),
      .DE4_SOPC_burst_2_downstream_arbitrationshare                                            (DE4_SOPC_burst_2_downstream_arbitrationshare),
      .DE4_SOPC_burst_2_downstream_burstcount                                                  (DE4_SOPC_burst_2_downstream_burstcount),
      .DE4_SOPC_burst_2_downstream_byteenable                                                  (DE4_SOPC_burst_2_downstream_byteenable),
      .DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface                        (DE4_SOPC_burst_2_downstream_granted_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_latency_counter                                             (DE4_SOPC_burst_2_downstream_latency_counter),
      .DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface              (DE4_SOPC_burst_2_downstream_qualified_request_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_read                                                        (DE4_SOPC_burst_2_downstream_read),
      .DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface                (DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register (DE4_SOPC_burst_2_downstream_read_data_valid_pcie_compiler_0_Tx_Interface_shift_register),
      .DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface                       (DE4_SOPC_burst_2_downstream_requests_pcie_compiler_0_Tx_Interface),
      .DE4_SOPC_burst_2_downstream_write                                                       (DE4_SOPC_burst_2_downstream_write),
      .DE4_SOPC_burst_2_downstream_writedata                                                   (DE4_SOPC_burst_2_downstream_writedata),
      .clk                                                                                     (pll_sys_clk),
      .d1_pcie_compiler_0_Tx_Interface_end_xfer                                                (d1_pcie_compiler_0_Tx_Interface_end_xfer),
      .pcie_compiler_0_Tx_Interface_address                                                    (pcie_compiler_0_Tx_Interface_address),
      .pcie_compiler_0_Tx_Interface_burstcount                                                 (pcie_compiler_0_Tx_Interface_burstcount),
      .pcie_compiler_0_Tx_Interface_byteenable                                                 (pcie_compiler_0_Tx_Interface_byteenable),
      .pcie_compiler_0_Tx_Interface_chipselect                                                 (pcie_compiler_0_Tx_Interface_chipselect),
      .pcie_compiler_0_Tx_Interface_read                                                       (pcie_compiler_0_Tx_Interface_read),
      .pcie_compiler_0_Tx_Interface_readdata                                                   (pcie_compiler_0_Tx_Interface_readdata),
      .pcie_compiler_0_Tx_Interface_readdata_from_sa                                           (pcie_compiler_0_Tx_Interface_readdata_from_sa),
      .pcie_compiler_0_Tx_Interface_readdatavalid                                              (pcie_compiler_0_Tx_Interface_readdatavalid),
      .pcie_compiler_0_Tx_Interface_waitrequest                                                (pcie_compiler_0_Tx_Interface_waitrequest),
      .pcie_compiler_0_Tx_Interface_waitrequest_from_sa                                        (pcie_compiler_0_Tx_Interface_waitrequest_from_sa),
      .pcie_compiler_0_Tx_Interface_write                                                      (pcie_compiler_0_Tx_Interface_write),
      .pcie_compiler_0_Tx_Interface_writedata                                                  (pcie_compiler_0_Tx_Interface_writedata),
      .reset_n                                                                                 (pll_sys_clk_reset_n)
    );

  pcie_compiler_0_Rx_Interface_arbitrator the_pcie_compiler_0_Rx_Interface
    (
      .DE4_SOPC_burst_0_upstream_readdata_from_sa                                            (DE4_SOPC_burst_0_upstream_readdata_from_sa),
      .DE4_SOPC_burst_0_upstream_waitrequest_from_sa                                         (DE4_SOPC_burst_0_upstream_waitrequest_from_sa),
      .DE4_SOPC_burst_1_upstream_readdata_from_sa                                            (DE4_SOPC_burst_1_upstream_readdata_from_sa),
      .DE4_SOPC_burst_1_upstream_waitrequest_from_sa                                         (DE4_SOPC_burst_1_upstream_waitrequest_from_sa),
      .DE4_SOPC_burst_3_upstream_readdata_from_sa                                            (DE4_SOPC_burst_3_upstream_readdata_from_sa),
      .DE4_SOPC_burst_3_upstream_waitrequest_from_sa                                         (DE4_SOPC_burst_3_upstream_waitrequest_from_sa),
      .clk                                                                                   (pll_sys_clk),
      .d1_DE4_SOPC_burst_0_upstream_end_xfer                                                 (d1_DE4_SOPC_burst_0_upstream_end_xfer),
      .d1_DE4_SOPC_burst_1_upstream_end_xfer                                                 (d1_DE4_SOPC_burst_1_upstream_end_xfer),
      .d1_DE4_SOPC_burst_3_upstream_end_xfer                                                 (d1_DE4_SOPC_burst_3_upstream_end_xfer),
      .pcie_compiler_0_Rx_Interface_address                                                  (pcie_compiler_0_Rx_Interface_address),
      .pcie_compiler_0_Rx_Interface_address_to_slave                                         (pcie_compiler_0_Rx_Interface_address_to_slave),
      .pcie_compiler_0_Rx_Interface_burstcount                                               (pcie_compiler_0_Rx_Interface_burstcount),
      .pcie_compiler_0_Rx_Interface_byteenable                                               (pcie_compiler_0_Rx_Interface_byteenable),
      .pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream                     (pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream                     (pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream                     (pcie_compiler_0_Rx_Interface_byteenable_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_dbs_address                                              (pcie_compiler_0_Rx_Interface_dbs_address),
      .pcie_compiler_0_Rx_Interface_dbs_write_32                                             (pcie_compiler_0_Rx_Interface_dbs_write_32),
      .pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream                        (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream                        (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream                        (pcie_compiler_0_Rx_Interface_granted_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_latency_counter                                          (pcie_compiler_0_Rx_Interface_latency_counter),
      .pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream              (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream              (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream              (pcie_compiler_0_Rx_Interface_qualified_request_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_read                                                     (pcie_compiler_0_Rx_Interface_read),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream                (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream                (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_1_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream                (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register (pcie_compiler_0_Rx_Interface_read_data_valid_DE4_SOPC_burst_3_upstream_shift_register),
      .pcie_compiler_0_Rx_Interface_readdata                                                 (pcie_compiler_0_Rx_Interface_readdata),
      .pcie_compiler_0_Rx_Interface_readdatavalid                                            (pcie_compiler_0_Rx_Interface_readdatavalid),
      .pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream                       (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_0_upstream),
      .pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream                       (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_1_upstream),
      .pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream                       (pcie_compiler_0_Rx_Interface_requests_DE4_SOPC_burst_3_upstream),
      .pcie_compiler_0_Rx_Interface_reset_n                                                  (pcie_compiler_0_Rx_Interface_reset_n),
      .pcie_compiler_0_Rx_Interface_waitrequest                                              (pcie_compiler_0_Rx_Interface_waitrequest),
      .pcie_compiler_0_Rx_Interface_write                                                    (pcie_compiler_0_Rx_Interface_write),
      .pcie_compiler_0_Rx_Interface_writedata                                                (pcie_compiler_0_Rx_Interface_writedata),
      .reset_n                                                                               (pll_sys_clk_reset_n)
    );

  pcie_compiler_0 the_pcie_compiler_0
    (
      .AvlClk_i             (pll_sys_clk),
      .CraAddress_i         (pcie_compiler_0_Control_Register_Access_address),
      .CraByteEnable_i      (pcie_compiler_0_Control_Register_Access_byteenable),
      .CraChipSelect_i      (pcie_compiler_0_Control_Register_Access_chipselect),
      .CraIrq_o             (pcie_compiler_0_Control_Register_Access_irq),
      .CraRead              (pcie_compiler_0_Control_Register_Access_read),
      .CraReadData_o        (pcie_compiler_0_Control_Register_Access_readdata),
      .CraWaitRequest_o     (pcie_compiler_0_Control_Register_Access_waitrequest),
      .CraWrite             (pcie_compiler_0_Control_Register_Access_write),
      .CraWriteData_i       (pcie_compiler_0_Control_Register_Access_writedata),
      .RxmAddress_o         (pcie_compiler_0_Rx_Interface_address),
      .RxmBurstCount_o      (pcie_compiler_0_Rx_Interface_burstcount),
      .RxmByteEnable_o      (pcie_compiler_0_Rx_Interface_byteenable),
      .RxmIrqNum_i          (pcie_compiler_0_Rx_Interface_irqnumber),
      .RxmIrq_i             (pcie_compiler_0_Rx_Interface_irq),
      .RxmReadDataValid_i   (pcie_compiler_0_Rx_Interface_readdatavalid),
      .RxmReadData_i        (pcie_compiler_0_Rx_Interface_readdata),
      .RxmRead_o            (pcie_compiler_0_Rx_Interface_read),
      .RxmResetRequest_o    (pcie_compiler_0_Rx_Interface_resetrequest),
      .RxmWaitRequest_i     (pcie_compiler_0_Rx_Interface_waitrequest),
      .RxmWriteData_o       (pcie_compiler_0_Rx_Interface_writedata),
      .RxmWrite_o           (pcie_compiler_0_Rx_Interface_write),
      .TxsAddress_i         (pcie_compiler_0_Tx_Interface_address),
      .TxsBurstCount_i      (pcie_compiler_0_Tx_Interface_burstcount),
      .TxsByteEnable_i      (pcie_compiler_0_Tx_Interface_byteenable),
      .TxsChipSelect_i      (pcie_compiler_0_Tx_Interface_chipselect),
      .TxsReadDataValid_o   (pcie_compiler_0_Tx_Interface_readdatavalid),
      .TxsReadData_o        (pcie_compiler_0_Tx_Interface_readdata),
      .TxsRead_i            (pcie_compiler_0_Tx_Interface_read),
      .TxsWaitRequest_o     (pcie_compiler_0_Tx_Interface_waitrequest),
      .TxsWriteData_i       (pcie_compiler_0_Tx_Interface_writedata),
      .TxsWrite_i           (pcie_compiler_0_Tx_Interface_write),
      .busy_altgxb_reconfig (busy_altgxb_reconfig_pcie_compiler_0),
      .cal_blk_clk          (cal_blk_clk_0),
      .clk125_out           (clk125_out_pcie_compiler_0),
      .clk250_out           (clk250_out_pcie_compiler_0),
      .clk500_out           (clk500_out_pcie_compiler_0),
      .fixedclk_serdes      (fixedclk_serdes_pcie_compiler_0),
      .gxb_powerdown        (gxb_powerdown_pcie_compiler_0),
      .pcie_rstn            (pcie_rstn_pcie_compiler_0),
      .phystatus_ext        (phystatus_ext_pcie_compiler_0),
      .pipe_mode            (pipe_mode_pcie_compiler_0),
      .pll_powerdown        (pll_powerdown_pcie_compiler_0),
      .powerdown_ext        (powerdown_ext_pcie_compiler_0),
      .rate_ext             (rate_ext_pcie_compiler_0),
      .reconfig_clk         (reconfig_clk_pcie_compiler_0),
      .reconfig_fromgxb     (reconfig_fromgxb_pcie_compiler_0),
      .reconfig_togxb       (reconfig_togxb_pcie_compiler_0),
      .refclk               (refclk_pcie_compiler_0),
      .reset_n              (pcie_compiler_0_Rx_Interface_reset_n),
      .rx_in0               (rx_in0_pcie_compiler_0),
      .rxdata0_ext          (rxdata0_ext_pcie_compiler_0),
      .rxdatak0_ext         (rxdatak0_ext_pcie_compiler_0),
      .rxelecidle0_ext      (rxelecidle0_ext_pcie_compiler_0),
      .rxpolarity0_ext      (rxpolarity0_ext_pcie_compiler_0),
      .rxstatus0_ext        (rxstatus0_ext_pcie_compiler_0),
      .rxvalid0_ext         (rxvalid0_ext_pcie_compiler_0),
      .test_in              (test_in_pcie_compiler_0),
      .test_out             (test_out_pcie_compiler_0),
      .tx_out0              (tx_out0_pcie_compiler_0),
      .txcompl0_ext         (txcompl0_ext_pcie_compiler_0),
      .txdata0_ext          (txdata0_ext_pcie_compiler_0),
      .txdatak0_ext         (txdatak0_ext_pcie_compiler_0),
      .txdetectrx_ext       (txdetectrx_ext_pcie_compiler_0),
      .txelecidle0_ext      (txelecidle0_ext_pcie_compiler_0)
    );

  peripheral_clock_crossing_s1_arbitrator the_peripheral_clock_crossing_s1
    (
      .clk                                                                  (pll_sys_clk),
      .d1_peripheral_clock_crossing_s1_end_xfer                             (d1_peripheral_clock_crossing_s1_end_xfer),
      .master_0_granted_peripheral_clock_crossing_s1                        (master_0_granted_peripheral_clock_crossing_s1),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_byteenable                                           (master_0_master_byteenable),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_peripheral_clock_crossing_s1              (master_0_qualified_request_peripheral_clock_crossing_s1),
      .master_0_read_data_valid_peripheral_clock_crossing_s1                (master_0_read_data_valid_peripheral_clock_crossing_s1),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_requests_peripheral_clock_crossing_s1                       (master_0_requests_peripheral_clock_crossing_s1),
      .peripheral_clock_crossing_s1_address                                 (peripheral_clock_crossing_s1_address),
      .peripheral_clock_crossing_s1_byteenable                              (peripheral_clock_crossing_s1_byteenable),
      .peripheral_clock_crossing_s1_endofpacket                             (peripheral_clock_crossing_s1_endofpacket),
      .peripheral_clock_crossing_s1_endofpacket_from_sa                     (peripheral_clock_crossing_s1_endofpacket_from_sa),
      .peripheral_clock_crossing_s1_nativeaddress                           (peripheral_clock_crossing_s1_nativeaddress),
      .peripheral_clock_crossing_s1_read                                    (peripheral_clock_crossing_s1_read),
      .peripheral_clock_crossing_s1_readdata                                (peripheral_clock_crossing_s1_readdata),
      .peripheral_clock_crossing_s1_readdata_from_sa                        (peripheral_clock_crossing_s1_readdata_from_sa),
      .peripheral_clock_crossing_s1_readdatavalid                           (peripheral_clock_crossing_s1_readdatavalid),
      .peripheral_clock_crossing_s1_reset_n                                 (peripheral_clock_crossing_s1_reset_n),
      .peripheral_clock_crossing_s1_waitrequest                             (peripheral_clock_crossing_s1_waitrequest),
      .peripheral_clock_crossing_s1_waitrequest_from_sa                     (peripheral_clock_crossing_s1_waitrequest_from_sa),
      .peripheral_clock_crossing_s1_write                                   (peripheral_clock_crossing_s1_write),
      .peripheral_clock_crossing_s1_writedata                               (peripheral_clock_crossing_s1_writedata),
      .reset_n                                                              (pll_sys_clk_reset_n)
    );

  peripheral_clock_crossing_m1_arbitrator the_peripheral_clock_crossing_m1
    (
      .clk                                                             (pll_c1_out),
      .d1_led_pio_s1_end_xfer                                          (d1_led_pio_s1_end_xfer),
      .d1_pb_pio_s1_end_xfer                                           (d1_pb_pio_s1_end_xfer),
      .d1_seven_seg_pio_s1_end_xfer                                    (d1_seven_seg_pio_s1_end_xfer),
      .d1_sw_pio_s1_end_xfer                                           (d1_sw_pio_s1_end_xfer),
      .led_pio_s1_readdata_from_sa                                     (led_pio_s1_readdata_from_sa),
      .pb_pio_s1_readdata_from_sa                                      (pb_pio_s1_readdata_from_sa),
      .peripheral_clock_crossing_m1_address                            (peripheral_clock_crossing_m1_address),
      .peripheral_clock_crossing_m1_address_to_slave                   (peripheral_clock_crossing_m1_address_to_slave),
      .peripheral_clock_crossing_m1_byteenable                         (peripheral_clock_crossing_m1_byteenable),
      .peripheral_clock_crossing_m1_granted_led_pio_s1                 (peripheral_clock_crossing_m1_granted_led_pio_s1),
      .peripheral_clock_crossing_m1_granted_pb_pio_s1                  (peripheral_clock_crossing_m1_granted_pb_pio_s1),
      .peripheral_clock_crossing_m1_granted_seven_seg_pio_s1           (peripheral_clock_crossing_m1_granted_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_granted_sw_pio_s1                  (peripheral_clock_crossing_m1_granted_sw_pio_s1),
      .peripheral_clock_crossing_m1_latency_counter                    (peripheral_clock_crossing_m1_latency_counter),
      .peripheral_clock_crossing_m1_qualified_request_led_pio_s1       (peripheral_clock_crossing_m1_qualified_request_led_pio_s1),
      .peripheral_clock_crossing_m1_qualified_request_pb_pio_s1        (peripheral_clock_crossing_m1_qualified_request_pb_pio_s1),
      .peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 (peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_qualified_request_sw_pio_s1        (peripheral_clock_crossing_m1_qualified_request_sw_pio_s1),
      .peripheral_clock_crossing_m1_read                               (peripheral_clock_crossing_m1_read),
      .peripheral_clock_crossing_m1_read_data_valid_led_pio_s1         (peripheral_clock_crossing_m1_read_data_valid_led_pio_s1),
      .peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1          (peripheral_clock_crossing_m1_read_data_valid_pb_pio_s1),
      .peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1   (peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1          (peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1),
      .peripheral_clock_crossing_m1_readdata                           (peripheral_clock_crossing_m1_readdata),
      .peripheral_clock_crossing_m1_readdatavalid                      (peripheral_clock_crossing_m1_readdatavalid),
      .peripheral_clock_crossing_m1_requests_led_pio_s1                (peripheral_clock_crossing_m1_requests_led_pio_s1),
      .peripheral_clock_crossing_m1_requests_pb_pio_s1                 (peripheral_clock_crossing_m1_requests_pb_pio_s1),
      .peripheral_clock_crossing_m1_requests_seven_seg_pio_s1          (peripheral_clock_crossing_m1_requests_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_requests_sw_pio_s1                 (peripheral_clock_crossing_m1_requests_sw_pio_s1),
      .peripheral_clock_crossing_m1_reset_n                            (peripheral_clock_crossing_m1_reset_n),
      .peripheral_clock_crossing_m1_waitrequest                        (peripheral_clock_crossing_m1_waitrequest),
      .peripheral_clock_crossing_m1_write                              (peripheral_clock_crossing_m1_write),
      .peripheral_clock_crossing_m1_writedata                          (peripheral_clock_crossing_m1_writedata),
      .reset_n                                                         (pll_c1_out_reset_n),
      .seven_seg_pio_s1_readdata_from_sa                               (seven_seg_pio_s1_readdata_from_sa),
      .sw_pio_s1_readdata_from_sa                                      (sw_pio_s1_readdata_from_sa)
    );

  peripheral_clock_crossing the_peripheral_clock_crossing
    (
      .master_address       (peripheral_clock_crossing_m1_address),
      .master_byteenable    (peripheral_clock_crossing_m1_byteenable),
      .master_clk           (pll_c1_out),
      .master_endofpacket   (peripheral_clock_crossing_m1_endofpacket),
      .master_nativeaddress (peripheral_clock_crossing_m1_nativeaddress),
      .master_read          (peripheral_clock_crossing_m1_read),
      .master_readdata      (peripheral_clock_crossing_m1_readdata),
      .master_readdatavalid (peripheral_clock_crossing_m1_readdatavalid),
      .master_reset_n       (peripheral_clock_crossing_m1_reset_n),
      .master_waitrequest   (peripheral_clock_crossing_m1_waitrequest),
      .master_write         (peripheral_clock_crossing_m1_write),
      .master_writedata     (peripheral_clock_crossing_m1_writedata),
      .slave_address        (peripheral_clock_crossing_s1_address),
      .slave_byteenable     (peripheral_clock_crossing_s1_byteenable),
      .slave_clk            (pll_sys_clk),
      .slave_endofpacket    (peripheral_clock_crossing_s1_endofpacket),
      .slave_nativeaddress  (peripheral_clock_crossing_s1_nativeaddress),
      .slave_read           (peripheral_clock_crossing_s1_read),
      .slave_readdata       (peripheral_clock_crossing_s1_readdata),
      .slave_readdatavalid  (peripheral_clock_crossing_s1_readdatavalid),
      .slave_reset_n        (peripheral_clock_crossing_s1_reset_n),
      .slave_waitrequest    (peripheral_clock_crossing_s1_waitrequest),
      .slave_write          (peripheral_clock_crossing_s1_write),
      .slave_writedata      (peripheral_clock_crossing_s1_writedata)
    );

  pll_s1_arbitrator the_pll_s1
    (
      .DE4_SOPC_clock_0_out_address_to_slave         (DE4_SOPC_clock_0_out_address_to_slave),
      .DE4_SOPC_clock_0_out_granted_pll_s1           (DE4_SOPC_clock_0_out_granted_pll_s1),
      .DE4_SOPC_clock_0_out_nativeaddress            (DE4_SOPC_clock_0_out_nativeaddress),
      .DE4_SOPC_clock_0_out_qualified_request_pll_s1 (DE4_SOPC_clock_0_out_qualified_request_pll_s1),
      .DE4_SOPC_clock_0_out_read                     (DE4_SOPC_clock_0_out_read),
      .DE4_SOPC_clock_0_out_read_data_valid_pll_s1   (DE4_SOPC_clock_0_out_read_data_valid_pll_s1),
      .DE4_SOPC_clock_0_out_requests_pll_s1          (DE4_SOPC_clock_0_out_requests_pll_s1),
      .DE4_SOPC_clock_0_out_write                    (DE4_SOPC_clock_0_out_write),
      .DE4_SOPC_clock_0_out_writedata                (DE4_SOPC_clock_0_out_writedata),
      .clk                                           (ext_clk),
      .d1_pll_s1_end_xfer                            (d1_pll_s1_end_xfer),
      .pll_s1_address                                (pll_s1_address),
      .pll_s1_chipselect                             (pll_s1_chipselect),
      .pll_s1_read                                   (pll_s1_read),
      .pll_s1_readdata                               (pll_s1_readdata),
      .pll_s1_readdata_from_sa                       (pll_s1_readdata_from_sa),
      .pll_s1_reset_n                                (pll_s1_reset_n),
      .pll_s1_resetrequest                           (pll_s1_resetrequest),
      .pll_s1_resetrequest_from_sa                   (pll_s1_resetrequest_from_sa),
      .pll_s1_write                                  (pll_s1_write),
      .pll_s1_writedata                              (pll_s1_writedata),
      .reset_n                                       (ext_clk_reset_n)
    );

  //pll_sys_clk out_clk assignment, which is an e_assign
  assign pll_sys_clk = out_clk_pll_c0;

  //pll_c1_out out_clk assignment, which is an e_assign
  assign pll_c1_out = out_clk_pll_c1;

  pll the_pll
    (
      .address      (pll_s1_address),
      .c0           (out_clk_pll_c0),
      .c1           (out_clk_pll_c1),
      .chipselect   (pll_s1_chipselect),
      .clk          (ext_clk),
      .read         (pll_s1_read),
      .readdata     (pll_s1_readdata),
      .reset_n      (pll_s1_reset_n),
      .resetrequest (pll_s1_resetrequest),
      .write        (pll_s1_write),
      .writedata    (pll_s1_writedata)
    );

  seven_seg_pio_s1_arbitrator the_seven_seg_pio_s1
    (
      .clk                                                             (pll_c1_out),
      .d1_seven_seg_pio_s1_end_xfer                                    (d1_seven_seg_pio_s1_end_xfer),
      .peripheral_clock_crossing_m1_address_to_slave                   (peripheral_clock_crossing_m1_address_to_slave),
      .peripheral_clock_crossing_m1_granted_seven_seg_pio_s1           (peripheral_clock_crossing_m1_granted_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_latency_counter                    (peripheral_clock_crossing_m1_latency_counter),
      .peripheral_clock_crossing_m1_nativeaddress                      (peripheral_clock_crossing_m1_nativeaddress),
      .peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1 (peripheral_clock_crossing_m1_qualified_request_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_read                               (peripheral_clock_crossing_m1_read),
      .peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1   (peripheral_clock_crossing_m1_read_data_valid_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_requests_seven_seg_pio_s1          (peripheral_clock_crossing_m1_requests_seven_seg_pio_s1),
      .peripheral_clock_crossing_m1_write                              (peripheral_clock_crossing_m1_write),
      .peripheral_clock_crossing_m1_writedata                          (peripheral_clock_crossing_m1_writedata),
      .reset_n                                                         (pll_c1_out_reset_n),
      .seven_seg_pio_s1_address                                        (seven_seg_pio_s1_address),
      .seven_seg_pio_s1_chipselect                                     (seven_seg_pio_s1_chipselect),
      .seven_seg_pio_s1_readdata                                       (seven_seg_pio_s1_readdata),
      .seven_seg_pio_s1_readdata_from_sa                               (seven_seg_pio_s1_readdata_from_sa),
      .seven_seg_pio_s1_reset_n                                        (seven_seg_pio_s1_reset_n),
      .seven_seg_pio_s1_write_n                                        (seven_seg_pio_s1_write_n),
      .seven_seg_pio_s1_writedata                                      (seven_seg_pio_s1_writedata)
    );

  seven_seg_pio the_seven_seg_pio
    (
      .address    (seven_seg_pio_s1_address),
      .chipselect (seven_seg_pio_s1_chipselect),
      .clk        (pll_c1_out),
      .out_port   (out_port_from_the_seven_seg_pio),
      .readdata   (seven_seg_pio_s1_readdata),
      .reset_n    (seven_seg_pio_s1_reset_n),
      .write_n    (seven_seg_pio_s1_write_n),
      .writedata  (seven_seg_pio_s1_writedata)
    );

  sw_pio_s1_arbitrator the_sw_pio_s1
    (
      .clk                                                      (pll_c1_out),
      .d1_sw_pio_s1_end_xfer                                    (d1_sw_pio_s1_end_xfer),
      .peripheral_clock_crossing_m1_address_to_slave            (peripheral_clock_crossing_m1_address_to_slave),
      .peripheral_clock_crossing_m1_granted_sw_pio_s1           (peripheral_clock_crossing_m1_granted_sw_pio_s1),
      .peripheral_clock_crossing_m1_latency_counter             (peripheral_clock_crossing_m1_latency_counter),
      .peripheral_clock_crossing_m1_nativeaddress               (peripheral_clock_crossing_m1_nativeaddress),
      .peripheral_clock_crossing_m1_qualified_request_sw_pio_s1 (peripheral_clock_crossing_m1_qualified_request_sw_pio_s1),
      .peripheral_clock_crossing_m1_read                        (peripheral_clock_crossing_m1_read),
      .peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1   (peripheral_clock_crossing_m1_read_data_valid_sw_pio_s1),
      .peripheral_clock_crossing_m1_requests_sw_pio_s1          (peripheral_clock_crossing_m1_requests_sw_pio_s1),
      .peripheral_clock_crossing_m1_write                       (peripheral_clock_crossing_m1_write),
      .reset_n                                                  (pll_c1_out_reset_n),
      .sw_pio_s1_address                                        (sw_pio_s1_address),
      .sw_pio_s1_readdata                                       (sw_pio_s1_readdata),
      .sw_pio_s1_readdata_from_sa                               (sw_pio_s1_readdata_from_sa),
      .sw_pio_s1_reset_n                                        (sw_pio_s1_reset_n)
    );

  sw_pio the_sw_pio
    (
      .address  (sw_pio_s1_address),
      .clk      (pll_c1_out),
      .in_port  (in_port_to_the_sw_pio),
      .readdata (sw_pio_s1_readdata),
      .reset_n  (sw_pio_s1_reset_n)
    );

  sys_timer_s1_arbitrator the_sys_timer_s1
    (
      .clk                                                                  (pll_sys_clk),
      .d1_sys_timer_s1_end_xfer                                             (d1_sys_timer_s1_end_xfer),
      .master_0_granted_sys_timer_s1                                        (master_0_granted_sys_timer_s1),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_master_writedata                                            (master_0_master_writedata),
      .master_0_qualified_request_sys_timer_s1                              (master_0_qualified_request_sys_timer_s1),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_sys_timer_s1                                (master_0_read_data_valid_sys_timer_s1),
      .master_0_requests_sys_timer_s1                                       (master_0_requests_sys_timer_s1),
      .reset_n                                                              (pll_sys_clk_reset_n),
      .sys_timer_s1_address                                                 (sys_timer_s1_address),
      .sys_timer_s1_chipselect                                              (sys_timer_s1_chipselect),
      .sys_timer_s1_readdata                                                (sys_timer_s1_readdata),
      .sys_timer_s1_readdata_from_sa                                        (sys_timer_s1_readdata_from_sa),
      .sys_timer_s1_reset_n                                                 (sys_timer_s1_reset_n),
      .sys_timer_s1_write_n                                                 (sys_timer_s1_write_n),
      .sys_timer_s1_writedata                                               (sys_timer_s1_writedata)
    );

  sys_timer the_sys_timer
    (
      .address    (sys_timer_s1_address),
      .chipselect (sys_timer_s1_chipselect),
      .clk        (pll_sys_clk),
      .irq        (sys_timer_s1_irq),
      .readdata   (sys_timer_s1_readdata),
      .reset_n    (sys_timer_s1_reset_n),
      .write_n    (sys_timer_s1_write_n),
      .writedata  (sys_timer_s1_writedata)
    );

  sysid_control_slave_arbitrator the_sysid_control_slave
    (
      .clk                                                                  (pll_sys_clk),
      .d1_sysid_control_slave_end_xfer                                      (d1_sysid_control_slave_end_xfer),
      .master_0_granted_sysid_control_slave                                 (master_0_granted_sysid_control_slave),
      .master_0_latency_counter                                             (master_0_latency_counter),
      .master_0_master_address_to_slave                                     (master_0_master_address_to_slave),
      .master_0_master_read                                                 (master_0_master_read),
      .master_0_master_write                                                (master_0_master_write),
      .master_0_qualified_request_sysid_control_slave                       (master_0_qualified_request_sysid_control_slave),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_sysid_control_slave                         (master_0_read_data_valid_sysid_control_slave),
      .master_0_requests_sysid_control_slave                                (master_0_requests_sysid_control_slave),
      .reset_n                                                              (pll_sys_clk_reset_n),
      .sysid_control_slave_address                                          (sysid_control_slave_address),
      .sysid_control_slave_readdata                                         (sysid_control_slave_readdata),
      .sysid_control_slave_readdata_from_sa                                 (sysid_control_slave_readdata_from_sa),
      .sysid_control_slave_reset_n                                          (sysid_control_slave_reset_n)
    );

  sysid the_sysid
    (
      .address  (sysid_control_slave_address),
      .clock    (sysid_control_slave_clock),
      .readdata (sysid_control_slave_readdata),
      .reset_n  (sysid_control_slave_reset_n)
    );

  tse_mac_control_port_arbitrator the_tse_mac_control_port
    (
      .clk                                                                              (pll_sys_clk),
      .d1_tse_mac_control_port_end_xfer                                                 (d1_tse_mac_control_port_end_xfer),
      .ethernet_port_interface_0_avalon_master_1_address_to_slave                       (ethernet_port_interface_0_avalon_master_1_address_to_slave),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_latency_counter                        (ethernet_port_interface_0_avalon_master_1_latency_counter),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_read                                   (ethernet_port_interface_0_avalon_master_1_read),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac_control_port),
      .ethernet_port_interface_0_avalon_master_1_write                                  (ethernet_port_interface_0_avalon_master_1_write),
      .ethernet_port_interface_0_avalon_master_1_writedata                              (ethernet_port_interface_0_avalon_master_1_writedata),
      .master_0_granted_tse_mac_control_port                                            (master_0_granted_tse_mac_control_port),
      .master_0_latency_counter                                                         (master_0_latency_counter),
      .master_0_master_address_to_slave                                                 (master_0_master_address_to_slave),
      .master_0_master_read                                                             (master_0_master_read),
      .master_0_master_write                                                            (master_0_master_write),
      .master_0_master_writedata                                                        (master_0_master_writedata),
      .master_0_qualified_request_tse_mac_control_port                                  (master_0_qualified_request_tse_mac_control_port),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register             (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_tse_mac_control_port                                    (master_0_read_data_valid_tse_mac_control_port),
      .master_0_requests_tse_mac_control_port                                           (master_0_requests_tse_mac_control_port),
      .reset_n                                                                          (pll_sys_clk_reset_n),
      .tse_mac_control_port_address                                                     (tse_mac_control_port_address),
      .tse_mac_control_port_read                                                        (tse_mac_control_port_read),
      .tse_mac_control_port_readdata                                                    (tse_mac_control_port_readdata),
      .tse_mac_control_port_readdata_from_sa                                            (tse_mac_control_port_readdata_from_sa),
      .tse_mac_control_port_reset                                                       (tse_mac_control_port_reset),
      .tse_mac_control_port_waitrequest                                                 (tse_mac_control_port_waitrequest),
      .tse_mac_control_port_waitrequest_from_sa                                         (tse_mac_control_port_waitrequest_from_sa),
      .tse_mac_control_port_write                                                       (tse_mac_control_port_write),
      .tse_mac_control_port_writedata                                                   (tse_mac_control_port_writedata)
    );

  tse_mac_transmit_arbitrator the_tse_mac_transmit
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_data          (ethernet_port_interface_0_avalon_streaming_source_data),
      .ethernet_port_interface_0_avalon_streaming_source_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_error         (ethernet_port_interface_0_avalon_streaming_source_error),
      .ethernet_port_interface_0_avalon_streaming_source_startofpacket (ethernet_port_interface_0_avalon_streaming_source_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_valid         (ethernet_port_interface_0_avalon_streaming_source_valid),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac_transmit_data                                           (tse_mac_transmit_data),
      .tse_mac_transmit_endofpacket                                    (tse_mac_transmit_endofpacket),
      .tse_mac_transmit_error                                          (tse_mac_transmit_error),
      .tse_mac_transmit_ready                                          (tse_mac_transmit_ready),
      .tse_mac_transmit_ready_from_sa                                  (tse_mac_transmit_ready_from_sa),
      .tse_mac_transmit_startofpacket                                  (tse_mac_transmit_startofpacket),
      .tse_mac_transmit_valid                                          (tse_mac_transmit_valid)
    );

  tse_mac_receive_arbitrator the_tse_mac_receive
    (
      .clk                                                           (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_ready_from_sa),
      .reset_n                                                       (pll_sys_clk_reset_n),
      .tse_mac_receive_data                                          (tse_mac_receive_data),
      .tse_mac_receive_endofpacket                                   (tse_mac_receive_endofpacket),
      .tse_mac_receive_error                                         (tse_mac_receive_error),
      .tse_mac_receive_ready                                         (tse_mac_receive_ready),
      .tse_mac_receive_startofpacket                                 (tse_mac_receive_startofpacket),
      .tse_mac_receive_valid                                         (tse_mac_receive_valid)
    );

  tse_mac the_tse_mac
    (
      .address        (tse_mac_control_port_address),
      .clk            (pll_sys_clk),
      .ff_rx_clk      (pll_sys_clk),
      .ff_rx_data     (tse_mac_receive_data),
      .ff_rx_dval     (tse_mac_receive_valid),
      .ff_rx_eop      (tse_mac_receive_endofpacket),
      .ff_rx_rdy      (tse_mac_receive_ready),
      .ff_rx_sop      (tse_mac_receive_startofpacket),
      .ff_tx_clk      (pll_sys_clk),
      .ff_tx_data     (tse_mac_transmit_data),
      .ff_tx_eop      (tse_mac_transmit_endofpacket),
      .ff_tx_err      (tse_mac_transmit_error),
      .ff_tx_rdy      (tse_mac_transmit_ready),
      .ff_tx_sop      (tse_mac_transmit_startofpacket),
      .ff_tx_wren     (tse_mac_transmit_valid),
      .led_an         (led_an_from_the_tse_mac),
      .led_char_err   (led_char_err_from_the_tse_mac),
      .led_col        (led_col_from_the_tse_mac),
      .led_crs        (led_crs_from_the_tse_mac),
      .led_disp_err   (led_disp_err_from_the_tse_mac),
      .led_link       (led_link_from_the_tse_mac),
      .mdc            (mdc_from_the_tse_mac),
      .mdio_in        (mdio_in_to_the_tse_mac),
      .mdio_oen       (mdio_oen_from_the_tse_mac),
      .mdio_out       (mdio_out_from_the_tse_mac),
      .read           (tse_mac_control_port_read),
      .readdata       (tse_mac_control_port_readdata),
      .ref_clk        (ref_clk_to_the_tse_mac),
      .reset          (tse_mac_control_port_reset),
      .rx_err         (tse_mac_receive_error),
      .rx_recovclkout (rx_recovclkout_from_the_tse_mac),
      .rxp            (rxp_to_the_tse_mac),
      .txp            (txp_from_the_tse_mac),
      .waitrequest    (tse_mac_control_port_waitrequest),
      .write          (tse_mac_control_port_write),
      .writedata      (tse_mac_control_port_writedata)
    );

  tse_mac1_control_port_arbitrator the_tse_mac1_control_port
    (
      .clk                                                                               (pll_sys_clk),
      .d1_tse_mac1_control_port_end_xfer                                                 (d1_tse_mac1_control_port_end_xfer),
      .ethernet_port_interface_0_avalon_master_1_address_to_slave                        (ethernet_port_interface_0_avalon_master_1_address_to_slave),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_latency_counter                         (ethernet_port_interface_0_avalon_master_1_latency_counter),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_read                                    (ethernet_port_interface_0_avalon_master_1_read),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac1_control_port),
      .ethernet_port_interface_0_avalon_master_1_write                                   (ethernet_port_interface_0_avalon_master_1_write),
      .ethernet_port_interface_0_avalon_master_1_writedata                               (ethernet_port_interface_0_avalon_master_1_writedata),
      .master_0_granted_tse_mac1_control_port                                            (master_0_granted_tse_mac1_control_port),
      .master_0_latency_counter                                                          (master_0_latency_counter),
      .master_0_master_address_to_slave                                                  (master_0_master_address_to_slave),
      .master_0_master_read                                                              (master_0_master_read),
      .master_0_master_write                                                             (master_0_master_write),
      .master_0_master_writedata                                                         (master_0_master_writedata),
      .master_0_qualified_request_tse_mac1_control_port                                  (master_0_qualified_request_tse_mac1_control_port),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register              (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_tse_mac1_control_port                                    (master_0_read_data_valid_tse_mac1_control_port),
      .master_0_requests_tse_mac1_control_port                                           (master_0_requests_tse_mac1_control_port),
      .reset_n                                                                           (pll_sys_clk_reset_n),
      .tse_mac1_control_port_address                                                     (tse_mac1_control_port_address),
      .tse_mac1_control_port_read                                                        (tse_mac1_control_port_read),
      .tse_mac1_control_port_readdata                                                    (tse_mac1_control_port_readdata),
      .tse_mac1_control_port_readdata_from_sa                                            (tse_mac1_control_port_readdata_from_sa),
      .tse_mac1_control_port_reset                                                       (tse_mac1_control_port_reset),
      .tse_mac1_control_port_waitrequest                                                 (tse_mac1_control_port_waitrequest),
      .tse_mac1_control_port_waitrequest_from_sa                                         (tse_mac1_control_port_waitrequest_from_sa),
      .tse_mac1_control_port_write                                                       (tse_mac1_control_port_write),
      .tse_mac1_control_port_writedata                                                   (tse_mac1_control_port_writedata)
    );

  tse_mac1_transmit_arbitrator the_tse_mac1_transmit
    (
      .clk                                                               (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_1_data          (ethernet_port_interface_0_avalon_streaming_source_1_data),
      .ethernet_port_interface_0_avalon_streaming_source_1_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_1_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_1_error         (ethernet_port_interface_0_avalon_streaming_source_1_error),
      .ethernet_port_interface_0_avalon_streaming_source_1_startofpacket (ethernet_port_interface_0_avalon_streaming_source_1_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_1_valid         (ethernet_port_interface_0_avalon_streaming_source_1_valid),
      .reset_n                                                           (pll_sys_clk_reset_n),
      .tse_mac1_transmit_data                                            (tse_mac1_transmit_data),
      .tse_mac1_transmit_endofpacket                                     (tse_mac1_transmit_endofpacket),
      .tse_mac1_transmit_error                                           (tse_mac1_transmit_error),
      .tse_mac1_transmit_ready                                           (tse_mac1_transmit_ready),
      .tse_mac1_transmit_ready_from_sa                                   (tse_mac1_transmit_ready_from_sa),
      .tse_mac1_transmit_startofpacket                                   (tse_mac1_transmit_startofpacket),
      .tse_mac1_transmit_valid                                           (tse_mac1_transmit_valid)
    );

  tse_mac1_receive_arbitrator the_tse_mac1_receive
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_1_ready_from_sa),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac1_receive_data                                           (tse_mac1_receive_data),
      .tse_mac1_receive_endofpacket                                    (tse_mac1_receive_endofpacket),
      .tse_mac1_receive_error                                          (tse_mac1_receive_error),
      .tse_mac1_receive_ready                                          (tse_mac1_receive_ready),
      .tse_mac1_receive_startofpacket                                  (tse_mac1_receive_startofpacket),
      .tse_mac1_receive_valid                                          (tse_mac1_receive_valid)
    );

  tse_mac1 the_tse_mac1
    (
      .address        (tse_mac1_control_port_address),
      .clk            (pll_sys_clk),
      .ff_rx_clk      (pll_sys_clk),
      .ff_rx_data     (tse_mac1_receive_data),
      .ff_rx_dval     (tse_mac1_receive_valid),
      .ff_rx_eop      (tse_mac1_receive_endofpacket),
      .ff_rx_rdy      (tse_mac1_receive_ready),
      .ff_rx_sop      (tse_mac1_receive_startofpacket),
      .ff_tx_clk      (pll_sys_clk),
      .ff_tx_data     (tse_mac1_transmit_data),
      .ff_tx_eop      (tse_mac1_transmit_endofpacket),
      .ff_tx_err      (tse_mac1_transmit_error),
      .ff_tx_rdy      (tse_mac1_transmit_ready),
      .ff_tx_sop      (tse_mac1_transmit_startofpacket),
      .ff_tx_wren     (tse_mac1_transmit_valid),
      .led_an         (led_an_from_the_tse_mac1),
      .led_char_err   (led_char_err_from_the_tse_mac1),
      .led_col        (led_col_from_the_tse_mac1),
      .led_crs        (led_crs_from_the_tse_mac1),
      .led_disp_err   (led_disp_err_from_the_tse_mac1),
      .led_link       (led_link_from_the_tse_mac1),
      .mdc            (mdc_from_the_tse_mac1),
      .mdio_in        (mdio_in_to_the_tse_mac1),
      .mdio_oen       (mdio_oen_from_the_tse_mac1),
      .mdio_out       (mdio_out_from_the_tse_mac1),
      .read           (tse_mac1_control_port_read),
      .readdata       (tse_mac1_control_port_readdata),
      .ref_clk        (ref_clk_to_the_tse_mac1),
      .reset          (tse_mac1_control_port_reset),
      .rx_err         (tse_mac1_receive_error),
      .rx_recovclkout (rx_recovclkout_from_the_tse_mac1),
      .rxp            (rxp_to_the_tse_mac1),
      .txp            (txp_from_the_tse_mac1),
      .waitrequest    (tse_mac1_control_port_waitrequest),
      .write          (tse_mac1_control_port_write),
      .writedata      (tse_mac1_control_port_writedata)
    );

  tse_mac2_control_port_arbitrator the_tse_mac2_control_port
    (
      .clk                                                                               (pll_sys_clk),
      .d1_tse_mac2_control_port_end_xfer                                                 (d1_tse_mac2_control_port_end_xfer),
      .ethernet_port_interface_0_avalon_master_1_address_to_slave                        (ethernet_port_interface_0_avalon_master_1_address_to_slave),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_latency_counter                         (ethernet_port_interface_0_avalon_master_1_latency_counter),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_read                                    (ethernet_port_interface_0_avalon_master_1_read),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac2_control_port),
      .ethernet_port_interface_0_avalon_master_1_write                                   (ethernet_port_interface_0_avalon_master_1_write),
      .ethernet_port_interface_0_avalon_master_1_writedata                               (ethernet_port_interface_0_avalon_master_1_writedata),
      .master_0_granted_tse_mac2_control_port                                            (master_0_granted_tse_mac2_control_port),
      .master_0_latency_counter                                                          (master_0_latency_counter),
      .master_0_master_address_to_slave                                                  (master_0_master_address_to_slave),
      .master_0_master_read                                                              (master_0_master_read),
      .master_0_master_write                                                             (master_0_master_write),
      .master_0_master_writedata                                                         (master_0_master_writedata),
      .master_0_qualified_request_tse_mac2_control_port                                  (master_0_qualified_request_tse_mac2_control_port),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register              (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_tse_mac2_control_port                                    (master_0_read_data_valid_tse_mac2_control_port),
      .master_0_requests_tse_mac2_control_port                                           (master_0_requests_tse_mac2_control_port),
      .reset_n                                                                           (pll_sys_clk_reset_n),
      .tse_mac2_control_port_address                                                     (tse_mac2_control_port_address),
      .tse_mac2_control_port_read                                                        (tse_mac2_control_port_read),
      .tse_mac2_control_port_readdata                                                    (tse_mac2_control_port_readdata),
      .tse_mac2_control_port_readdata_from_sa                                            (tse_mac2_control_port_readdata_from_sa),
      .tse_mac2_control_port_reset                                                       (tse_mac2_control_port_reset),
      .tse_mac2_control_port_waitrequest                                                 (tse_mac2_control_port_waitrequest),
      .tse_mac2_control_port_waitrequest_from_sa                                         (tse_mac2_control_port_waitrequest_from_sa),
      .tse_mac2_control_port_write                                                       (tse_mac2_control_port_write),
      .tse_mac2_control_port_writedata                                                   (tse_mac2_control_port_writedata)
    );

  tse_mac2_transmit_arbitrator the_tse_mac2_transmit
    (
      .clk                                                               (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_2_data          (ethernet_port_interface_0_avalon_streaming_source_2_data),
      .ethernet_port_interface_0_avalon_streaming_source_2_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_2_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_2_error         (ethernet_port_interface_0_avalon_streaming_source_2_error),
      .ethernet_port_interface_0_avalon_streaming_source_2_startofpacket (ethernet_port_interface_0_avalon_streaming_source_2_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_2_valid         (ethernet_port_interface_0_avalon_streaming_source_2_valid),
      .reset_n                                                           (pll_sys_clk_reset_n),
      .tse_mac2_transmit_data                                            (tse_mac2_transmit_data),
      .tse_mac2_transmit_endofpacket                                     (tse_mac2_transmit_endofpacket),
      .tse_mac2_transmit_error                                           (tse_mac2_transmit_error),
      .tse_mac2_transmit_ready                                           (tse_mac2_transmit_ready),
      .tse_mac2_transmit_ready_from_sa                                   (tse_mac2_transmit_ready_from_sa),
      .tse_mac2_transmit_startofpacket                                   (tse_mac2_transmit_startofpacket),
      .tse_mac2_transmit_valid                                           (tse_mac2_transmit_valid)
    );

  tse_mac2_receive_arbitrator the_tse_mac2_receive
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_2_ready_from_sa),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac2_receive_data                                           (tse_mac2_receive_data),
      .tse_mac2_receive_endofpacket                                    (tse_mac2_receive_endofpacket),
      .tse_mac2_receive_error                                          (tse_mac2_receive_error),
      .tse_mac2_receive_ready                                          (tse_mac2_receive_ready),
      .tse_mac2_receive_startofpacket                                  (tse_mac2_receive_startofpacket),
      .tse_mac2_receive_valid                                          (tse_mac2_receive_valid)
    );

  tse_mac2 the_tse_mac2
    (
      .address        (tse_mac2_control_port_address),
      .clk            (pll_sys_clk),
      .ff_rx_clk      (pll_sys_clk),
      .ff_rx_data     (tse_mac2_receive_data),
      .ff_rx_dval     (tse_mac2_receive_valid),
      .ff_rx_eop      (tse_mac2_receive_endofpacket),
      .ff_rx_rdy      (tse_mac2_receive_ready),
      .ff_rx_sop      (tse_mac2_receive_startofpacket),
      .ff_tx_clk      (pll_sys_clk),
      .ff_tx_data     (tse_mac2_transmit_data),
      .ff_tx_eop      (tse_mac2_transmit_endofpacket),
      .ff_tx_err      (tse_mac2_transmit_error),
      .ff_tx_rdy      (tse_mac2_transmit_ready),
      .ff_tx_sop      (tse_mac2_transmit_startofpacket),
      .ff_tx_wren     (tse_mac2_transmit_valid),
      .led_an         (led_an_from_the_tse_mac2),
      .led_char_err   (led_char_err_from_the_tse_mac2),
      .led_col        (led_col_from_the_tse_mac2),
      .led_crs        (led_crs_from_the_tse_mac2),
      .led_disp_err   (led_disp_err_from_the_tse_mac2),
      .led_link       (led_link_from_the_tse_mac2),
      .mdc            (mdc_from_the_tse_mac2),
      .mdio_in        (mdio_in_to_the_tse_mac2),
      .mdio_oen       (mdio_oen_from_the_tse_mac2),
      .mdio_out       (mdio_out_from_the_tse_mac2),
      .read           (tse_mac2_control_port_read),
      .readdata       (tse_mac2_control_port_readdata),
      .ref_clk        (ref_clk_to_the_tse_mac2),
      .reset          (tse_mac2_control_port_reset),
      .rx_err         (tse_mac2_receive_error),
      .rx_recovclkout (rx_recovclkout_from_the_tse_mac2),
      .rxp            (rxp_to_the_tse_mac2),
      .txp            (txp_from_the_tse_mac2),
      .waitrequest    (tse_mac2_control_port_waitrequest),
      .write          (tse_mac2_control_port_write),
      .writedata      (tse_mac2_control_port_writedata)
    );

  tse_mac3_control_port_arbitrator the_tse_mac3_control_port
    (
      .clk                                                                               (pll_sys_clk),
      .d1_tse_mac3_control_port_end_xfer                                                 (d1_tse_mac3_control_port_end_xfer),
      .ethernet_port_interface_0_avalon_master_1_address_to_slave                        (ethernet_port_interface_0_avalon_master_1_address_to_slave),
      .ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port           (ethernet_port_interface_0_avalon_master_1_granted_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_latency_counter                         (ethernet_port_interface_0_avalon_master_1_latency_counter),
      .ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port (ethernet_port_interface_0_avalon_master_1_qualified_request_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_read                                    (ethernet_port_interface_0_avalon_master_1_read),
      .ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port   (ethernet_port_interface_0_avalon_master_1_read_data_valid_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port          (ethernet_port_interface_0_avalon_master_1_requests_tse_mac3_control_port),
      .ethernet_port_interface_0_avalon_master_1_write                                   (ethernet_port_interface_0_avalon_master_1_write),
      .ethernet_port_interface_0_avalon_master_1_writedata                               (ethernet_port_interface_0_avalon_master_1_writedata),
      .master_0_granted_tse_mac3_control_port                                            (master_0_granted_tse_mac3_control_port),
      .master_0_latency_counter                                                          (master_0_latency_counter),
      .master_0_master_address_to_slave                                                  (master_0_master_address_to_slave),
      .master_0_master_read                                                              (master_0_master_read),
      .master_0_master_write                                                             (master_0_master_write),
      .master_0_master_writedata                                                         (master_0_master_writedata),
      .master_0_qualified_request_tse_mac3_control_port                                  (master_0_qualified_request_tse_mac3_control_port),
      .master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register              (master_0_read_data_valid_peripheral_clock_crossing_s1_shift_register),
      .master_0_read_data_valid_tse_mac3_control_port                                    (master_0_read_data_valid_tse_mac3_control_port),
      .master_0_requests_tse_mac3_control_port                                           (master_0_requests_tse_mac3_control_port),
      .reset_n                                                                           (pll_sys_clk_reset_n),
      .tse_mac3_control_port_address                                                     (tse_mac3_control_port_address),
      .tse_mac3_control_port_read                                                        (tse_mac3_control_port_read),
      .tse_mac3_control_port_readdata                                                    (tse_mac3_control_port_readdata),
      .tse_mac3_control_port_readdata_from_sa                                            (tse_mac3_control_port_readdata_from_sa),
      .tse_mac3_control_port_reset                                                       (tse_mac3_control_port_reset),
      .tse_mac3_control_port_waitrequest                                                 (tse_mac3_control_port_waitrequest),
      .tse_mac3_control_port_waitrequest_from_sa                                         (tse_mac3_control_port_waitrequest_from_sa),
      .tse_mac3_control_port_write                                                       (tse_mac3_control_port_write),
      .tse_mac3_control_port_writedata                                                   (tse_mac3_control_port_writedata)
    );

  tse_mac3_transmit_arbitrator the_tse_mac3_transmit
    (
      .clk                                                               (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_source_3_data          (ethernet_port_interface_0_avalon_streaming_source_3_data),
      .ethernet_port_interface_0_avalon_streaming_source_3_endofpacket   (ethernet_port_interface_0_avalon_streaming_source_3_endofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_3_error         (ethernet_port_interface_0_avalon_streaming_source_3_error),
      .ethernet_port_interface_0_avalon_streaming_source_3_startofpacket (ethernet_port_interface_0_avalon_streaming_source_3_startofpacket),
      .ethernet_port_interface_0_avalon_streaming_source_3_valid         (ethernet_port_interface_0_avalon_streaming_source_3_valid),
      .reset_n                                                           (pll_sys_clk_reset_n),
      .tse_mac3_transmit_data                                            (tse_mac3_transmit_data),
      .tse_mac3_transmit_endofpacket                                     (tse_mac3_transmit_endofpacket),
      .tse_mac3_transmit_error                                           (tse_mac3_transmit_error),
      .tse_mac3_transmit_ready                                           (tse_mac3_transmit_ready),
      .tse_mac3_transmit_ready_from_sa                                   (tse_mac3_transmit_ready_from_sa),
      .tse_mac3_transmit_startofpacket                                   (tse_mac3_transmit_startofpacket),
      .tse_mac3_transmit_valid                                           (tse_mac3_transmit_valid)
    );

  tse_mac3_receive_arbitrator the_tse_mac3_receive
    (
      .clk                                                             (pll_sys_clk),
      .ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa (ethernet_port_interface_0_avalon_streaming_sink_3_ready_from_sa),
      .reset_n                                                         (pll_sys_clk_reset_n),
      .tse_mac3_receive_data                                           (tse_mac3_receive_data),
      .tse_mac3_receive_endofpacket                                    (tse_mac3_receive_endofpacket),
      .tse_mac3_receive_error                                          (tse_mac3_receive_error),
      .tse_mac3_receive_ready                                          (tse_mac3_receive_ready),
      .tse_mac3_receive_startofpacket                                  (tse_mac3_receive_startofpacket),
      .tse_mac3_receive_valid                                          (tse_mac3_receive_valid)
    );

  tse_mac3 the_tse_mac3
    (
      .address        (tse_mac3_control_port_address),
      .clk            (pll_sys_clk),
      .ff_rx_clk      (pll_sys_clk),
      .ff_rx_data     (tse_mac3_receive_data),
      .ff_rx_dval     (tse_mac3_receive_valid),
      .ff_rx_eop      (tse_mac3_receive_endofpacket),
      .ff_rx_rdy      (tse_mac3_receive_ready),
      .ff_rx_sop      (tse_mac3_receive_startofpacket),
      .ff_tx_clk      (pll_sys_clk),
      .ff_tx_data     (tse_mac3_transmit_data),
      .ff_tx_eop      (tse_mac3_transmit_endofpacket),
      .ff_tx_err      (tse_mac3_transmit_error),
      .ff_tx_rdy      (tse_mac3_transmit_ready),
      .ff_tx_sop      (tse_mac3_transmit_startofpacket),
      .ff_tx_wren     (tse_mac3_transmit_valid),
      .led_an         (led_an_from_the_tse_mac3),
      .led_char_err   (led_char_err_from_the_tse_mac3),
      .led_col        (led_col_from_the_tse_mac3),
      .led_crs        (led_crs_from_the_tse_mac3),
      .led_disp_err   (led_disp_err_from_the_tse_mac3),
      .led_link       (led_link_from_the_tse_mac3),
      .mdc            (mdc_from_the_tse_mac3),
      .mdio_in        (mdio_in_to_the_tse_mac3),
      .mdio_oen       (mdio_oen_from_the_tse_mac3),
      .mdio_out       (mdio_out_from_the_tse_mac3),
      .read           (tse_mac3_control_port_read),
      .readdata       (tse_mac3_control_port_readdata),
      .ref_clk        (ref_clk_to_the_tse_mac3),
      .reset          (tse_mac3_control_port_reset),
      .rx_err         (tse_mac3_receive_error),
      .rx_recovclkout (rx_recovclkout_from_the_tse_mac3),
      .rxp            (rxp_to_the_tse_mac3),
      .txp            (txp_from_the_tse_mac3),
      .waitrequest    (tse_mac3_control_port_waitrequest),
      .write          (tse_mac3_control_port_write),
      .writedata      (tse_mac3_control_port_writedata)
    );

  //reset is asserted asynchronously and deasserted synchronously
  DE4_SOPC_reset_pll_sys_clk_domain_synch_module DE4_SOPC_reset_pll_sys_clk_domain_synch
    (
      .clk      (pll_sys_clk),
      .data_in  (1'b1),
      .data_out (pll_sys_clk_reset_n),
      .reset_n  (reset_n_sources)
    );

  //reset sources mux, which is an e_mux
  assign reset_n_sources = ~(~reset_n |
    0 |
    pcie_compiler_0_Rx_Interface_resetrequest |
    pcie_compiler_0_Rx_Interface_resetrequest |
    pcie_compiler_0_Rx_Interface_resetrequest |
    master_0_master_resetrequest |
    pcie_compiler_0_Rx_Interface_resetrequest |
    pcie_compiler_0_Rx_Interface_resetrequest |
    master_0_master_resetrequest |
    master_0_master_resetrequest |
    master_0_master_resetrequest |
    0 |
    pcie_compiler_0_Rx_Interface_resetrequest |
    master_0_master_resetrequest |
    0 |
    pll_s1_resetrequest_from_sa |
    pll_s1_resetrequest_from_sa |
    master_0_master_resetrequest |
    master_0_master_resetrequest |
    master_0_master_resetrequest |
    master_0_master_resetrequest |
    master_0_master_resetrequest |
    master_0_master_resetrequest);

  //reset is asserted asynchronously and deasserted synchronously
  DE4_SOPC_reset_pll_c1_out_domain_synch_module DE4_SOPC_reset_pll_c1_out_domain_synch
    (
      .clk      (pll_c1_out),
      .data_in  (1'b1),
      .data_out (pll_c1_out_reset_n),
      .reset_n  (reset_n_sources)
    );

  //reset is asserted asynchronously and deasserted synchronously
  DE4_SOPC_reset_ext_clk_domain_synch_module DE4_SOPC_reset_ext_clk_domain_synch
    (
      .clk      (ext_clk),
      .data_in  (1'b1),
      .data_out (ext_clk_reset_n),
      .reset_n  (reset_n_sources)
    );

  //DE4_SOPC_clock_0_out_endofpacket of type endofpacket does not connect to anything so wire it to default (0)
  assign DE4_SOPC_clock_0_out_endofpacket = 0;

  //pcie_compiler_0_Rx_Interface_irq of type irq does not connect to anything so wire it to default (0)
  assign pcie_compiler_0_Rx_Interface_irq = 0;

  //pcie_compiler_0_Rx_Interface_irqnumber of type irqnumber does not connect to anything so wire it to default (0)
  assign pcie_compiler_0_Rx_Interface_irqnumber = 0;

  //peripheral_clock_crossing_m1_endofpacket of type endofpacket does not connect to anything so wire it to default (0)
  assign peripheral_clock_crossing_m1_endofpacket = 0;

  //sysid_control_slave_clock of type clock does not connect to anything so wire it to default (0)
  assign sysid_control_slave_clock = 0;


endmodule


//synthesis translate_off



// <ALTERA_NOTE> CODE INSERTED BETWEEN HERE

// AND HERE WILL BE PRESERVED </ALTERA_NOTE>


// If user logic components use Altsync_Ram with convert_hex2ver.dll,
// set USE_convert_hex2ver in the user comments section above

// `ifdef USE_convert_hex2ver
// `else
// `define NO_PLI 1
// `endif

`include "c:/altera/11.1/quartus/eda/sim_lib/altera_mf.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/220model.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/sgate.v"
`include "C:/altera/11.1/quartus/eda/sim_lib/stratixiigx_hssi_atoms.v"
`include "C:/altera/11.1/quartus/eda/sim_lib/stratixiv_hssi_atoms.v"
`include "tse_mac3.vo"
`include "tse_mac3_loopback.v"
`include "tse_mac1.vo"
`include "tse_mac1_loopback.v"
`include "pcie_compiler_0_core.vo"
`include "pcie_compiler_0.v"
`include "pcie_compiler_0_serdes.v"
`include "pcie_compiler_0_examples/sopc/testbench/altpcietb_bfm_driver.v"
`include "pcie_compiler_0_examples/sopc/testbench/pcie_compiler_0_testbench.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_rs_serdes.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_phasefifo.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_125_250.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_100_125.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_100_250.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_phy0.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_phy1_62p5.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_phy2.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_phy3_62p5.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_phy4_62p5.v"
`include "pcie_compiler_0_examples/common/testbench/altpcie_pll_phy5_62p5.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_bfm_log_common.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_bfm_req_intf_common.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_bfm_rp_top_x8_pipen1b.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_bfm_rpvar_64b_x8_gen1_pipen1b.vo"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_bfm_shmem_common.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_bfm_vc_intf.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_pipe_phy.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_rst_clk.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_ltssm_mon.v"
`include "pcie_compiler_0_examples/common/testbench/altpcietb_pipe_xtx2yrx.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/stratixgx_mf.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/arriaii_hssi_atoms.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/arriaii_pcie_hip_atoms.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/stratixiv_pcie_hip_atoms.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/hardcopyiv_pcie_hip_atoms.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/hardcopyiv_hssi_atoms.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/cycloneiv_pcie_hip_atoms.v"
`include "c:/altera/11.1/quartus/eda/sim_lib/cycloneiv_hssi_atoms.v"
`include "ethernet_port_interface.v"
`include "ethernet_port_interface_0.v"
`include "tse_mac2.vo"
`include "tse_mac2_loopback.v"
`include "tse_mac.vo"
`include "tse_mac_loopback.v"
`include "DE4_SOPC_burst_1.v"
`include "pll.v"
`include "altpllpll.v"
`include "sysid.v"
`include "high_res_timer.v"
`include "sys_timer.v"
`include "peripheral_clock_crossing.v"
`include "jtag_uart.v"
`include "led_pio.v"
`include "DE4_SOPC_burst_0.v"
`include "DE4_SOPC_clock_0.v"
`include "DE4_SOPC_burst_2.v"
`include "sw_pio.v"
`include "seven_seg_pio.v"
`include "DE4_SOPC_burst_3.v"
`include "pb_pio.v"

`timescale 1ns / 1ps

module test_bench 
;


  wire             DE4_SOPC_burst_0_downstream_debugaccess;
  wire    [ 28: 0] DE4_SOPC_burst_0_downstream_nativeaddress;
  wire             DE4_SOPC_burst_1_downstream_debugaccess;
  wire    [ 28: 0] DE4_SOPC_burst_1_downstream_nativeaddress;
  wire             DE4_SOPC_burst_2_downstream_debugaccess;
  wire    [ 24: 0] DE4_SOPC_burst_2_downstream_nativeaddress;
  wire             DE4_SOPC_burst_3_downstream_debugaccess;
  wire    [ 13: 0] DE4_SOPC_burst_3_downstream_nativeaddress;
  wire             DE4_SOPC_clock_0_in_endofpacket_from_sa;
  wire             DE4_SOPC_clock_0_out_endofpacket;
  wire             busy_altgxb_reconfig_pcie_compiler_0;
  reg              cal_blk_clk_0;
  wire             clk;
  wire             clk125_out_pcie_compiler_0;
  wire             clk250_out_pcie_compiler_0;
  wire             clk500_out_pcie_compiler_0;
  wire             ethernet_port_interface_0_avalon_slave_irq;
  reg              ext_clk;
  wire             fixedclk_serdes_pcie_compiler_0;
  wire             gxb_powerdown_pcie_compiler_0;
  wire             high_res_timer_s1_irq;
  wire    [  3: 0] in_port_to_the_pb_pio;
  wire    [  7: 0] in_port_to_the_sw_pio;
  wire             jtag_uart_avalon_jtag_slave_dataavailable_from_sa;
  wire             jtag_uart_avalon_jtag_slave_irq;
  wire             jtag_uart_avalon_jtag_slave_readyfordata_from_sa;
  wire             led_an_from_the_tse_mac;
  wire             led_an_from_the_tse_mac1;
  wire             led_an_from_the_tse_mac2;
  wire             led_an_from_the_tse_mac3;
  wire             led_char_err_from_the_tse_mac;
  wire             led_char_err_from_the_tse_mac1;
  wire             led_char_err_from_the_tse_mac2;
  wire             led_char_err_from_the_tse_mac3;
  wire             led_col_from_the_tse_mac;
  wire             led_col_from_the_tse_mac1;
  wire             led_col_from_the_tse_mac2;
  wire             led_col_from_the_tse_mac3;
  wire             led_crs_from_the_tse_mac;
  wire             led_crs_from_the_tse_mac1;
  wire             led_crs_from_the_tse_mac2;
  wire             led_crs_from_the_tse_mac3;
  wire             led_disp_err_from_the_tse_mac;
  wire             led_disp_err_from_the_tse_mac1;
  wire             led_disp_err_from_the_tse_mac2;
  wire             led_disp_err_from_the_tse_mac3;
  wire             led_link_from_the_tse_mac;
  wire             led_link_from_the_tse_mac1;
  wire             led_link_from_the_tse_mac2;
  wire             led_link_from_the_tse_mac3;
  wire             mdc_from_the_tse_mac;
  wire             mdc_from_the_tse_mac1;
  wire             mdc_from_the_tse_mac2;
  wire             mdc_from_the_tse_mac3;
  wire             mdio_in_to_the_tse_mac;
  wire             mdio_in_to_the_tse_mac1;
  wire             mdio_in_to_the_tse_mac2;
  wire             mdio_in_to_the_tse_mac3;
  wire             mdio_oen_from_the_tse_mac;
  wire             mdio_oen_from_the_tse_mac1;
  wire             mdio_oen_from_the_tse_mac2;
  wire             mdio_oen_from_the_tse_mac3;
  wire             mdio_out_from_the_tse_mac;
  wire             mdio_out_from_the_tse_mac1;
  wire             mdio_out_from_the_tse_mac2;
  wire             mdio_out_from_the_tse_mac3;
  wire    [  7: 0] out_port_from_the_led_pio;
  wire    [ 15: 0] out_port_from_the_seven_seg_pio;
  wire             pcie_compiler_0_Control_Register_Access_irq;
  wire             pcie_compiler_0_Rx_Interface_irq;
  wire    [  5: 0] pcie_compiler_0_Rx_Interface_irqnumber;
  wire             pcie_rstn_pcie_compiler_0;
  wire             peripheral_clock_crossing_m1_endofpacket;
  wire             peripheral_clock_crossing_s1_endofpacket_from_sa;
  wire             phystatus_ext_pcie_compiler_0;
  wire             pipe_mode_pcie_compiler_0;
  wire             pll_c1_out;
  wire             pll_powerdown_pcie_compiler_0;
  wire             pll_sys_clk;
  wire    [  1: 0] powerdown_ext_pcie_compiler_0;
  wire             protocol_to_the_ethernet_port_interface_0;
  wire             rate_ext_pcie_compiler_0;
  wire             reconfig_clk_pcie_compiler_0;
  wire    [ 16: 0] reconfig_fromgxb_pcie_compiler_0;
  wire    [  3: 0] reconfig_togxb_pcie_compiler_0;
  wire             ref_clk_to_the_tse_mac;
  wire             ref_clk_to_the_tse_mac1;
  wire             ref_clk_to_the_tse_mac2;
  wire             ref_clk_to_the_tse_mac3;
  wire             refclk_pcie_compiler_0;
  reg              reset_n;
  wire             rx_in0_pcie_compiler_0;
  wire             rx_recovclkout_from_the_tse_mac;
  wire             rx_recovclkout_from_the_tse_mac1;
  wire             rx_recovclkout_from_the_tse_mac2;
  wire             rx_recovclkout_from_the_tse_mac3;
  wire    [  7: 0] rxdata0_ext_pcie_compiler_0;
  wire             rxdatak0_ext_pcie_compiler_0;
  wire             rxelecidle0_ext_pcie_compiler_0;
  wire             rxp_to_the_tse_mac;
  wire             rxp_to_the_tse_mac1;
  wire             rxp_to_the_tse_mac2;
  wire             rxp_to_the_tse_mac3;
  wire             rxpolarity0_ext_pcie_compiler_0;
  wire    [  2: 0] rxstatus0_ext_pcie_compiler_0;
  wire             rxvalid0_ext_pcie_compiler_0;
  wire             sys_timer_s1_irq;
  wire             sysid_control_slave_clock;
  wire    [ 39: 0] test_in_pcie_compiler_0;
  wire    [  8: 0] test_out_pcie_compiler_0;
  wire             tx_out0_pcie_compiler_0;
  wire             txcompl0_ext_pcie_compiler_0;
  wire    [  7: 0] txdata0_ext_pcie_compiler_0;
  wire             txdatak0_ext_pcie_compiler_0;
  wire             txdetectrx_ext_pcie_compiler_0;
  wire             txelecidle0_ext_pcie_compiler_0;
  wire             txp_from_the_tse_mac;
  wire             txp_from_the_tse_mac1;
  wire             txp_from_the_tse_mac2;
  wire             txp_from_the_tse_mac3;
  wire             user_sw_to_the_ethernet_port_interface_0;


// <ALTERA_NOTE> CODE INSERTED BETWEEN HERE
//  add your signals and additional architecture here
// AND HERE WILL BE PRESERVED </ALTERA_NOTE>

  //Set us up the Dut
  DE4_SOPC DUT
    (
      .busy_altgxb_reconfig_pcie_compiler_0      (busy_altgxb_reconfig_pcie_compiler_0),
      .cal_blk_clk_0                             (cal_blk_clk_0),
      .clk125_out_pcie_compiler_0                (clk125_out_pcie_compiler_0),
      .clk250_out_pcie_compiler_0                (clk250_out_pcie_compiler_0),
      .clk500_out_pcie_compiler_0                (clk500_out_pcie_compiler_0),
      .ext_clk                                   (ext_clk),
      .fixedclk_serdes_pcie_compiler_0           (fixedclk_serdes_pcie_compiler_0),
      .gxb_powerdown_pcie_compiler_0             (gxb_powerdown_pcie_compiler_0),
      .in_port_to_the_pb_pio                     (in_port_to_the_pb_pio),
      .in_port_to_the_sw_pio                     (in_port_to_the_sw_pio),
      .led_an_from_the_tse_mac                   (led_an_from_the_tse_mac),
      .led_an_from_the_tse_mac1                  (led_an_from_the_tse_mac1),
      .led_an_from_the_tse_mac2                  (led_an_from_the_tse_mac2),
      .led_an_from_the_tse_mac3                  (led_an_from_the_tse_mac3),
      .led_char_err_from_the_tse_mac             (led_char_err_from_the_tse_mac),
      .led_char_err_from_the_tse_mac1            (led_char_err_from_the_tse_mac1),
      .led_char_err_from_the_tse_mac2            (led_char_err_from_the_tse_mac2),
      .led_char_err_from_the_tse_mac3            (led_char_err_from_the_tse_mac3),
      .led_col_from_the_tse_mac                  (led_col_from_the_tse_mac),
      .led_col_from_the_tse_mac1                 (led_col_from_the_tse_mac1),
      .led_col_from_the_tse_mac2                 (led_col_from_the_tse_mac2),
      .led_col_from_the_tse_mac3                 (led_col_from_the_tse_mac3),
      .led_crs_from_the_tse_mac                  (led_crs_from_the_tse_mac),
      .led_crs_from_the_tse_mac1                 (led_crs_from_the_tse_mac1),
      .led_crs_from_the_tse_mac2                 (led_crs_from_the_tse_mac2),
      .led_crs_from_the_tse_mac3                 (led_crs_from_the_tse_mac3),
      .led_disp_err_from_the_tse_mac             (led_disp_err_from_the_tse_mac),
      .led_disp_err_from_the_tse_mac1            (led_disp_err_from_the_tse_mac1),
      .led_disp_err_from_the_tse_mac2            (led_disp_err_from_the_tse_mac2),
      .led_disp_err_from_the_tse_mac3            (led_disp_err_from_the_tse_mac3),
      .led_link_from_the_tse_mac                 (led_link_from_the_tse_mac),
      .led_link_from_the_tse_mac1                (led_link_from_the_tse_mac1),
      .led_link_from_the_tse_mac2                (led_link_from_the_tse_mac2),
      .led_link_from_the_tse_mac3                (led_link_from_the_tse_mac3),
      .mdc_from_the_tse_mac                      (mdc_from_the_tse_mac),
      .mdc_from_the_tse_mac1                     (mdc_from_the_tse_mac1),
      .mdc_from_the_tse_mac2                     (mdc_from_the_tse_mac2),
      .mdc_from_the_tse_mac3                     (mdc_from_the_tse_mac3),
      .mdio_in_to_the_tse_mac                    (mdio_in_to_the_tse_mac),
      .mdio_in_to_the_tse_mac1                   (mdio_in_to_the_tse_mac1),
      .mdio_in_to_the_tse_mac2                   (mdio_in_to_the_tse_mac2),
      .mdio_in_to_the_tse_mac3                   (mdio_in_to_the_tse_mac3),
      .mdio_oen_from_the_tse_mac                 (mdio_oen_from_the_tse_mac),
      .mdio_oen_from_the_tse_mac1                (mdio_oen_from_the_tse_mac1),
      .mdio_oen_from_the_tse_mac2                (mdio_oen_from_the_tse_mac2),
      .mdio_oen_from_the_tse_mac3                (mdio_oen_from_the_tse_mac3),
      .mdio_out_from_the_tse_mac                 (mdio_out_from_the_tse_mac),
      .mdio_out_from_the_tse_mac1                (mdio_out_from_the_tse_mac1),
      .mdio_out_from_the_tse_mac2                (mdio_out_from_the_tse_mac2),
      .mdio_out_from_the_tse_mac3                (mdio_out_from_the_tse_mac3),
      .out_port_from_the_led_pio                 (out_port_from_the_led_pio),
      .out_port_from_the_seven_seg_pio           (out_port_from_the_seven_seg_pio),
      .pcie_rstn_pcie_compiler_0                 (pcie_rstn_pcie_compiler_0),
      .phystatus_ext_pcie_compiler_0             (phystatus_ext_pcie_compiler_0),
      .pipe_mode_pcie_compiler_0                 (pipe_mode_pcie_compiler_0),
      .pll_c1_out                                (pll_c1_out),
      .pll_powerdown_pcie_compiler_0             (pll_powerdown_pcie_compiler_0),
      .pll_sys_clk                               (pll_sys_clk),
      .powerdown_ext_pcie_compiler_0             (powerdown_ext_pcie_compiler_0),
      .protocol_to_the_ethernet_port_interface_0 (protocol_to_the_ethernet_port_interface_0),
      .rate_ext_pcie_compiler_0                  (rate_ext_pcie_compiler_0),
      .reconfig_clk_pcie_compiler_0              (reconfig_clk_pcie_compiler_0),
      .reconfig_fromgxb_pcie_compiler_0          (reconfig_fromgxb_pcie_compiler_0),
      .reconfig_togxb_pcie_compiler_0            (reconfig_togxb_pcie_compiler_0),
      .ref_clk_to_the_tse_mac                    (ref_clk_to_the_tse_mac),
      .ref_clk_to_the_tse_mac1                   (ref_clk_to_the_tse_mac1),
      .ref_clk_to_the_tse_mac2                   (ref_clk_to_the_tse_mac2),
      .ref_clk_to_the_tse_mac3                   (ref_clk_to_the_tse_mac3),
      .refclk_pcie_compiler_0                    (refclk_pcie_compiler_0),
      .reset_n                                   (reset_n),
      .rx_in0_pcie_compiler_0                    (rx_in0_pcie_compiler_0),
      .rx_recovclkout_from_the_tse_mac           (rx_recovclkout_from_the_tse_mac),
      .rx_recovclkout_from_the_tse_mac1          (rx_recovclkout_from_the_tse_mac1),
      .rx_recovclkout_from_the_tse_mac2          (rx_recovclkout_from_the_tse_mac2),
      .rx_recovclkout_from_the_tse_mac3          (rx_recovclkout_from_the_tse_mac3),
      .rxdata0_ext_pcie_compiler_0               (rxdata0_ext_pcie_compiler_0),
      .rxdatak0_ext_pcie_compiler_0              (rxdatak0_ext_pcie_compiler_0),
      .rxelecidle0_ext_pcie_compiler_0           (rxelecidle0_ext_pcie_compiler_0),
      .rxp_to_the_tse_mac                        (rxp_to_the_tse_mac),
      .rxp_to_the_tse_mac1                       (rxp_to_the_tse_mac1),
      .rxp_to_the_tse_mac2                       (rxp_to_the_tse_mac2),
      .rxp_to_the_tse_mac3                       (rxp_to_the_tse_mac3),
      .rxpolarity0_ext_pcie_compiler_0           (rxpolarity0_ext_pcie_compiler_0),
      .rxstatus0_ext_pcie_compiler_0             (rxstatus0_ext_pcie_compiler_0),
      .rxvalid0_ext_pcie_compiler_0              (rxvalid0_ext_pcie_compiler_0),
      .test_in_pcie_compiler_0                   (test_in_pcie_compiler_0),
      .test_out_pcie_compiler_0                  (test_out_pcie_compiler_0),
      .tx_out0_pcie_compiler_0                   (tx_out0_pcie_compiler_0),
      .txcompl0_ext_pcie_compiler_0              (txcompl0_ext_pcie_compiler_0),
      .txdata0_ext_pcie_compiler_0               (txdata0_ext_pcie_compiler_0),
      .txdatak0_ext_pcie_compiler_0              (txdatak0_ext_pcie_compiler_0),
      .txdetectrx_ext_pcie_compiler_0            (txdetectrx_ext_pcie_compiler_0),
      .txelecidle0_ext_pcie_compiler_0           (txelecidle0_ext_pcie_compiler_0),
      .txp_from_the_tse_mac                      (txp_from_the_tse_mac),
      .txp_from_the_tse_mac1                     (txp_from_the_tse_mac1),
      .txp_from_the_tse_mac2                     (txp_from_the_tse_mac2),
      .txp_from_the_tse_mac3                     (txp_from_the_tse_mac3),
      .user_sw_to_the_ethernet_port_interface_0  (user_sw_to_the_ethernet_port_interface_0)
    );

  pcie_compiler_0_testbench the_pcie_compiler_0_testbench
    (
      .busy_altgxb_reconfig (busy_altgxb_reconfig_pcie_compiler_0),
      .clk125_out           (clk125_out_pcie_compiler_0),
      .clk250_out           (clk250_out_pcie_compiler_0),
      .clk500_out           (clk500_out_pcie_compiler_0),
      .fixedclk_serdes      (fixedclk_serdes_pcie_compiler_0),
      .gxb_powerdown        (gxb_powerdown_pcie_compiler_0),
      .pcie_rstn            (pcie_rstn_pcie_compiler_0),
      .phystatus_ext        (phystatus_ext_pcie_compiler_0),
      .pipe_mode            (pipe_mode_pcie_compiler_0),
      .pll_powerdown        (pll_powerdown_pcie_compiler_0),
      .powerdown_ext        (powerdown_ext_pcie_compiler_0),
      .rate_ext             (rate_ext_pcie_compiler_0),
      .reconfig_clk         (reconfig_clk_pcie_compiler_0),
      .reconfig_fromgxb     (reconfig_fromgxb_pcie_compiler_0),
      .reconfig_togxb       (reconfig_togxb_pcie_compiler_0),
      .refclk               (refclk_pcie_compiler_0),
      .rx_in0               (rx_in0_pcie_compiler_0),
      .rxdata0_ext          (rxdata0_ext_pcie_compiler_0),
      .rxdatak0_ext         (rxdatak0_ext_pcie_compiler_0),
      .rxelecidle0_ext      (rxelecidle0_ext_pcie_compiler_0),
      .rxpolarity0_ext      (rxpolarity0_ext_pcie_compiler_0),
      .rxstatus0_ext        (rxstatus0_ext_pcie_compiler_0),
      .rxvalid0_ext         (rxvalid0_ext_pcie_compiler_0),
      .test_in              (test_in_pcie_compiler_0),
      .test_out             (test_out_pcie_compiler_0),
      .tx_out0              (tx_out0_pcie_compiler_0),
      .txcompl0_ext         (txcompl0_ext_pcie_compiler_0),
      .txdata0_ext          (txdata0_ext_pcie_compiler_0),
      .txdatak0_ext         (txdatak0_ext_pcie_compiler_0),
      .txdetectrx_ext       (txdetectrx_ext_pcie_compiler_0),
      .txelecidle0_ext      (txelecidle0_ext_pcie_compiler_0)
    );

  tse_mac_loopback the_tse_mac_loopback
    (
      .ref_clk (ref_clk_to_the_tse_mac),
      .rxp     (rxp_to_the_tse_mac),
      .txp     (txp_from_the_tse_mac)
    );

  tse_mac1_loopback the_tse_mac1_loopback
    (
      .ref_clk (ref_clk_to_the_tse_mac1),
      .rxp     (rxp_to_the_tse_mac1),
      .txp     (txp_from_the_tse_mac1)
    );

  tse_mac2_loopback the_tse_mac2_loopback
    (
      .ref_clk (ref_clk_to_the_tse_mac2),
      .rxp     (rxp_to_the_tse_mac2),
      .txp     (txp_from_the_tse_mac2)
    );

  tse_mac3_loopback the_tse_mac3_loopback
    (
      .ref_clk (ref_clk_to_the_tse_mac3),
      .rxp     (rxp_to_the_tse_mac3),
      .txp     (txp_from_the_tse_mac3)
    );

  initial
    cal_blk_clk_0 = 1'b0;
  always
    #10 cal_blk_clk_0 <= ~cal_blk_clk_0;
  
  initial
    ext_clk = 1'b0;
  always
    #4 ext_clk <= ~ext_clk;
  
  initial 
    begin
      reset_n <= 0;
      #80 reset_n <= 1;
    end

endmodule


//synthesis translate_on